- We don't want ITEs in the grammar

- We don't want disjunctions in the grammar, since we can't emulate disjunctions by asking for more abducts

- We don't want the goal to be suggested as an abduct, but in some cases we can't help this. Elaborate why, from Zulip chat.

- For this goal:
	m > Z.succ n -> Z.pred m > n
with options:
	--produce-abducts	--incremental	--tlimit-per=60000	--dag-thresh=0	--sygus-enum=smart		--sygus-rewrite=none
I get abducts:
	n <= (Z.pred m) + -3
	(Z.pred m) + -1 = n
	(Z.pred m) + -2 = n && true
We shouldn't be getting `true` as a solution

- Option --sygus-core-connective is much faster, gives much better solutions, but some of the conjuncts are always too restrictive.

- Option --sygus-rewrite=none doesn't seem to make a difference.

- Can we restrict constants to more common ones before trying other ones?
For example, for this goal:
	n < m -> Z.succ n < Z.succ m
with options:
	--produce-abducts	--incremental	--tlimit-per=60000	--dag-thresh=0	--sygus-enum=smart
I get abducts:
	(Z.succ n) <= (Z.succ m) + -2
	(Z.succ m) + -1 = (Z.succ n)
	(Z.succ m) = m && (Z.succ n) <= n
Maybe we don't allow 2 here?
Another example goal:
	forall n : nat, 0 <= Z.of_nat n
with the same options gives:
	(Z.of_nat n) + -4 = -1
	-1 <= (Z.of_nat n) + -4
	-1 <= (Z.of_nat n) + (Z.of_nat n)
In fact, goals about of_nat seemed to invoke constant 4, and goals about pos seemed to invoke 3 and 5.	
