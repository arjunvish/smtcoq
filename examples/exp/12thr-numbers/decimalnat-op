1 subgoal
  
  n : nat
  ============================
  to_lu (S n) = Little.succ (to_lu n)
The command has indeed failed with message:
Could not reconstruct abduct
1 subgoal
  
  n : nat
  d : uint
  ============================
  Nat.to_little_uint n (Little.succ d) = Little.succ (Nat.to_little_uint n d)
The command has indeed failed with message:
Could not reconstruct abduct
1 subgoal
  
  n : nat
  ============================
  to_lu n = Nat.to_little_uint n zero
The command has indeed failed with message:
Could not reconstruct abduct
1 subgoal
  
  d : uint
  ============================
  of_lu d = hd d + 10 * of_lu (tl d)
The command has indeed failed with message:
Could not reconstruct abduct
1 subgoal
  
  d : uint
  ============================
  of_lu (Little.succ d) = S (of_lu d)
The command has indeed failed with message:
Could not reconstruct abduct
1 subgoal
  
  n : nat
  ============================
  of_lu (to_lu n) = n
The command has indeed failed with message:
Could not reconstruct abduct
1 subgoal
  
  n : nat
  ============================
  Nat.of_uint (Nat.to_uint n) = n
The command has indeed failed with message:
Could not reconstruct abduct
1 subgoal
  
  n : nat
  ============================
  n <> 0 -> to_lu (10 * n) = D0 (to_lu n)
The command has indeed failed with message:
Could not reconstruct abduct
1 subgoal
  
  d : uint
  ============================
  of_lu d = 0 <-> nztail d = Nil
The command has indeed failed with message:
Could not reconstruct abduct
1 subgoal
  
  d : uint
  ============================
  to_lu (of_lu d) = lnorm d -> to_lu (10 * of_lu d) = lnorm (D0 d)
The command has indeed failed with message:
Could not reconstruct abduct
1 subgoal
  
  d : uint
  ============================
  to_lu (of_lu d) = lnorm d
The command has indeed failed with message:
Could not reconstruct abduct
1 subgoal
  
  d : uint
  ============================
  Nat.to_uint (Nat.of_uint d) = unorm d
The command has indeed failed with message:
Could not reconstruct abduct
1 subgoal
  
  n, n' : nat
  ============================
  Nat.to_uint n = Nat.to_uint n' -> n = n'
The command has indeed failed with message:
Could not reconstruct abduct
1 subgoal
  
  d : uint
  ============================
  exists n : nat, Nat.to_uint n = unorm d
The command has indeed failed with message:
Anomaly
"Uncaught exception Failure("Verit.tactic: can only deal with equality over bool")."
Please report at http://coq.inria.fr/bugs/.
1 subgoal
  
  d : uint
  ============================
  Nat.of_uint (unorm d) = Nat.of_uint d
The command has indeed failed with message:
cvc5 returned SAT. The goal is invalid, but one of the following hypotheses would allow cvc5 to prove the goal:

(unorm d) = d
(Nat.of_uint (unorm d)) = (Nat.of_uint d)
(unorm (unorm d)) = d && (unorm d) = d
1 subgoal
  
  d, d' : uint
  ============================
  Nat.of_uint d = Nat.of_uint d' -> unorm d = unorm d'
The command has indeed failed with message:
cvc5 returned SAT. The goal is invalid, but one of the following hypotheses would allow cvc5 to prove the goal:

d = d'
(unorm d) = (unorm d')
if d = d' then (unorm d) else d' = d
1 subgoal
  
  d, d' : uint
  ============================
  Nat.of_uint d = Nat.of_uint d' <-> unorm d = unorm d'
The command has indeed failed with message:
cvc5 returned SAT. The goal is invalid, but one of the following hypotheses would allow cvc5 to prove the goal:

d = d'
if d = d' then (unorm d) else d' = d
if d = d' then (unorm (unorm d)) else d' = d
1 subgoal
  
  n : nat
  ============================
  Nat.of_int (Nat.to_int n) = Some n
1 subgoal
  
  n, n' : nat
  ============================
  Nat.to_int n = Nat.to_int n' -> n = n'
1 subgoal
  
  d : uint
  ============================
  exists n : nat, Nat.to_int n = norm (Pos d)
