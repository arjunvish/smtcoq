(assume a0 (not (or (not (= (op_3 op_2) op_0)) (not (op_1 (op_3 op_2))) (op_1 op_0))))
(step t1 (cl (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2))) (not (op_1 (op_3 op_2))) (not (= op_0 (op_3 op_2)))) :rule and_neg)
(step t2 (cl (=> (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2))) (op_1 op_0)) (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2)))) :rule implies_neg1)
(anchor :step t3)
(assume t3.a0 (op_1 (op_3 op_2)))
(assume t3.a1 (= op_0 (op_3 op_2)))
(step t3.t1 (cl (=> (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2))) (op_1 op_0)) (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2)))) :rule implies_neg1)
(anchor :step t3.t2)
(assume t3.t2.a0 (op_1 (op_3 op_2)))
(assume t3.t2.a1 (= op_0 (op_3 op_2)))
(step t3.t2.t1 (cl (= (= (op_1 op_0) true) (op_1 op_0))) :rule equiv_simplify)
(step t3.t2.t2 (cl (not (= (op_1 op_0) true)) (op_1 op_0)) :rule equiv1 :premises (t3.t2.t1))
(step t3.t2.t3 (cl (= (op_3 op_2) op_0)) :rule symm :premises (t3.t2.a1))
(step t3.t2.t4 (cl (= op_0 (op_3 op_2))) :rule symm :premises (t3.t2.t3))
(step t3.t2.t5 (cl (= (op_1 op_0) (op_1 (op_3 op_2)))) :rule cong :premises (t3.t2.t4))
(step t3.t2.t6 (cl (= (= (op_1 (op_3 op_2)) true) (op_1 (op_3 op_2)))) :rule equiv_simplify)
(step t3.t2.t7 (cl (= (op_1 (op_3 op_2)) true) (not (op_1 (op_3 op_2)))) :rule equiv2 :premises (t3.t2.t6))
(step t3.t2.t8 (cl (= (op_1 (op_3 op_2)) true)) :rule resolution :premises (t3.t2.t7 t3.t2.a0))
(step t3.t2.t9 (cl (= (op_1 op_0) true)) :rule trans :premises (t3.t2.t5 t3.t2.t8))
(step t3.t2.t10 (cl (op_1 op_0)) :rule resolution :premises (t3.t2.t2 t3.t2.t9))
(step t3.t2 (cl (not (op_1 (op_3 op_2))) (not (= op_0 (op_3 op_2))) (op_1 op_0)) :rule subproof :discharge (t3.t2.a0 t3.t2.a1))
(step t3.t3 (cl (not (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2)))) (op_1 (op_3 op_2))) :rule and_pos)
(step t3.t4 (cl (not (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2)))) (= op_0 (op_3 op_2))) :rule and_pos)
(step t3.t5 (cl (op_1 op_0) (not (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2)))) (not (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2))))) :rule resolution :premises (t3.t2 t3.t3 t3.t4))
(step t3.t6 (cl (not (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2)))) (not (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2)))) (op_1 op_0)) :rule reordering :premises (t3.t5))
(step t3.t7 (cl (not (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2)))) (op_1 op_0)) :rule contraction :premises (t3.t6))
(step t3.t8 (cl (=> (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2))) (op_1 op_0)) (op_1 op_0)) :rule resolution :premises (t3.t1 t3.t7))
(step t3.t9 (cl (=> (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2))) (op_1 op_0)) (not (op_1 op_0))) :rule implies_neg2)
(step t3.t10 (cl (=> (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2))) (op_1 op_0)) (=> (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2))) (op_1 op_0))) :rule resolution :premises (t3.t8 t3.t9))
(step t3.t11 (cl (=> (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2))) (op_1 op_0))) :rule contraction :premises (t3.t10))
(step t3.t12 (cl (not (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2)))) (op_1 op_0)) :rule implies :premises (t3.t11))
(step t3.t13 (cl (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2))) (not (op_1 (op_3 op_2))) (not (= op_0 (op_3 op_2)))) :rule and_neg)
(step t3.t14 (cl (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2)))) :rule resolution :premises (t3.t13 t3.a0 t3.a1))
(step t3.t15 (cl (op_1 op_0)) :rule resolution :premises (t3.t12 t3.t14))
(step t3 (cl (not (op_1 (op_3 op_2))) (not (= op_0 (op_3 op_2))) (op_1 op_0)) :rule subproof :discharge (t3.a0 t3.a1))
(step t4 (cl (not (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2)))) (op_1 (op_3 op_2))) :rule and_pos)
(step t5 (cl (not (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2)))) (= op_0 (op_3 op_2))) :rule and_pos)
(step t6 (cl (op_1 op_0) (not (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2)))) (not (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2))))) :rule resolution :premises (t3 t4 t5))
(step t7 (cl (not (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2)))) (not (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2)))) (op_1 op_0)) :rule reordering :premises (t6))
(step t8 (cl (not (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2)))) (op_1 op_0)) :rule contraction :premises (t7))
(step t9 (cl (=> (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2))) (op_1 op_0)) (op_1 op_0)) :rule resolution :premises (t2 t8))
(step t10 (cl (=> (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2))) (op_1 op_0)) (not (op_1 op_0))) :rule implies_neg2)
(step t11 (cl (=> (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2))) (op_1 op_0)) (=> (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2))) (op_1 op_0))) :rule resolution :premises (t9 t10))
(step t12 (cl (=> (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2))) (op_1 op_0))) :rule contraction :premises (t11))
(step t13 (cl (not (and (op_1 (op_3 op_2)) (= op_0 (op_3 op_2)))) (op_1 op_0)) :rule implies :premises (t12))
(step t14 (cl (not (op_1 (op_3 op_2))) (not (= op_0 (op_3 op_2))) (op_1 op_0)) :rule resolution :premises (t1 t13))
(step t15 (cl (not (op_1 (op_3 op_2))) (op_1 op_0) (not (= op_0 (op_3 op_2)))) :rule reordering :premises (t14))
(step t16 (cl (not (= (not (or (not (= (op_3 op_2) op_0)) (not (op_1 (op_3 op_2))) (op_1 op_0))) (not (or (not (= op_0 (op_3 op_2))) (not (op_1 (op_3 op_2))) (op_1 op_0))))) (not (not (or (not (= (op_3 op_2) op_0)) (not (op_1 (op_3 op_2))) (op_1 op_0)))) (not (or (not (= op_0 (op_3 op_2))) (not (op_1 (op_3 op_2))) (op_1 op_0)))) :rule equiv_pos2)
(step t17 (cl (= (= (op_3 op_2) op_0) (= op_0 (op_3 op_2)))) :rule all_simplify :args (arith-eq-symm-int))
(step t18 (cl (= (not (= (op_3 op_2) op_0)) (not (= op_0 (op_3 op_2))))) :rule cong :premises (t17))
(step t19 (cl (= (not (op_1 (op_3 op_2))) (not (op_1 (op_3 op_2))))) :rule refl)
(step t20 (cl (= (op_1 op_0) (op_1 op_0))) :rule refl)
(step t21 (cl (= (or (not (= (op_3 op_2) op_0)) (not (op_1 (op_3 op_2))) (op_1 op_0)) (or (not (= op_0 (op_3 op_2))) (not (op_1 (op_3 op_2))) (op_1 op_0)))) :rule cong :premises (t18 t19 t20))
(step t22 (cl (= (not (or (not (= (op_3 op_2) op_0)) (not (op_1 (op_3 op_2))) (op_1 op_0))) (not (or (not (= op_0 (op_3 op_2))) (not (op_1 (op_3 op_2))) (op_1 op_0))))) :rule cong :premises (t21))
(step t23 (cl (not (or (not (= op_0 (op_3 op_2))) (not (op_1 (op_3 op_2))) (op_1 op_0)))) :rule resolution :premises (t16 t22 a0))
(step t24 (cl (not (op_1 op_0))) :rule not_or :premises (t23))
(step t25 (cl (not (not (not (op_1 (op_3 op_2))))) (op_1 (op_3 op_2))) :rule not_not)
(step t26 (cl (not (= (not (or (not (= (op_3 op_2) op_0)) (not (op_1 (op_3 op_2))) (op_1 op_0))) (not (or (not (= op_0 (op_3 op_2))) (not (op_1 (op_3 op_2))) (op_1 op_0))))) (not (not (or (not (= (op_3 op_2) op_0)) (not (op_1 (op_3 op_2))) (op_1 op_0)))) (not (or (not (= op_0 (op_3 op_2))) (not (op_1 (op_3 op_2))) (op_1 op_0)))) :rule equiv_pos2)
(step t27 (cl (= (= (op_3 op_2) op_0) (= op_0 (op_3 op_2)))) :rule all_simplify :args (arith-eq-symm-int))
(step t28 (cl (= (not (= (op_3 op_2) op_0)) (not (= op_0 (op_3 op_2))))) :rule cong :premises (t27))
(step t29 (cl (= (not (op_1 (op_3 op_2))) (not (op_1 (op_3 op_2))))) :rule refl)
(step t30 (cl (= (op_1 op_0) (op_1 op_0))) :rule refl)
(step t31 (cl (= (or (not (= (op_3 op_2) op_0)) (not (op_1 (op_3 op_2))) (op_1 op_0)) (or (not (= op_0 (op_3 op_2))) (not (op_1 (op_3 op_2))) (op_1 op_0)))) :rule cong :premises (t28 t29 t30))
(step t32 (cl (= (not (or (not (= (op_3 op_2) op_0)) (not (op_1 (op_3 op_2))) (op_1 op_0))) (not (or (not (= op_0 (op_3 op_2))) (not (op_1 (op_3 op_2))) (op_1 op_0))))) :rule cong :premises (t31))
(step t33 (cl (not (or (not (= op_0 (op_3 op_2))) (not (op_1 (op_3 op_2))) (op_1 op_0)))) :rule resolution :premises (t26 t32 a0))
(step t34 (cl (not (not (op_1 (op_3 op_2))))) :rule not_or :premises (t33))
(step t35 (cl (op_1 (op_3 op_2))) :rule resolution :premises (t25 t34))
(step t36 (cl (not (not (not (= op_0 (op_3 op_2))))) (= op_0 (op_3 op_2))) :rule not_not)
(step t37 (cl (not (= (not (or (not (= (op_3 op_2) op_0)) (not (op_1 (op_3 op_2))) (op_1 op_0))) (not (or (not (= op_0 (op_3 op_2))) (not (op_1 (op_3 op_2))) (op_1 op_0))))) (not (not (or (not (= (op_3 op_2) op_0)) (not (op_1 (op_3 op_2))) (op_1 op_0)))) (not (or (not (= op_0 (op_3 op_2))) (not (op_1 (op_3 op_2))) (op_1 op_0)))) :rule equiv_pos2)
(step t38 (cl (= (= (op_3 op_2) op_0) (= op_0 (op_3 op_2)))) :rule all_simplify :args (arith-eq-symm-int))
(step t39 (cl (= (not (= (op_3 op_2) op_0)) (not (= op_0 (op_3 op_2))))) :rule cong :premises (t38))
(step t40 (cl (= (not (op_1 (op_3 op_2))) (not (op_1 (op_3 op_2))))) :rule refl)
(step t41 (cl (= (op_1 op_0) (op_1 op_0))) :rule refl)
(step t42 (cl (= (or (not (= (op_3 op_2) op_0)) (not (op_1 (op_3 op_2))) (op_1 op_0)) (or (not (= op_0 (op_3 op_2))) (not (op_1 (op_3 op_2))) (op_1 op_0)))) :rule cong :premises (t39 t40 t41))
(step t43 (cl (= (not (or (not (= (op_3 op_2) op_0)) (not (op_1 (op_3 op_2))) (op_1 op_0))) (not (or (not (= op_0 (op_3 op_2))) (not (op_1 (op_3 op_2))) (op_1 op_0))))) :rule cong :premises (t42))
(step t44 (cl (not (or (not (= op_0 (op_3 op_2))) (not (op_1 (op_3 op_2))) (op_1 op_0)))) :rule resolution :premises (t37 t43 a0))
(step t45 (cl (not (not (= op_0 (op_3 op_2))))) :rule not_or :premises (t44))
(step t46 (cl (= op_0 (op_3 op_2))) :rule resolution :premises (t36 t45))
(step t47 (cl) :rule resolution :premises (t15 t24 t35 t46))
