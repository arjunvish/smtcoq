Certif before preprocessing: 
(a0, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t1, Equp2AST, (cl  ((not ((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))) = (false)))) ((not (not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))) ((false))), [], [])
(t2, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [], [])
(t3, ReflAST, (cl  ((op_0 = op_0))), [], [])
(t4, HoleAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [ ARITH_POLY_NORM ((op_1 + 1) = (1 + op_1))])
(t5, CongAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ t3 t4], [])
(t6, HoleAST, (cl  (((op_0 = (1 + op_1)) = (op_1 = ((-1) + op_0))))), [], [ ARITH_POLY_NORM ((op_0 = (1 + op_1)) = (op_1 = ((-1) + op_0)))])
(t7, TransAST, (cl  (((op_0 = (op_1 + 1)) = (op_1 = ((-1) + op_0))))), [ t5 t6], [])
(t8, ReflAST, (cl  (((op_2 ( op_1)) = (op_2 ( op_1))))), [], [])
(t9, HoleAST, (cl  (((op_0 - 1) = (op_0 + ((-1) * 1))))), [], [ ARITH_POLY_NORM ((op_0 - 1) = (op_0 + ((-1) * 1)))])
(t10, ProdsimpAST, (cl  ((((-1) * 1) = (-1)))), [], [])
(t11, CongAST, (cl  (((op_0 + ((-1) * 1)) = (op_0 + (-1))))), [ t3 t10], [])
(t12, HoleAST, (cl  (((op_0 + (-1)) = ((-1) + op_0)))), [], [ ARITH_POLY_NORM ((op_0 + (-1)) = ((-1) + op_0))])
(t13, TransAST, (cl  (((op_0 + ((-1) * 1)) = ((-1) + op_0)))), [ t11 t12], [])
(t14, TransAST, (cl  (((op_0 - 1) = ((-1) + op_0)))), [ t9 t13], [])
(t15, CongAST, (cl  (((op_2 ( (op_0 - 1))) = (op_2 ( ((-1) + op_0)))))), [ t14], [])
(t16, CongAST, (cl  ((((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))) = ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))), [ t8 t15], [])
(t17, CongAST, (cl  (((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [ t7 t16], [])
(t18, CongAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))))), [ t17], [])
(t19, ResoAST, (cl  ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [ t2 t18 a0], [])
(t20, Nimp1AST, (cl  ((op_1 = ((-1) + op_0)))), [ t19], [])
(t21, CongAST, (cl  (((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))), [ t20], [])
(t22, ReflAST, (cl  (((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0)))))), [], [])
(t23, CongAST, (cl  ((((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))) = ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0))))))), [ t21 t22], [])
(t24, CongAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))) = (not ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0)))))))), [ t23], [])
(t25, AllsimpAST, (cl  ((((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0)))) = (true)))), [], [ eq_simplify1 (op_2 ( ((-1) + op_0)))])
(t26, CongAST, (cl  (((not ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0))))) = (not (true))))), [ t25], [])
(t27, NotsimpAST, (cl  (((not (true)) = (false)))), [], [])
(t28, TransAST, (cl  (((not ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0))))) = (false)))), [ t26 t27], [])
(t29, TransAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))) = (false)))), [ t24 t28], [])
(t30, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [], [])
(t31, ResoAST, (cl  ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [ t30 t18 a0], [])
(t32, Nimp2AST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))), [ t31], [])
(t33, ResoAST, (cl  ((false))), [ t1 t29 t32], [])
(t34, FalsAST, (cl  ((not (false)))), [], [])
(t35, ResoAST, (cl ), [ t33 t34], [])

Certif after storing shared terms: 
(a0, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t1, Equp2AST, (cl  ((not ((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))) = (false)))) ((not (not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))) ((false))), [], [])
(t2, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [], [])
(t3, ReflAST, (cl  ((op_0 = op_0))), [], [])
(t4, HoleAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [ ARITH_POLY_NORM ((op_1 + 1) = (1 + op_1))])
(t5, CongAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ t3 t4], [])
(t6, HoleAST, (cl  (((op_0 = (1 + op_1)) = (op_1 = ((-1) + op_0))))), [], [ ARITH_POLY_NORM ((op_0 = (1 + op_1)) = (op_1 = ((-1) + op_0)))])
(t7, TransAST, (cl  (((op_0 = (op_1 + 1)) = (op_1 = ((-1) + op_0))))), [ t5 t6], [])
(t8, ReflAST, (cl  (((op_2 ( op_1)) = (op_2 ( op_1))))), [], [])
(t9, HoleAST, (cl  (((op_0 - 1) = (op_0 + ((-1) * 1))))), [], [ ARITH_POLY_NORM ((op_0 - 1) = (op_0 + ((-1) * 1)))])
(t10, ProdsimpAST, (cl  ((((-1) * 1) = (-1)))), [], [])
(t11, CongAST, (cl  (((op_0 + ((-1) * 1)) = (op_0 + (-1))))), [ t3 t10], [])
(t12, HoleAST, (cl  (((op_0 + (-1)) = ((-1) + op_0)))), [], [ ARITH_POLY_NORM ((op_0 + (-1)) = ((-1) + op_0))])
(t13, TransAST, (cl  (((op_0 + ((-1) * 1)) = ((-1) + op_0)))), [ t11 t12], [])
(t14, TransAST, (cl  (((op_0 - 1) = ((-1) + op_0)))), [ t9 t13], [])
(t15, CongAST, (cl  (((op_2 ( (op_0 - 1))) = (op_2 ( ((-1) + op_0)))))), [ t14], [])
(t16, CongAST, (cl  ((((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))) = ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))), [ t8 t15], [])
(t17, CongAST, (cl  (((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [ t7 t16], [])
(t18, CongAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))))), [ t17], [])
(t19, ResoAST, (cl  ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [ t2 t18 a0], [])
(t20, Nimp1AST, (cl  ((op_1 = ((-1) + op_0)))), [ t19], [])
(t21, CongAST, (cl  (((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))), [ t20], [])
(t22, ReflAST, (cl  (((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0)))))), [], [])
(t23, CongAST, (cl  ((((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))) = ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0))))))), [ t21 t22], [])
(t24, CongAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))) = (not ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0)))))))), [ t23], [])
(t25, AllsimpAST, (cl  ((((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0)))) = (true)))), [], [ eq_simplify1 (op_2 ( ((-1) + op_0)))])
(t26, CongAST, (cl  (((not ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0))))) = (not (true))))), [ t25], [])
(t27, NotsimpAST, (cl  (((not (true)) = (false)))), [], [])
(t28, TransAST, (cl  (((not ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0))))) = (false)))), [ t26 t27], [])
(t29, TransAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))) = (false)))), [ t24 t28], [])
(t30, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [], [])
(t31, ResoAST, (cl  ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [ t30 t18 a0], [])
(t32, Nimp2AST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))), [ t31], [])
(t33, ResoAST, (cl  ((false))), [ t1 t29 t32], [])
(t34, FalsAST, (cl  ((not (false)))), [], [])
(t35, ResoAST, (cl ), [ t33 t34], [])

Certif after process_fins: 
(a0, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t1, Equp2AST, (cl  ((not ((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))) = (false)))) ((not (not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))) ((false))), [], [])
(t2, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [], [])
(t3, ReflAST, (cl  ((op_0 = op_0))), [], [])
(t4, HoleAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [ ARITH_POLY_NORM ((op_1 + 1) = (1 + op_1))])
(t5, CongAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ t3 t4], [])
(t6, HoleAST, (cl  (((op_0 = (1 + op_1)) = (op_1 = ((-1) + op_0))))), [], [ ARITH_POLY_NORM ((op_0 = (1 + op_1)) = (op_1 = ((-1) + op_0)))])
(t7, TransAST, (cl  (((op_0 = (op_1 + 1)) = (op_1 = ((-1) + op_0))))), [ t5 t6], [])
(t8, ReflAST, (cl  (((op_2 ( op_1)) = (op_2 ( op_1))))), [], [])
(t9, HoleAST, (cl  (((op_0 - 1) = (op_0 + ((-1) * 1))))), [], [ ARITH_POLY_NORM ((op_0 - 1) = (op_0 + ((-1) * 1)))])
(t10, ProdsimpAST, (cl  ((((-1) * 1) = (-1)))), [], [])
(t11, CongAST, (cl  (((op_0 + ((-1) * 1)) = (op_0 + (-1))))), [ t3 t10], [])
(t12, HoleAST, (cl  (((op_0 + (-1)) = ((-1) + op_0)))), [], [ ARITH_POLY_NORM ((op_0 + (-1)) = ((-1) + op_0))])
(t13, TransAST, (cl  (((op_0 + ((-1) * 1)) = ((-1) + op_0)))), [ t11 t12], [])
(t14, TransAST, (cl  (((op_0 - 1) = ((-1) + op_0)))), [ t9 t13], [])
(t15, CongAST, (cl  (((op_2 ( (op_0 - 1))) = (op_2 ( ((-1) + op_0)))))), [ t14], [])
(t16, CongAST, (cl  ((((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))) = ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))), [ t8 t15], [])
(t17, CongAST, (cl  (((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [ t7 t16], [])
(t18, CongAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))))), [ t17], [])
(t19, ResoAST, (cl  ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [ t2 t18 a0], [])
(t20, Nimp1AST, (cl  ((op_1 = ((-1) + op_0)))), [ t19], [])
(t21, CongAST, (cl  (((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))), [ t20], [])
(t22, ReflAST, (cl  (((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0)))))), [], [])
(t23, CongAST, (cl  ((((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))) = ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0))))))), [ t21 t22], [])
(t24, CongAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))) = (not ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0)))))))), [ t23], [])
(t25, AllsimpAST, (cl  ((((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0)))) = (true)))), [], [ eq_simplify1 (op_2 ( ((-1) + op_0)))])
(t26, CongAST, (cl  (((not ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0))))) = (not (true))))), [ t25], [])
(t27, NotsimpAST, (cl  (((not (true)) = (false)))), [], [])
(t28, TransAST, (cl  (((not ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0))))) = (false)))), [ t26 t27], [])
(t29, TransAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))) = (false)))), [ t24 t28], [])
(t30, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [], [])
(t31, ResoAST, (cl  ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [ t30 t18 a0], [])
(t32, Nimp2AST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))), [ t31], [])
(t33, ResoAST, (cl  ((false))), [ t1 t29 t32], [])
(t34, FalsAST, (cl  ((not (false)))), [], [])
(t35, ResoAST, (cl ), [ t33 t34], [])

Certif after process_hole: 
(a0, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t1, Equp2AST, (cl  ((not ((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))) = (false)))) ((not (not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))) ((false))), [], [])
(t2, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [], [])
(t3, ReflAST, (cl  ((op_0 = op_0))), [], [])
(t4, ArithpolynormAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [ ARITH_POLY_NORM ((op_1 + 1) = (1 + op_1))])
(t5, CongAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ t3 t4], [])
(t6, ArithpolynormAST, (cl  (((op_0 = (1 + op_1)) = (op_1 = ((-1) + op_0))))), [], [ ARITH_POLY_NORM ((op_0 = (1 + op_1)) = (op_1 = ((-1) + op_0)))])
(t7, TransAST, (cl  (((op_0 = (op_1 + 1)) = (op_1 = ((-1) + op_0))))), [ t5 t6], [])
(t8, ReflAST, (cl  (((op_2 ( op_1)) = (op_2 ( op_1))))), [], [])
(t9, ArithpolynormAST, (cl  (((op_0 - 1) = (op_0 + ((-1) * 1))))), [], [ ARITH_POLY_NORM ((op_0 - 1) = (op_0 + ((-1) * 1)))])
(t10, ProdsimpAST, (cl  ((((-1) * 1) = (-1)))), [], [])
(t11, CongAST, (cl  (((op_0 + ((-1) * 1)) = (op_0 + (-1))))), [ t3 t10], [])
(t12, ArithpolynormAST, (cl  (((op_0 + (-1)) = ((-1) + op_0)))), [], [ ARITH_POLY_NORM ((op_0 + (-1)) = ((-1) + op_0))])
(t13, TransAST, (cl  (((op_0 + ((-1) * 1)) = ((-1) + op_0)))), [ t11 t12], [])
(t14, TransAST, (cl  (((op_0 - 1) = ((-1) + op_0)))), [ t9 t13], [])
(t15, CongAST, (cl  (((op_2 ( (op_0 - 1))) = (op_2 ( ((-1) + op_0)))))), [ t14], [])
(t16, CongAST, (cl  ((((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))) = ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))), [ t8 t15], [])
(t17, CongAST, (cl  (((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [ t7 t16], [])
(t18, CongAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))))), [ t17], [])
(t19, ResoAST, (cl  ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [ t2 t18 a0], [])
(t20, Nimp1AST, (cl  ((op_1 = ((-1) + op_0)))), [ t19], [])
(t21, CongAST, (cl  (((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))), [ t20], [])
(t22, ReflAST, (cl  (((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0)))))), [], [])
(t23, CongAST, (cl  ((((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))) = ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0))))))), [ t21 t22], [])
(t24, CongAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))) = (not ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0)))))))), [ t23], [])
(t25, AllsimpAST, (cl  ((((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0)))) = (true)))), [], [ eq_simplify1 (op_2 ( ((-1) + op_0)))])
(t26, CongAST, (cl  (((not ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0))))) = (not (true))))), [ t25], [])
(t27, NotsimpAST, (cl  (((not (true)) = (false)))), [], [])
(t28, TransAST, (cl  (((not ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0))))) = (false)))), [ t26 t27], [])
(t29, TransAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))) = (false)))), [ t24 t28], [])
(t30, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [], [])
(t31, ResoAST, (cl  ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [ t30 t18 a0], [])
(t32, Nimp2AST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))), [ t31], [])
(t33, ResoAST, (cl  ((false))), [ t1 t29 t32], [])
(t34, FalsAST, (cl  ((not (false)))), [], [])
(t35, ResoAST, (cl ), [ t33 t34], [])

Certif after process_notnot: 
(a0, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t1, Equp2AST, (cl  ((not ((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))) = (false)))) ((not (not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))) ((false))), [], [])
(t2, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [], [])
(t3, ReflAST, (cl  ((op_0 = op_0))), [], [])
(t4, ArithpolynormAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [ ARITH_POLY_NORM ((op_1 + 1) = (1 + op_1))])
(t5, CongAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ t3 t4], [])
(t6, ArithpolynormAST, (cl  (((op_0 = (1 + op_1)) = (op_1 = ((-1) + op_0))))), [], [ ARITH_POLY_NORM ((op_0 = (1 + op_1)) = (op_1 = ((-1) + op_0)))])
(t7, TransAST, (cl  (((op_0 = (op_1 + 1)) = (op_1 = ((-1) + op_0))))), [ t5 t6], [])
(t8, ReflAST, (cl  (((op_2 ( op_1)) = (op_2 ( op_1))))), [], [])
(t9, ArithpolynormAST, (cl  (((op_0 - 1) = (op_0 + ((-1) * 1))))), [], [ ARITH_POLY_NORM ((op_0 - 1) = (op_0 + ((-1) * 1)))])
(t10, ProdsimpAST, (cl  ((((-1) * 1) = (-1)))), [], [])
(t11, CongAST, (cl  (((op_0 + ((-1) * 1)) = (op_0 + (-1))))), [ t3 t10], [])
(t12, ArithpolynormAST, (cl  (((op_0 + (-1)) = ((-1) + op_0)))), [], [ ARITH_POLY_NORM ((op_0 + (-1)) = ((-1) + op_0))])
(t13, TransAST, (cl  (((op_0 + ((-1) * 1)) = ((-1) + op_0)))), [ t11 t12], [])
(t14, TransAST, (cl  (((op_0 - 1) = ((-1) + op_0)))), [ t9 t13], [])
(t15, CongAST, (cl  (((op_2 ( (op_0 - 1))) = (op_2 ( ((-1) + op_0)))))), [ t14], [])
(t16, CongAST, (cl  ((((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))) = ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))), [ t8 t15], [])
(t17, CongAST, (cl  (((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [ t7 t16], [])
(t18, CongAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))))), [ t17], [])
(t19, ResoAST, (cl  ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [ t2 t18 a0], [])
(t20, Nimp1AST, (cl  ((op_1 = ((-1) + op_0)))), [ t19], [])
(t21, CongAST, (cl  (((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))), [ t20], [])
(t22, ReflAST, (cl  (((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0)))))), [], [])
(t23, CongAST, (cl  ((((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))) = ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0))))))), [ t21 t22], [])
(t24, CongAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))) = (not ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0)))))))), [ t23], [])
(t25, AllsimpAST, (cl  ((((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0)))) = (true)))), [], [ eq_simplify1 (op_2 ( ((-1) + op_0)))])
(t26, CongAST, (cl  (((not ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0))))) = (not (true))))), [ t25], [])
(t27, NotsimpAST, (cl  (((not (true)) = (false)))), [], [])
(t28, TransAST, (cl  (((not ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0))))) = (false)))), [ t26 t27], [])
(t29, TransAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))) = (false)))), [ t24 t28], [])
(t30, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [], [])
(t31, ResoAST, (cl  ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [ t30 t18 a0], [])
(t32, Nimp2AST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))), [ t31], [])
(t33, ResoAST, (cl  ((false))), [ t1 t29 t32], [])
(t34, FalsAST, (cl  ((not (false)))), [], [])
(t35, ResoAST, (cl ), [ t33 t34], [])

Certif after process_same: 
(a0, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t1, Equp2AST, (cl  ((not ((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))) = (false)))) ((not (not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))) ((false))), [], [])
(t2, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [], [])
(t3, ReflAST, (cl  ((op_0 = op_0))), [], [])
(t4, ArithpolynormAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [ ARITH_POLY_NORM ((op_1 + 1) = (1 + op_1))])
(t5, CongAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ t3 t4], [])
(t6, ArithpolynormAST, (cl  (((op_0 = (1 + op_1)) = (op_1 = ((-1) + op_0))))), [], [ ARITH_POLY_NORM ((op_0 = (1 + op_1)) = (op_1 = ((-1) + op_0)))])
(t7, TransAST, (cl  (((op_0 = (op_1 + 1)) = (op_1 = ((-1) + op_0))))), [ t5 t6], [])
(t8, ReflAST, (cl  (((op_2 ( op_1)) = (op_2 ( op_1))))), [], [])
(t9, ArithpolynormAST, (cl  (((op_0 - 1) = (op_0 + ((-1) * 1))))), [], [ ARITH_POLY_NORM ((op_0 - 1) = (op_0 + ((-1) * 1)))])
(t10, ProdsimpAST, (cl  ((((-1) * 1) = (-1)))), [], [])
(t11, CongAST, (cl  (((op_0 + ((-1) * 1)) = (op_0 + (-1))))), [ t3 t10], [])
(t12, ArithpolynormAST, (cl  (((op_0 + (-1)) = ((-1) + op_0)))), [], [ ARITH_POLY_NORM ((op_0 + (-1)) = ((-1) + op_0))])
(t13, TransAST, (cl  (((op_0 + ((-1) * 1)) = ((-1) + op_0)))), [ t11 t12], [])
(t14, TransAST, (cl  (((op_0 - 1) = ((-1) + op_0)))), [ t9 t13], [])
(t15, CongAST, (cl  (((op_2 ( (op_0 - 1))) = (op_2 ( ((-1) + op_0)))))), [ t14], [])
(t16, CongAST, (cl  ((((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))) = ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))), [ t8 t15], [])
(t17, CongAST, (cl  (((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [ t7 t16], [])
(t18, CongAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))))), [ t17], [])
(t19, ResoAST, (cl  ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [ t2 t18 a0], [])
(t20, Nimp1AST, (cl  ((op_1 = ((-1) + op_0)))), [ t19], [])
(t21, CongAST, (cl  (((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))), [ t20], [])
(t22, ReflAST, (cl  (((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0)))))), [], [])
(t23, CongAST, (cl  ((((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))) = ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0))))))), [ t21 t22], [])
(t24, CongAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))) = (not ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0)))))))), [ t23], [])
(t25, AllsimpAST, (cl  ((((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0)))) = (true)))), [], [ eq_simplify1 (op_2 ( ((-1) + op_0)))])
(t26, CongAST, (cl  (((not ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0))))) = (not (true))))), [ t25], [])
(t27, NotsimpAST, (cl  (((not (true)) = (false)))), [], [])
(t28, TransAST, (cl  (((not ((op_2 ( ((-1) + op_0))) = (op_2 ( ((-1) + op_0))))) = (false)))), [ t26 t27], [])
(t29, TransAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))) = (false)))), [ t24 t28], [])
(t30, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [], [])
(t31, ResoAST, (cl  ((not (imp  (op_1 = ((-1) + op_0)) ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0)))))))), [ t30 t18 a0], [])
(t32, Nimp2AST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( ((-1) + op_0))))))), [ t31], [])
(t33, ResoAST, (cl  ((false))), [ t1 t29 t32], [])
(t34, FalsAST, (cl  ((not (false)))), [], [])
(t35, ResoAST, (cl ), [ t33 t34], [])

nwt: (- op_2 (aka Smt_var_op_0) 1)File "./test8cvc5.v", line 23, characters 5-255:
Error:
Verit.import_trace: preprocessing certificate 

Error: Smtcoq_plugin.SmtForm.Make(Atom).NotWellTyped(_)
Position: Line 37 Position 1

