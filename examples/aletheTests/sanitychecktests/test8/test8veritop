Certif before preprocessing: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t4, NotnotAST, (cl  ((not (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t4 t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(t8, CongAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ t7], [])
(t9, CongAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ t8], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after storing shared terms: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t4, NotnotAST, (cl  ((not (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t4 t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(t8, CongAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ t7], [])
(t9, CongAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ t8], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after process_fins: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t4, NotnotAST, (cl  ((not (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t4 t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(t8, CongAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ t7], [])
(t9, CongAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ t8], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after process_hole: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t4, NotnotAST, (cl  ((not (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t4 t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(t8, CongAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ t7], [])
(t9, CongAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ t8], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after process_notnot: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(t8, CongAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ t7], [])
(t9, CongAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ t8], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after process_same: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(t8, CongAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ t7], [])
(t9, CongAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ t8], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after process_cong: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(x1, ReflAST, (cl  ((op_0 = op_0))), [], [])
(x2, EqcpAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [], [])
(x4, Equn2AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((op_0 = (op_1 + 1))) ((op_0 = (1 + op_1)))), [], [])
(x6, ResoAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((op_0 = (1 + op_1))) (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x2 x4], [])
(x3, EqcpAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_0 = (1 + op_1)))) ((op_0 = (op_1 + 1)))), [], [])
(x5, Equn1AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (op_1 + 1)))) ((not (op_0 = (1 + op_1))))), [], [])
(x7, ResoAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_0 = (1 + op_1)))) (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x3 x5], [])
(t8, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x6 x7 x1 t7], [])
(x9, Equn1AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x10, Equn2AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x8, ResoAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x9 x10], [])
(x11, AndnAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x16, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x12, Equp1AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [], [])
(x13, ResoAST, (cl  ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [ x12 t8], [])
(x14, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [], [])
(x15, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [ x13 x14], [])
(x17, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x11 x16 x15], [])
(x18, Equn2AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x19, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x17 x18], [])
(x20, AndnAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (1 + op_1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x25, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x21, Equp2AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [], [])
(x22, ResoAST, (cl  ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [ x21 t8], [])
(x23, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [], [])
(x24, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [ x22 x23], [])
(x26, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x20 x25 x24], [])
(x27, Equn1AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(x28, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x26 x27], [])
(t9, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x19 x28], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after process_trans: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(x1, ReflAST, (cl  ((op_0 = op_0))), [], [])
(x2, EqcpAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [], [])
(x4, Equn2AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((op_0 = (op_1 + 1))) ((op_0 = (1 + op_1)))), [], [])
(x6, ResoAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((op_0 = (1 + op_1))) (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x2 x4], [])
(x3, EqcpAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_0 = (1 + op_1)))) ((op_0 = (op_1 + 1)))), [], [])
(x5, Equn1AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (op_1 + 1)))) ((not (op_0 = (1 + op_1))))), [], [])
(x7, ResoAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_0 = (1 + op_1)))) (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x3 x5], [])
(t8, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x6 x7 x1 t7], [])
(x9, Equn1AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x10, Equn2AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x8, ResoAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x9 x10], [])
(x11, AndnAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x16, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x12, Equp1AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [], [])
(x13, ResoAST, (cl  ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [ x12 t8], [])
(x14, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [], [])
(x15, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [ x13 x14], [])
(x17, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x11 x16 x15], [])
(x18, Equn2AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x19, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x17 x18], [])
(x20, AndnAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (1 + op_1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x25, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x21, Equp2AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [], [])
(x22, ResoAST, (cl  ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [ x21 t8], [])
(x23, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [], [])
(x24, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [ x22 x23], [])
(x26, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x20 x25 x24], [])
(x27, Equn1AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(x28, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x26 x27], [])
(t9, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x19 x28], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after process_simplify: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x45, Equn1AST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(x50, SubproofAST
	(x29, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x30, Impn1AST, (cl  ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((op_0 = (op_1 + 1)))), [], [])
(x32, ResoAST, (cl  ((op_0 = (op_1 + 1)))), [ x30 x29], [])
(x31, Impn2AST, (cl  ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x33, ResoAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ x31 x29], [])
(x34, AndnAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x35, ResoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x34 x32 x33], [])
(x43, DischargeAST, (cl  ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
	, (cl ), [], [])
(x47, ResoAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x43 x45], [])
(x46, Equn2AST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x49, SubproofAST
	(x36, AssumeAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x37, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [], [ 0])
(x38, ResoAST, (cl  ((op_0 = (op_1 + 1)))), [ x37 x36], [])
(x39, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [ 1])
(x40, ResoAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ x39 x36], [])
(x41, ImppAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(x42, ResoAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x41 x38 x40], [])
(x44, DischargeAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
	, (cl ), [], [])
(x48, ResoAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x44 x46], [])
(t2, ResoAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x47 x48], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(x1, ReflAST, (cl  ((op_0 = op_0))), [], [])
(x2, EqcpAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [], [])
(x4, Equn2AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((op_0 = (op_1 + 1))) ((op_0 = (1 + op_1)))), [], [])
(x6, ResoAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((op_0 = (1 + op_1))) (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x2 x4], [])
(x3, EqcpAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_0 = (1 + op_1)))) ((op_0 = (op_1 + 1)))), [], [])
(x5, Equn1AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (op_1 + 1)))) ((not (op_0 = (1 + op_1))))), [], [])
(x7, ResoAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_0 = (1 + op_1)))) (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x3 x5], [])
(t8, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x6 x7 x1 t7], [])
(x9, Equn1AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x10, Equn2AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x8, ResoAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x9 x10], [])
(x11, AndnAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x16, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x12, Equp1AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [], [])
(x13, ResoAST, (cl  ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [ x12 t8], [])
(x14, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [], [])
(x15, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [ x13 x14], [])
(x17, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x11 x16 x15], [])
(x18, Equn2AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x19, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x17 x18], [])
(x20, AndnAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (1 + op_1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x25, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x21, Equp2AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [], [])
(x22, ResoAST, (cl  ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [ x21 t8], [])
(x23, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [], [])
(x24, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [ x22 x23], [])
(x26, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x20 x25 x24], [])
(x27, Equn1AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(x28, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x26 x27], [])
(t9, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x19 x28], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after process_proj: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x45, Equn1AST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(x50, SubproofAST
	(x29, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x30, Impn1AST, (cl  ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((op_0 = (op_1 + 1)))), [], [])
(x32, ResoAST, (cl  ((op_0 = (op_1 + 1)))), [ x30 x29], [])
(x31, Impn2AST, (cl  ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x33, ResoAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ x31 x29], [])
(x34, AndnAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x35, ResoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x34 x32 x33], [])
(x43, DischargeAST, (cl  ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
	, (cl ), [], [])
(x47, ResoAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x43 x45], [])
(x46, Equn2AST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x49, SubproofAST
	(x36, AssumeAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x37, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [], [ 0])
(x38, ResoAST, (cl  ((op_0 = (op_1 + 1)))), [ x37 x36], [])
(x39, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [ 1])
(x40, ResoAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ x39 x36], [])
(x41, ImppAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(x42, ResoAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x41 x38 x40], [])
(x44, DischargeAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
	, (cl ), [], [])
(x48, ResoAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x44 x46], [])
(t2, ResoAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x47 x48], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(x1, ReflAST, (cl  ((op_0 = op_0))), [], [])
(x2, EqcpAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [], [])
(x4, Equn2AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((op_0 = (op_1 + 1))) ((op_0 = (1 + op_1)))), [], [])
(x6, ResoAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((op_0 = (1 + op_1))) (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x2 x4], [])
(x3, EqcpAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_0 = (1 + op_1)))) ((op_0 = (op_1 + 1)))), [], [])
(x5, Equn1AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (op_1 + 1)))) ((not (op_0 = (1 + op_1))))), [], [])
(x7, ResoAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_0 = (1 + op_1)))) (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x3 x5], [])
(t8, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x6 x7 x1 t7], [])
(x9, Equn1AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x10, Equn2AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x8, ResoAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x9 x10], [])
(x11, AndnAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x16, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [ 1])
(x12, Equp1AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [], [])
(x13, ResoAST, (cl  ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [ x12 t8], [])
(x14, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [], [ 0])
(x15, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [ x13 x14], [])
(x17, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x11 x16 x15], [])
(x18, Equn2AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x19, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x17 x18], [])
(x20, AndnAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (1 + op_1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x25, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [ 1])
(x21, Equp2AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [], [])
(x22, ResoAST, (cl  ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [ x21 t8], [])
(x23, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [], [ 0])
(x24, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [ x22 x23], [])
(x26, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x20 x25 x24], [])
(x27, Equn1AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(x28, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x26 x27], [])
(t9, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x19 x28], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [ 0])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [ 1])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after process_subproof: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x45, Equn1AST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(x43, AndnAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x47, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x43 x45], [])
(x46, Equn2AST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x44, AndnAST, (cl  ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x48, ResoAST, (cl  ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x44 x46], [])
(t2, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x47 x48], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(x1, ReflAST, (cl  ((op_0 = op_0))), [], [])
(x2, EqcpAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [], [])
(x4, Equn2AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((op_0 = (op_1 + 1))) ((op_0 = (1 + op_1)))), [], [])
(x6, ResoAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((op_0 = (1 + op_1))) (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x2 x4], [])
(x3, EqcpAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_0 = (1 + op_1)))) ((op_0 = (op_1 + 1)))), [], [])
(x5, Equn1AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (op_1 + 1)))) ((not (op_0 = (1 + op_1))))), [], [])
(x7, ResoAST, (cl  ((not (op_0 = op_0))) ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_0 = (1 + op_1)))) (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x3 x5], [])
(t8, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x6 x7 x1 t7], [])
(x9, Equn1AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x10, Equn2AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x8, ResoAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x9 x10], [])
(x11, AndnAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x16, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [ 1])
(x12, Equp1AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [], [])
(x13, ResoAST, (cl  ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [ x12 t8], [])
(x14, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [], [ 0])
(x15, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [ x13 x14], [])
(x17, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x11 x16 x15], [])
(x18, Equn2AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x19, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x17 x18], [])
(x20, AndnAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (1 + op_1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x25, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [ 1])
(x21, Equp2AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [], [])
(x22, ResoAST, (cl  ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [ x21 t8], [])
(x23, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [], [ 0])
(x24, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [ x22 x23], [])
(x26, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x20 x25 x24], [])
(x27, Equn1AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(x28, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x26 x27], [])
(t9, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x19 x28], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(x55, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [], [ 0])
(t12, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((op_0 = (1 + op_1)))), [ x55 t11], [])
(x56, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [ 1])
(t13, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (     = true
     : bool
not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ x56 t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))))), [ t22 t12 t21], [])
(x52, AndpAST, (cl  ((not (and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [ 0])
(x51, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t23 x52], [])
(x37, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [], [ 0])
(x38, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((op_0 = (op_1 + 1)))), [ x37 x51], [])
(x39, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [ 1])
(x40, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ x39 x51], [])
(x41, ImppAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(x42, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x41 x38 x40], [])
(x53, AndpAST, (cl  ((not (and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [ 1])
(x54, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ t23 x53], [])
(x57, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))))), [ x42 x54], [])
(x59, AndpAST, (cl  ((not (and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [ 0])
(x58, ResoAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x57 x59], [])
(x30, Impn1AST, (cl  ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((op_0 = (op_1 + 1)))), [], [])
(x32, ResoAST, (cl  ((op_0 = (op_1 + 1)))), [ x30 x58], [])
(x31, Impn2AST, (cl  ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x33, ResoAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ x31 x58], [])
(x34, AndnAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x35, ResoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x34 x32 x33], [])
(x60, AndpAST, (cl  ((not (and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [ 1])
(x61, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x57 x60], [])
(x62, ResoAST, (cl ), [ x35 x61], [])

