Certif before preprocessing: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t4, NotnotAST, (cl  ((not (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t4 t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(t8, CongAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ t7], [])
(t9, CongAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ t8], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after storing shared terms: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t4, NotnotAST, (cl  ((not (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t4 t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(t8, CongAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ t7], [])
(t9, CongAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ t8], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after process_fins: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t4, NotnotAST, (cl  ((not (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t4 t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(t8, CongAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ t7], [])
(t9, CongAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ t8], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after process_hole: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t4, NotnotAST, (cl  ((not (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t4 t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(t8, CongAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ t7], [])
(t9, CongAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ t8], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after process_notnot: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(t8, CongAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ t7], [])
(t9, CongAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ t8], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after process_same: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(t8, CongAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ t7], [])
(t9, CongAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ t8], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after process_cong: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(x4, Equp1AST, (cl  ((not ((op_1 + 1) = (1 + op_1)))) ((op_1 + 1)) ((not (1 + op_1)))), [], [])
(x5, ResoAST, (cl  ((op_1 + 1)) ((not (1 + op_1)))), [ t7 x4], [])
(x6, Equp1AST, (cl  ((not (op_0 = (op_1 + 1)))) (op_0) ((not (op_1 + 1)))), [], [])
(x7, Equn2AST, (cl  ((op_0 = (1 + op_1))) (op_0) ((1 + op_1))), [], [])
(x8, Equn2AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((op_0 = (op_1 + 1))) ((op_0 = (1 + op_1)))), [], [])
(x9, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((op_0 = (1 + op_1))) (op_0) (op_0)), [ x5 x6 x7 x8], [])
(x10, Equp2AST, (cl  ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_1 + 1))) ((1 + op_1))), [], [])
(x11, ResoAST, (cl  ((not (op_1 + 1))) ((1 + op_1))), [ t7 x10], [])
(x12, Equn2AST, (cl  ((op_0 = (op_1 + 1))) (op_0) ((op_1 + 1))), [], [])
(x13, Equp1AST, (cl  ((not (op_0 = (1 + op_1)))) (op_0) ((not (1 + op_1)))), [], [])
(x14, Equn1AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (op_1 + 1)))) ((not (op_0 = (1 + op_1))))), [], [])
(x15, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (1 + op_1)))) (op_0) (op_0)), [ x11 x12 x13 x14], [])
(x16, Equp1AST, (cl  ((not (op_0 = op_0))) (op_0) ((not op_0))), [], [])
(x17, ResoAST, (cl  (op_0) ((not op_0))), [ x1 x16], [])
(x18, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) (op_0)), [ x9 x15 x17], [])
(x19, Equp2AST, (cl  ((not (op_0 = op_0))) ((not op_0)) (op_0)), [], [])
(x20, ResoAST, (cl  ((not op_0)) (op_0)), [ x1 x19], [])
(x21, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) (op_0)), [ x18 x20], [])
(x22, Equn1AST, (cl  ((op_0 = (1 + op_1))) ((not op_0)) ((not (1 + op_1)))), [], [])
(x23, Equn1AST, (cl  ((op_0 = (op_1 + 1))) ((not op_0)) ((not (op_1 + 1)))), [], [])
(x24, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_1 + 1)))), [ x14 x22 x23 x11 x21 x18], [])
(x25, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (1 + op_1)))), [ x24 x5], [])
(x26, Equp2AST, (cl  ((not (op_0 = (op_1 + 1)))) ((not op_0)) ((op_1 + 1))), [], [])
(x27, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (op_1 + 1))))), [ x26 x24 x18], [])
(x28, Equp2AST, (cl  ((not (op_0 = (1 + op_1)))) ((not op_0)) ((1 + op_1))), [], [])
(x29, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (1 + op_1))))), [ x28 x25 x21], [])
(t8, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x8 x27 x29], [])
(x31, Equn1AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x32, Equn2AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x30, ResoAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x31 x32], [])
(x33, AndnAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x38, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x34, Equp1AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [], [])
(x35, ResoAST, (cl  ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [ x34 t8], [])
(x36, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [], [])
(x37, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [ x35 x36], [])
(x39, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x33 x38 x37], [])
(x40, Equn2AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x41, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x39 x40], [])
(x42, AndnAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (1 + op_1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x47, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x43, Equp2AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [], [])
(x44, ResoAST, (cl  ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [ x43 t8], [])
(x45, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [], [])
(x46, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [ x44 x45], [])
(x48, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x42 x47 x46], [])
(x49, Equn1AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(x50, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x48 x49], [])
(t9, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x41 x50], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after process_trans: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(x4, Equp1AST, (cl  ((not ((op_1 + 1) = (1 + op_1)))) ((op_1 + 1)) ((not (1 + op_1)))), [], [])
(x5, ResoAST, (cl  ((op_1 + 1)) ((not (1 + op_1)))), [ t7 x4], [])
(x6, Equp1AST, (cl  ((not (op_0 = (op_1 + 1)))) (op_0) ((not (op_1 + 1)))), [], [])
(x7, Equn2AST, (cl  ((op_0 = (1 + op_1))) (op_0) ((1 + op_1))), [], [])
(x8, Equn2AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((op_0 = (op_1 + 1))) ((op_0 = (1 + op_1)))), [], [])
(x9, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((op_0 = (1 + op_1))) (op_0) (op_0)), [ x5 x6 x7 x8], [])
(x10, Equp2AST, (cl  ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_1 + 1))) ((1 + op_1))), [], [])
(x11, ResoAST, (cl  ((not (op_1 + 1))) ((1 + op_1))), [ t7 x10], [])
(x12, Equn2AST, (cl  ((op_0 = (op_1 + 1))) (op_0) ((op_1 + 1))), [], [])
(x13, Equp1AST, (cl  ((not (op_0 = (1 + op_1)))) (op_0) ((not (1 + op_1)))), [], [])
(x14, Equn1AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (op_1 + 1)))) ((not (op_0 = (1 + op_1))))), [], [])
(x15, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (1 + op_1)))) (op_0) (op_0)), [ x11 x12 x13 x14], [])
(x16, Equp1AST, (cl  ((not (op_0 = op_0))) (op_0) ((not op_0))), [], [])
(x17, ResoAST, (cl  (op_0) ((not op_0))), [ x1 x16], [])
(x18, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) (op_0)), [ x9 x15 x17], [])
(x19, Equp2AST, (cl  ((not (op_0 = op_0))) ((not op_0)) (op_0)), [], [])
(x20, ResoAST, (cl  ((not op_0)) (op_0)), [ x1 x19], [])
(x21, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) (op_0)), [ x18 x20], [])
(x22, Equn1AST, (cl  ((op_0 = (1 + op_1))) ((not op_0)) ((not (1 + op_1)))), [], [])
(x23, Equn1AST, (cl  ((op_0 = (op_1 + 1))) ((not op_0)) ((not (op_1 + 1)))), [], [])
(x24, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_1 + 1)))), [ x14 x22 x23 x11 x21 x18], [])
(x25, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (1 + op_1)))), [ x24 x5], [])
(x26, Equp2AST, (cl  ((not (op_0 = (op_1 + 1)))) ((not op_0)) ((op_1 + 1))), [], [])
(x27, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (op_1 + 1))))), [ x26 x24 x18], [])
(x28, Equp2AST, (cl  ((not (op_0 = (1 + op_1)))) ((not op_0)) ((1 + op_1))), [], [])
(x29, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (1 + op_1))))), [ x28 x25 x21], [])
(t8, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x8 x27 x29], [])
(x31, Equn1AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x32, Equn2AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x30, ResoAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x31 x32], [])
(x33, AndnAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x38, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x34, Equp1AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [], [])
(x35, ResoAST, (cl  ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [ x34 t8], [])
(x36, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [], [])
(x37, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [ x35 x36], [])
(x39, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x33 x38 x37], [])
(x40, Equn2AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x41, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x39 x40], [])
(x42, AndnAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (1 + op_1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x47, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x43, Equp2AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [], [])
(x44, ResoAST, (cl  ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [ x43 t8], [])
(x45, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [], [])
(x46, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [ x44 x45], [])
(x48, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x42 x47 x46], [])
(x49, Equn1AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(x50, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x48 x49], [])
(t9, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x41 x50], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after process_simplify: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x67, Equn1AST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(x72, SubproofAST
	(x51, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x52, Impn1AST, (cl  ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((op_0 = (op_1 + 1)))), [], [])
(x54, ResoAST, (cl  ((op_0 = (op_1 + 1)))), [ x52 x51], [])
(x53, Impn2AST, (cl  ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x55, ResoAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ x53 x51], [])
(x56, AndnAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x57, ResoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x56 x54 x55], [])
(x65, DischargeAST, (cl  ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
	, (cl ), [], [])
(x69, ResoAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x65 x67], [])
(x68, Equn2AST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x71, SubproofAST
	(x58, AssumeAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x59, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [], [ 0])
(x60, ResoAST, (cl  ((op_0 = (op_1 + 1)))), [ x59 x58], [])
(x61, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [ 1])
(x62, ResoAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ x61 x58], [])
(x63, ImppAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(x64, ResoAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x63 x60 x62], [])
(x66, DischargeAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
	, (cl ), [], [])
(x70, ResoAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x66 x68], [])
(t2, ResoAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x69 x70], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(x4, Equp1AST, (cl  ((not ((op_1 + 1) = (1 + op_1)))) ((op_1 + 1)) ((not (1 + op_1)))), [], [])
(x5, ResoAST, (cl  ((op_1 + 1)) ((not (1 + op_1)))), [ t7 x4], [])
(x6, Equp1AST, (cl  ((not (op_0 = (op_1 + 1)))) (op_0) ((not (op_1 + 1)))), [], [])
(x7, Equn2AST, (cl  ((op_0 = (1 + op_1))) (op_0) ((1 + op_1))), [], [])
(x8, Equn2AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((op_0 = (op_1 + 1))) ((op_0 = (1 + op_1)))), [], [])
(x9, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((op_0 = (1 + op_1))) (op_0) (op_0)), [ x5 x6 x7 x8], [])
(x10, Equp2AST, (cl  ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_1 + 1))) ((1 + op_1))), [], [])
(x11, ResoAST, (cl  ((not (op_1 + 1))) ((1 + op_1))), [ t7 x10], [])
(x12, Equn2AST, (cl  ((op_0 = (op_1 + 1))) (op_0) ((op_1 + 1))), [], [])
(x13, Equp1AST, (cl  ((not (op_0 = (1 + op_1)))) (op_0) ((not (1 + op_1)))), [], [])
(x14, Equn1AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (op_1 + 1)))) ((not (op_0 = (1 + op_1))))), [], [])
(x15, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (1 + op_1)))) (op_0) (op_0)), [ x11 x12 x13 x14], [])
(x16, Equp1AST, (cl  ((not (op_0 = op_0))) (op_0) ((not op_0))), [], [])
(x17, ResoAST, (cl  (op_0) ((not op_0))), [ x1 x16], [])
(x18, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) (op_0)), [ x9 x15 x17], [])
(x19, Equp2AST, (cl  ((not (op_0 = op_0))) ((not op_0)) (op_0)), [], [])
(x20, ResoAST, (cl  ((not op_0)) (op_0)), [ x1 x19], [])
(x21, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) (op_0)), [ x18 x20], [])
(x22, Equn1AST, (cl  ((op_0 = (1 + op_1))) ((not op_0)) ((not (1 + op_1)))), [], [])
(x23, Equn1AST, (cl  ((op_0 = (op_1 + 1))) ((not op_0)) ((not (op_1 + 1)))), [], [])
(x24, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_1 + 1)))), [ x14 x22 x23 x11 x21 x18], [])
(x25, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (1 + op_1)))), [ x24 x5], [])
(x26, Equp2AST, (cl  ((not (op_0 = (op_1 + 1)))) ((not op_0)) ((op_1 + 1))), [], [])
(x27, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (op_1 + 1))))), [ x26 x24 x18], [])
(x28, Equp2AST, (cl  ((not (op_0 = (1 + op_1)))) ((not op_0)) ((1 + op_1))), [], [])
(x29, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (1 + op_1))))), [ x28 x25 x21], [])
(t8, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x8 x27 x29], [])
(x31, Equn1AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x32, Equn2AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x30, ResoAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x31 x32], [])
(x33, AndnAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x38, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x34, Equp1AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [], [])
(x35, ResoAST, (cl  ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [ x34 t8], [])
(x36, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [], [])
(x37, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [ x35 x36], [])
(x39, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x33 x38 x37], [])
(x40, Equn2AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x41, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x39 x40], [])
(x42, AndnAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (1 + op_1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x47, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x43, Equp2AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [], [])
(x44, ResoAST, (cl  ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [ x43 t8], [])
(x45, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [], [])
(x46, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [ x44 x45], [])
(x48, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x42 x47 x46], [])
(x49, Equn1AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(x50, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x48 x49], [])
(t9, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x41 x50], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after process_proj: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x67, Equn1AST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(x72, SubproofAST
	(x51, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x52, Impn1AST, (cl  ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((op_0 = (op_1 + 1)))), [], [])
(x54, ResoAST, (cl  ((op_0 = (op_1 + 1)))), [ x52 x51], [])
(x53, Impn2AST, (cl  ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x55, ResoAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ x53 x51], [])
(x56, AndnAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x57, ResoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x56 x54 x55], [])
(x65, DischargeAST, (cl  ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
	, (cl ), [], [])
(x69, ResoAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x65 x67], [])
(x68, Equn2AST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x71, SubproofAST
	(x58, AssumeAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x59, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [], [ 0])
(x60, ResoAST, (cl  ((op_0 = (op_1 + 1)))), [ x59 x58], [])
(x61, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [ 1])
(x62, ResoAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ x61 x58], [])
(x63, ImppAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(x64, ResoAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x63 x60 x62], [])
(x66, DischargeAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
	, (cl ), [], [])
(x70, ResoAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x66 x68], [])
(t2, ResoAST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x69 x70], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(x4, Equp1AST, (cl  ((not ((op_1 + 1) = (1 + op_1)))) ((op_1 + 1)) ((not (1 + op_1)))), [], [])
(x5, ResoAST, (cl  ((op_1 + 1)) ((not (1 + op_1)))), [ t7 x4], [])
(x6, Equp1AST, (cl  ((not (op_0 = (op_1 + 1)))) (op_0) ((not (op_1 + 1)))), [], [])
(x7, Equn2AST, (cl  ((op_0 = (1 + op_1))) (op_0) ((1 + op_1))), [], [])
(x8, Equn2AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((op_0 = (op_1 + 1))) ((op_0 = (1 + op_1)))), [], [])
(x9, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((op_0 = (1 + op_1))) (op_0) (op_0)), [ x5 x6 x7 x8], [])
(x10, Equp2AST, (cl  ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_1 + 1))) ((1 + op_1))), [], [])
(x11, ResoAST, (cl  ((not (op_1 + 1))) ((1 + op_1))), [ t7 x10], [])
(x12, Equn2AST, (cl  ((op_0 = (op_1 + 1))) (op_0) ((op_1 + 1))), [], [])
(x13, Equp1AST, (cl  ((not (op_0 = (1 + op_1)))) (op_0) ((not (1 + op_1)))), [], [])
(x14, Equn1AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (op_1 + 1)))) ((not (op_0 = (1 + op_1))))), [], [])
(x15, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (1 + op_1)))) (op_0) (op_0)), [ x11 x12 x13 x14], [])
(x16, Equp1AST, (cl  ((not (op_0 = op_0))) (op_0) ((not op_0))), [], [])
(x17, ResoAST, (cl  (op_0) ((not op_0))), [ x1 x16], [])
(x18, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) (op_0)), [ x9 x15 x17], [])
(x19, Equp2AST, (cl  ((not (op_0 = op_0))) ((not op_0)) (op_0)), [], [])
(x20, ResoAST, (cl  ((not op_0)) (op_0)), [ x1 x19], [])
(x21, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) (op_0)), [ x18 x20], [])
(x22, Equn1AST, (cl  ((op_0 = (1 + op_1))) ((not op_0)) ((not (1 + op_1)))), [], [])
(x23, Equn1AST, (cl  ((op_0 = (op_1 + 1))) ((not op_0)) ((not (op_1 + 1)))), [], [])
(x24, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_1 + 1)))), [ x14 x22 x23 x11 x21 x18], [])
(x25, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (1 + op_1)))), [ x24 x5], [])
(x26, Equp2AST, (cl  ((not (op_0 = (op_1 + 1)))) ((not op_0)) ((op_1 + 1))), [], [])
(x27, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (op_1 + 1))))), [ x26 x24 x18], [])
(x28, Equp2AST, (cl  ((not (op_0 = (1 + op_1)))) ((not op_0)) ((1 + op_1))), [], [])
(x29, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (1 + op_1))))), [ x28 x25 x21], [])
(t8, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x8 x27 x29], [])
(x31, Equn1AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x32, Equn2AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x30, ResoAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x31 x32], [])
(x33, AndnAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x38, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [ 1])
(x34, Equp1AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [], [])
(x35, ResoAST, (cl  ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [ x34 t8], [])
(x36, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [], [ 0])
(x37, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [ x35 x36], [])
(x39, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x33 x38 x37], [])
(x40, Equn2AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x41, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x39 x40], [])
(x42, AndnAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (1 + op_1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x47, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [ 1])
(x43, Equp2AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [], [])
(x44, ResoAST, (cl  ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [ x43 t8], [])
(x45, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [], [ 0])
(x46, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [ x44 x45], [])
(x48, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x42 x47 x46], [])
(x49, Equn1AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(x50, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x48 x49], [])
(t9, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x41 x50], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(t12, AndAST, (cl  ((op_0 = (1 + op_1)))), [ t11], [ 0])
(t13, AndAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ t11], [ 1])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl ), [ t22 t12 t21], [])

Certif after process_subproof: 
(h1, AssumeAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x67, Equn1AST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(x65, AndnAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x69, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x65 x67], [])
(x68, Equn2AST, (cl  (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x66, AndnAST, (cl  ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x70, ResoAST, (cl  ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x66 x68], [])
(t2, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) (((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x69 x70], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  (((op_1 + 1) = (1 + op_1)))), [], [])
(x4, Equp1AST, (cl  ((not ((op_1 + 1) = (1 + op_1)))) ((op_1 + 1)) ((not (1 + op_1)))), [], [])
(x5, ResoAST, (cl  ((op_1 + 1)) ((not (1 + op_1)))), [ t7 x4], [])
(x6, Equp1AST, (cl  ((not (op_0 = (op_1 + 1)))) (op_0) ((not (op_1 + 1)))), [], [])
(x7, Equn2AST, (cl  ((op_0 = (1 + op_1))) (op_0) ((1 + op_1))), [], [])
(x8, Equn2AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((op_0 = (op_1 + 1))) ((op_0 = (1 + op_1)))), [], [])
(x9, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((op_0 = (1 + op_1))) (op_0) (op_0)), [ x5 x6 x7 x8], [])
(x10, Equp2AST, (cl  ((not ((op_1 + 1) = (1 + op_1)))) ((not (op_1 + 1))) ((1 + op_1))), [], [])
(x11, ResoAST, (cl  ((not (op_1 + 1))) ((1 + op_1))), [ t7 x10], [])
(x12, Equn2AST, (cl  ((op_0 = (op_1 + 1))) (op_0) ((op_1 + 1))), [], [])
(x13, Equp1AST, (cl  ((not (op_0 = (1 + op_1)))) (op_0) ((not (1 + op_1)))), [], [])
(x14, Equn1AST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (op_1 + 1)))) ((not (op_0 = (1 + op_1))))), [], [])
(x15, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (1 + op_1)))) (op_0) (op_0)), [ x11 x12 x13 x14], [])
(x16, Equp1AST, (cl  ((not (op_0 = op_0))) (op_0) ((not op_0))), [], [])
(x17, ResoAST, (cl  (op_0) ((not op_0))), [ x1 x16], [])
(x18, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) (op_0)), [ x9 x15 x17], [])
(x19, Equp2AST, (cl  ((not (op_0 = op_0))) ((not op_0)) (op_0)), [], [])
(x20, ResoAST, (cl  ((not op_0)) (op_0)), [ x1 x19], [])
(x21, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) (op_0)), [ x18 x20], [])
(x22, Equn1AST, (cl  ((op_0 = (1 + op_1))) ((not op_0)) ((not (1 + op_1)))), [], [])
(x23, Equn1AST, (cl  ((op_0 = (op_1 + 1))) ((not op_0)) ((not (op_1 + 1)))), [], [])
(x24, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_1 + 1)))), [ x14 x22 x23 x11 x21 x18], [])
(x25, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (1 + op_1)))), [ x24 x5], [])
(x26, Equp2AST, (cl  ((not (op_0 = (op_1 + 1)))) ((not op_0)) ((op_1 + 1))), [], [])
(x27, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (op_1 + 1))))), [ x26 x24 x18], [])
(x28, Equp2AST, (cl  ((not (op_0 = (1 + op_1)))) ((not op_0)) ((1 + op_1))), [], [])
(x29, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1)))) ((not (op_0 = (1 + op_1))))), [ x28 x25 x21], [])
(t8, ResoAST, (cl  (((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))), [ x8 x27 x29], [])
(x31, Equn1AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x32, Equn2AST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x30, ResoAST, (cl  (((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))) = (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x31 x32], [])
(x33, AndnAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x38, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [ 1])
(x34, Equp1AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [], [])
(x35, ResoAST, (cl  ((op_0 = (op_1 + 1))) ((not (op_0 = (1 + op_1))))), [ x34 t8], [])
(x36, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [], [ 0])
(x37, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [ x35 x36], [])
(x39, ResoAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x33 x38 x37], [])
(x40, Equn2AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x41, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x39 x40], [])
(x42, AndnAST, (cl  ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (1 + op_1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x47, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [ 1])
(x43, Equp2AST, (cl  ((not ((op_0 = (op_1 + 1)) = (op_0 = (1 + op_1))))) ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [], [])
(x44, ResoAST, (cl  ((not (op_0 = (op_1 + 1)))) ((op_0 = (1 + op_1)))), [ x43 t8], [])
(x45, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [], [ 0])
(x46, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [ x44 x45], [])
(x48, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x42 x47 x46], [])
(x49, Equn1AST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [])
(x50, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x48 x49], [])
(t9, ResoAST, (cl  (((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x41 x50], [])
(t10, Equp2AST, (cl  ((not ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) = (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(t11, ThresoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t6 t9 t10], [])
(x77, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (1 + op_1)))), [], [])
(t12, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((op_0 = (1 + op_1)))), [ x77 t11], [])
(x78, AndpAST, (cl  ((not (and  (op_0 = (1 + op_1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(t13, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ x78 t11], [])
(t14, EqcoAST, (cl  ((not (op_1 = (op_0 - 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(t15, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (op_1 = (op_0 - 1))))), [ t14 t13], [])
(t16, LadeAST, (cl  ((or  (op_1 = (op_0 - 1)) (not (op_1 <= (op_0 - 1))) (not ((op_0 - 1) <= op_1))))), [], [])
(t17, OrAST, (cl  ((op_1 = (op_0 - 1))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t16], [])
(t18, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (op_1 <= (op_0 - 1)))) ((not ((op_0 - 1) <= op_1)))), [ t17 t15], [])
(t19, LageAST, (cl  (((op_0 - 1) <= op_1)) ((not (op_0 = (1 + op_1))))), [], [ 1 -1])
(t20, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) (((op_0 - 1) <= op_1))), [ t19 t12], [])
(t21, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (op_1 <= (op_0 - 1))))), [ t18 t20], [])
(t22, LageAST, (cl  ((op_1 <= (op_0 - 1))) ((not (op_0 = (1 + op_1))))), [], [ 1 1])
(t23, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))))), [ t22 t12 t21], [])
(x74, AndpAST, (cl  ((not (and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [ 0])
(x73, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ t23 x74], [])
(x59, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((op_0 = (op_1 + 1)))), [], [ 0])
(x60, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((op_0 = (op_1 + 1)))), [ x59 x73], [])
(x61, AndpAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [ 1])
(x62, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ x61 x73], [])
(x63, ImppAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) (((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))), [], [])
(x64, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x63 x60 x62], [])
(x75, AndpAST, (cl  ((not (and  (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [ 1])
(x76, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))) ((not (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ t23 x75], [])
(x79, ResoAST, (cl  ((and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))))), [ x64 x76], [])
(x81, AndpAST, (cl  ((not (and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))))) ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [ 0])
(x80, ResoAST, (cl  ((not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x79 x81], [])
(x52, Impn1AST, (cl  ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((op_0 = (op_1 + 1)))), [], [])
(x54, ResoAST, (cl  ((op_0 = (op_1 + 1)))), [ x52 x80], [])
(x53, Impn2AST, (cl  ((imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [], [])
(x55, ResoAST, (cl  ((not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))), [ x53 x80], [])
(x56, AndnAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))) ((not (op_0 = (op_1 + 1)))) ((not (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [], [])
(x57, ResoAST, (cl  ((and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))), [ x56 x54 x55], [])
(x82, AndpAST, (cl  ((not (and  (not (imp  (op_0 = (op_1 + 1)) ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))) (not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1)))))))))) ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [], [ 1])
(x83, ResoAST, (cl  ((not (and  (op_0 = (op_1 + 1)) (not ((op_2 ( op_1)) = (op_2 ( (op_0 - 1))))))))), [ x79 x82], [])
(x84, ResoAST, (cl ), [ x57 x83], [])

