Certif before preprocessing: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t4, NotnotAST, (cl  ((not (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t4 t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(t9, CongAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t7 t8], [])
(t10, CongAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ t7], [])
(t11, CongAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t9 t10], [])
(t12, CongAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ t8], [])
(t13, CongAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t12], [])
(t14, CongAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ t11 t13], [])
(t15, CongAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ t14], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t35, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [ t34], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t35 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t46, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3))))), [ t45], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t46 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t55, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [ t54], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t55 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t55 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t55 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t35 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after storing shared terms: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t4, NotnotAST, (cl  ((not (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t4 t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(t9, CongAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t7 t8], [])
(t10, CongAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ t7], [])
(t11, CongAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t9 t10], [])
(t12, CongAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ t8], [])
(t13, CongAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t12], [])
(t14, CongAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ t11 t13], [])
(t15, CongAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ t14], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t35, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [ t34], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t35 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t46, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3))))), [ t45], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t46 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t55, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [ t54], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t55 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t55 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t55 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t35 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after process_fins: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t4, NotnotAST, (cl  ((not (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t4 t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(t9, CongAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t7 t8], [])
(t10, CongAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ t7], [])
(t11, CongAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t9 t10], [])
(t12, CongAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ t8], [])
(t13, CongAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t12], [])
(t14, CongAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ t11 t13], [])
(t15, CongAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ t14], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t35, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [ t34], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t35 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t46, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3))))), [ t45], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t46 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t55, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [ t54], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t55 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t55 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t55 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t35 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after process_hole: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t4, NotnotAST, (cl  ((not (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t4 t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(t9, CongAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t7 t8], [])
(t10, CongAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ t7], [])
(t11, CongAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t9 t10], [])
(t12, CongAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ t8], [])
(t13, CongAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t12], [])
(t14, CongAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ t11 t13], [])
(t15, CongAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ t14], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t35, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [ t34], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t35 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t46, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3))))), [ t45], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t46 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t55, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [ t54], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t55 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t55 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t55 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t35 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after process_notnot: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(t9, CongAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t7 t8], [])
(t10, CongAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ t7], [])
(t11, CongAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t9 t10], [])
(t12, CongAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ t8], [])
(t13, CongAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t12], [])
(t14, CongAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ t11 t13], [])
(t15, CongAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ t14], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t35, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [ t34], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t35 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t46, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3))))), [ t45], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t46 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t55, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [ t54], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t55 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t55 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t55 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t35 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after process_same: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(t9, CongAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t7 t8], [])
(t10, CongAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ t7], [])
(t11, CongAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t9 t10], [])
(t12, CongAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ t8], [])
(t13, CongAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t12], [])
(t14, CongAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ t11 t13], [])
(t15, CongAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ t14], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t34 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t45 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t54 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t54 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t54 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t34 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after process_cong: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(x1, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x3, Equn2AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x5, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((1 + (2 * op_2)) = (1 + (2 * op_3)))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x1 x3], [])
(x2, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x4, Equn1AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x6, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x2 x4], [])
(t9, ResoAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x5 x6 t7 t8], [])
(x7, ReflAST, (cl  (((2 * op_3) = (2 * op_3)))), [], [])
(x8, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x10, Equn2AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x12, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) (((2 * op_3) = (1 + (2 * op_2)))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x8 x10], [])
(x9, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x11, Equn1AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x13, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x9 x11], [])
(t10, ResoAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x12 x13 x7 t7], [])
(x17, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x18, ResoAST, (cl  ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [ x17 t10], [])
(x19, Itep1AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) (op_1) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x20, Iten1AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x21, Equn2AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x22, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) (op_1)), [ x18 x19 x20 x21], [])
(x23, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x24, ResoAST, (cl  ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [ x23 t10], [])
(x25, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x26, ResoAST, (cl  (op_1) ((not op_1))), [ x25 x14], [])
(x27, Iten1AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) (op_1) ((not (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x28, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x29, Equn1AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x30, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x24 x27 x28 x29 x22 x26], [])
(x31, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x32, ResoAST, (cl  ((not op_1)) (op_1)), [ x31 x14], [])
(x33, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x32 x30], [])
(x34, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x35, ResoAST, (cl  ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x34 t9], [])
(x36, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x37, Iten2AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not op_1)) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1))))), [], [])
(x38, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x35 x36 x37 x21 x33 x30], [])
(x39, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x29 x38], [])
(x40, Itep2AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not op_1)) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x41, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [ x40 x38 x30], [])
(x42, Iten2AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) ((not op_1)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x43, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x42 x39 x33], [])
(x44, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x45, ResoAST, (cl  ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ x44 t9], [])
(t11, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x45 x41 x43], [])
(x46, ReflAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(x47, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x49, Equn2AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x51, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3)))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x47 x49], [])
(x48, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x50, Equn1AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x52, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x48 x50], [])
(t12, ResoAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x51 x52 x46 t8], [])
(x59, Equp2AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [], [])
(x60, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [ x59 x53], [])
(x61, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x62, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x63, Equn2AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x64, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) (op_1)), [ x60 x61 x62 x63], [])
(x65, Equp1AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x66, ResoAST, (cl  (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [ x65 x53], [])
(x67, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x68, ResoAST, (cl  (op_1) ((not op_1))), [ x67 x56], [])
(x69, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x70, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x71, Equn1AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x72, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x66 x69 x70 x71 x64 x68], [])
(x73, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x74, ResoAST, (cl  ((not op_1)) (op_1)), [ x73 x56], [])
(x75, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x74 x72], [])
(x76, Equp1AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x77, ResoAST, (cl  (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x76 t12], [])
(x78, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x79, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = ((2 * op_3) + 1))))), [], [])
(x80, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [ x77 x78 x79 x63 x75 x72], [])
(x81, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x71 x80], [])
(x82, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x83, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [ x82 x80 x72], [])
(x84, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x85, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x84 x81 x75], [])
(x86, Equp2AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x87, ResoAST, (cl  ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [ x86 t12], [])
(t13, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x87 x83 x85], [])
(x91, Equp2AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x92, ResoAST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ x91 t13], [])
(x93, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [], [])
(x94, Iten1AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x95, Equn2AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x96, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) (op_0)), [ x92 x93 x94 x95], [])
(x97, Equp1AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x98, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x97 t13], [])
(x99, Equp1AST, (cl  ((not (op_0 = op_0))) (op_0) ((not op_0))), [], [])
(x100, ResoAST, (cl  (op_0) ((not op_0))), [ x99 x88], [])
(x101, Iten1AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x102, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x103, Equn1AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x104, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x98 x101 x102 x103 x96 x100], [])
(x105, Equp2AST, (cl  ((not (op_0 = op_0))) ((not op_0)) (op_0)), [], [])
(x106, ResoAST, (cl  ((not op_0)) (op_0)), [ x105 x88], [])
(x107, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x106 x104], [])
(x108, Equp1AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x109, ResoAST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x108 t11], [])
(x110, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x111, Iten2AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))))), [], [])
(x112, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x109 x110 x111 x95 x107 x104], [])
(x113, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x103 x112], [])
(x114, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x115, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x114 x112 x104], [])
(x116, Iten2AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x117, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x116 x113 x107], [])
(x118, Equp2AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x119, ResoAST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ x118 t11], [])
(t14, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x119 x115 x117], [])
(x121, Equn1AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x122, Equn2AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x120, ResoAST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x121 x122], [])
(x123, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x128, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x124, Equp1AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x125, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x124 t14], [])
(x126, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x127, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x125 x126], [])
(x129, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x123 x128 x127], [])
(x130, Equn2AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x131, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x129 x130], [])
(x132, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x137, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x133, Equp2AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x134, ResoAST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x133 t14], [])
(x135, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x136, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x134 x135], [])
(x138, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x132 x137 x136], [])
(x139, Equn1AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(x140, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x138 x139], [])
(t15, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x131 x140], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t34 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t45 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t54 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t54 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t54 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t34 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after process_trans: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(x1, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x3, Equn2AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x5, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((1 + (2 * op_2)) = (1 + (2 * op_3)))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x1 x3], [])
(x2, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x4, Equn1AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x6, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x2 x4], [])
(t9, ResoAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x5 x6 t7 t8], [])
(x7, ReflAST, (cl  (((2 * op_3) = (2 * op_3)))), [], [])
(x8, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x10, Equn2AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x12, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) (((2 * op_3) = (1 + (2 * op_2)))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x8 x10], [])
(x9, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x11, Equn1AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x13, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x9 x11], [])
(t10, ResoAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x12 x13 x7 t7], [])
(x17, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x18, ResoAST, (cl  ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [ x17 t10], [])
(x19, Itep1AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) (op_1) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x20, Iten1AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x21, Equn2AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x22, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) (op_1)), [ x18 x19 x20 x21], [])
(x23, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x24, ResoAST, (cl  ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [ x23 t10], [])
(x25, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x26, ResoAST, (cl  (op_1) ((not op_1))), [ x25 x14], [])
(x27, Iten1AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) (op_1) ((not (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x28, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x29, Equn1AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x30, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x24 x27 x28 x29 x22 x26], [])
(x31, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x32, ResoAST, (cl  ((not op_1)) (op_1)), [ x31 x14], [])
(x33, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x32 x30], [])
(x34, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x35, ResoAST, (cl  ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x34 t9], [])
(x36, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x37, Iten2AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not op_1)) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1))))), [], [])
(x38, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x35 x36 x37 x21 x33 x30], [])
(x39, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x29 x38], [])
(x40, Itep2AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not op_1)) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x41, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [ x40 x38 x30], [])
(x42, Iten2AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) ((not op_1)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x43, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x42 x39 x33], [])
(x44, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x45, ResoAST, (cl  ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ x44 t9], [])
(t11, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x45 x41 x43], [])
(x46, ReflAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(x47, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x49, Equn2AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x51, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3)))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x47 x49], [])
(x48, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x50, Equn1AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x52, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x48 x50], [])
(t12, ResoAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x51 x52 x46 t8], [])
(x59, Equp2AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [], [])
(x60, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [ x59 x53], [])
(x61, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x62, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x63, Equn2AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x64, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) (op_1)), [ x60 x61 x62 x63], [])
(x65, Equp1AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x66, ResoAST, (cl  (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [ x65 x53], [])
(x67, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x68, ResoAST, (cl  (op_1) ((not op_1))), [ x67 x56], [])
(x69, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x70, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x71, Equn1AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x72, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x66 x69 x70 x71 x64 x68], [])
(x73, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x74, ResoAST, (cl  ((not op_1)) (op_1)), [ x73 x56], [])
(x75, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x74 x72], [])
(x76, Equp1AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x77, ResoAST, (cl  (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x76 t12], [])
(x78, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x79, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = ((2 * op_3) + 1))))), [], [])
(x80, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [ x77 x78 x79 x63 x75 x72], [])
(x81, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x71 x80], [])
(x82, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x83, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [ x82 x80 x72], [])
(x84, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x85, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x84 x81 x75], [])
(x86, Equp2AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x87, ResoAST, (cl  ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [ x86 t12], [])
(t13, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x87 x83 x85], [])
(x91, Equp2AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x92, ResoAST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ x91 t13], [])
(x93, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [], [])
(x94, Iten1AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x95, Equn2AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x96, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) (op_0)), [ x92 x93 x94 x95], [])
(x97, Equp1AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x98, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x97 t13], [])
(x99, Equp1AST, (cl  ((not (op_0 = op_0))) (op_0) ((not op_0))), [], [])
(x100, ResoAST, (cl  (op_0) ((not op_0))), [ x99 x88], [])
(x101, Iten1AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x102, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x103, Equn1AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x104, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x98 x101 x102 x103 x96 x100], [])
(x105, Equp2AST, (cl  ((not (op_0 = op_0))) ((not op_0)) (op_0)), [], [])
(x106, ResoAST, (cl  ((not op_0)) (op_0)), [ x105 x88], [])
(x107, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x106 x104], [])
(x108, Equp1AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x109, ResoAST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x108 t11], [])
(x110, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x111, Iten2AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))))), [], [])
(x112, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x109 x110 x111 x95 x107 x104], [])
(x113, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x103 x112], [])
(x114, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x115, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x114 x112 x104], [])
(x116, Iten2AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x117, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x116 x113 x107], [])
(x118, Equp2AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x119, ResoAST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ x118 t11], [])
(t14, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x119 x115 x117], [])
(x121, Equn1AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x122, Equn2AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x120, ResoAST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x121 x122], [])
(x123, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x128, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x124, Equp1AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x125, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x124 t14], [])
(x126, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x127, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x125 x126], [])
(x129, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x123 x128 x127], [])
(x130, Equn2AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x131, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x129 x130], [])
(x132, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x137, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x133, Equp2AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x134, ResoAST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x133 t14], [])
(x135, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x136, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x134 x135], [])
(x138, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x132 x137 x136], [])
(x139, Equn1AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(x140, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x138 x139], [])
(t15, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x131 x140], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t34 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t45 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t54 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t54 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t54 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t34 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after process_simplify: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x157, Equn1AST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(x162, SubproofAST
	(x141, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x142, Impn1AST, (cl  ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x144, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x142 x141], [])
(x143, Impn2AST, (cl  ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x145, ResoAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ x143 x141], [])
(x146, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x147, ResoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x146 x144 x145], [])
(x155, DischargeAST, (cl  ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
	, (cl ), [], [])
(x159, ResoAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x155 x157], [])
(x158, Equn2AST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x161, SubproofAST
	(x148, AssumeAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x149, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(x150, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x149 x148], [])
(x151, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(x152, ResoAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ x151 x148], [])
(x153, ImppAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))), [], [])
(x154, ResoAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x153 x150 x152], [])
(x156, DischargeAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
	, (cl ), [], [])
(x160, ResoAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x156 x158], [])
(t2, ResoAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x159 x160], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(x1, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x3, Equn2AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x5, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((1 + (2 * op_2)) = (1 + (2 * op_3)))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x1 x3], [])
(x2, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x4, Equn1AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x6, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x2 x4], [])
(t9, ResoAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x5 x6 t7 t8], [])
(x7, ReflAST, (cl  (((2 * op_3) = (2 * op_3)))), [], [])
(x8, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x10, Equn2AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x12, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) (((2 * op_3) = (1 + (2 * op_2)))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x8 x10], [])
(x9, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x11, Equn1AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x13, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x9 x11], [])
(t10, ResoAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x12 x13 x7 t7], [])
(x17, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x18, ResoAST, (cl  ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [ x17 t10], [])
(x19, Itep1AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) (op_1) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x20, Iten1AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x21, Equn2AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x22, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) (op_1)), [ x18 x19 x20 x21], [])
(x23, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x24, ResoAST, (cl  ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [ x23 t10], [])
(x25, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x26, ResoAST, (cl  (op_1) ((not op_1))), [ x25 x14], [])
(x27, Iten1AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) (op_1) ((not (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x28, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x29, Equn1AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x30, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x24 x27 x28 x29 x22 x26], [])
(x31, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x32, ResoAST, (cl  ((not op_1)) (op_1)), [ x31 x14], [])
(x33, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x32 x30], [])
(x34, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x35, ResoAST, (cl  ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x34 t9], [])
(x36, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x37, Iten2AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not op_1)) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1))))), [], [])
(x38, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x35 x36 x37 x21 x33 x30], [])
(x39, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x29 x38], [])
(x40, Itep2AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not op_1)) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x41, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [ x40 x38 x30], [])
(x42, Iten2AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) ((not op_1)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x43, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x42 x39 x33], [])
(x44, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x45, ResoAST, (cl  ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ x44 t9], [])
(t11, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x45 x41 x43], [])
(x46, ReflAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(x47, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x49, Equn2AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x51, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3)))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x47 x49], [])
(x48, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x50, Equn1AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x52, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x48 x50], [])
(t12, ResoAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x51 x52 x46 t8], [])
(x59, Equp2AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [], [])
(x60, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [ x59 x53], [])
(x61, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x62, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x63, Equn2AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x64, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) (op_1)), [ x60 x61 x62 x63], [])
(x65, Equp1AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x66, ResoAST, (cl  (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [ x65 x53], [])
(x67, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x68, ResoAST, (cl  (op_1) ((not op_1))), [ x67 x56], [])
(x69, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x70, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x71, Equn1AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x72, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x66 x69 x70 x71 x64 x68], [])
(x73, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x74, ResoAST, (cl  ((not op_1)) (op_1)), [ x73 x56], [])
(x75, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x74 x72], [])
(x76, Equp1AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x77, ResoAST, (cl  (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x76 t12], [])
(x78, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x79, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = ((2 * op_3) + 1))))), [], [])
(x80, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [ x77 x78 x79 x63 x75 x72], [])
(x81, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x71 x80], [])
(x82, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x83, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [ x82 x80 x72], [])
(x84, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x85, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x84 x81 x75], [])
(x86, Equp2AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x87, ResoAST, (cl  ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [ x86 t12], [])
(t13, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x87 x83 x85], [])
(x91, Equp2AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x92, ResoAST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ x91 t13], [])
(x93, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [], [])
(x94, Iten1AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x95, Equn2AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x96, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) (op_0)), [ x92 x93 x94 x95], [])
(x97, Equp1AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x98, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x97 t13], [])
(x99, Equp1AST, (cl  ((not (op_0 = op_0))) (op_0) ((not op_0))), [], [])
(x100, ResoAST, (cl  (op_0) ((not op_0))), [ x99 x88], [])
(x101, Iten1AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x102, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x103, Equn1AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x104, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x98 x101 x102 x103 x96 x100], [])
(x105, Equp2AST, (cl  ((not (op_0 = op_0))) ((not op_0)) (op_0)), [], [])
(x106, ResoAST, (cl  ((not op_0)) (op_0)), [ x105 x88], [])
(x107, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x106 x104], [])
(x108, Equp1AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x109, ResoAST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x108 t11], [])
(x110, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x111, Iten2AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))))), [], [])
(x112, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x109 x110 x111 x95 x107 x104], [])
(x113, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x103 x112], [])
(x114, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x115, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x114 x112 x104], [])
(x116, Iten2AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x117, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x116 x113 x107], [])
(x118, Equp2AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x119, ResoAST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ x118 t11], [])
(t14, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x119 x115 x117], [])
(x121, Equn1AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x122, Equn2AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x120, ResoAST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x121 x122], [])
(x123, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x128, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x124, Equp1AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x125, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x124 t14], [])
(x126, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x127, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x125 x126], [])
(x129, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x123 x128 x127], [])
(x130, Equn2AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x131, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x129 x130], [])
(x132, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x137, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x133, Equp2AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x134, ResoAST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x133 t14], [])
(x135, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x136, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x134 x135], [])
(x138, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x132 x137 x136], [])
(x139, Equn1AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(x140, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x138 x139], [])
(t15, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x131 x140], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t34 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t45 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t54 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t54 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t54 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t34 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after process_proj: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x157, Equn1AST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(x162, SubproofAST
	(x141, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x142, Impn1AST, (cl  ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x144, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x142 x141], [])
(x143, Impn2AST, (cl  ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x145, ResoAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ x143 x141], [])
(x146, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x147, ResoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x146 x144 x145], [])
(x155, DischargeAST, (cl  ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
	, (cl ), [], [])
(x159, ResoAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x155 x157], [])
(x158, Equn2AST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x161, SubproofAST
	(x148, AssumeAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x149, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(x150, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x149 x148], [])
(x151, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(x152, ResoAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ x151 x148], [])
(x153, ImppAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))), [], [])
(x154, ResoAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x153 x150 x152], [])
(x156, DischargeAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
	, (cl ), [], [])
(x160, ResoAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x156 x158], [])
(t2, ResoAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x159 x160], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(x1, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x3, Equn2AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x5, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((1 + (2 * op_2)) = (1 + (2 * op_3)))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x1 x3], [])
(x2, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x4, Equn1AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x6, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x2 x4], [])
(t9, ResoAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x5 x6 t7 t8], [])
(x7, ReflAST, (cl  (((2 * op_3) = (2 * op_3)))), [], [])
(x8, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x10, Equn2AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x12, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) (((2 * op_3) = (1 + (2 * op_2)))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x8 x10], [])
(x9, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x11, Equn1AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x13, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x9 x11], [])
(t10, ResoAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x12 x13 x7 t7], [])
(x17, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x18, ResoAST, (cl  ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [ x17 t10], [])
(x19, Itep1AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) (op_1) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x20, Iten1AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x21, Equn2AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x22, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) (op_1)), [ x18 x19 x20 x21], [])
(x23, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x24, ResoAST, (cl  ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [ x23 t10], [])
(x25, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x26, ResoAST, (cl  (op_1) ((not op_1))), [ x25 x14], [])
(x27, Iten1AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) (op_1) ((not (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x28, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x29, Equn1AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x30, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x24 x27 x28 x29 x22 x26], [])
(x31, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x32, ResoAST, (cl  ((not op_1)) (op_1)), [ x31 x14], [])
(x33, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x32 x30], [])
(x34, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x35, ResoAST, (cl  ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x34 t9], [])
(x36, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x37, Iten2AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not op_1)) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1))))), [], [])
(x38, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x35 x36 x37 x21 x33 x30], [])
(x39, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x29 x38], [])
(x40, Itep2AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not op_1)) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x41, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [ x40 x38 x30], [])
(x42, Iten2AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) ((not op_1)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x43, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x42 x39 x33], [])
(x44, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x45, ResoAST, (cl  ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ x44 t9], [])
(t11, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x45 x41 x43], [])
(x46, ReflAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(x47, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x49, Equn2AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x51, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3)))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x47 x49], [])
(x48, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x50, Equn1AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x52, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x48 x50], [])
(t12, ResoAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x51 x52 x46 t8], [])
(x59, Equp2AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [], [])
(x60, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [ x59 x53], [])
(x61, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x62, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x63, Equn2AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x64, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) (op_1)), [ x60 x61 x62 x63], [])
(x65, Equp1AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x66, ResoAST, (cl  (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [ x65 x53], [])
(x67, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x68, ResoAST, (cl  (op_1) ((not op_1))), [ x67 x56], [])
(x69, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x70, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x71, Equn1AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x72, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x66 x69 x70 x71 x64 x68], [])
(x73, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x74, ResoAST, (cl  ((not op_1)) (op_1)), [ x73 x56], [])
(x75, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x74 x72], [])
(x76, Equp1AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x77, ResoAST, (cl  (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x76 t12], [])
(x78, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x79, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = ((2 * op_3) + 1))))), [], [])
(x80, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [ x77 x78 x79 x63 x75 x72], [])
(x81, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x71 x80], [])
(x82, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x83, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [ x82 x80 x72], [])
(x84, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x85, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x84 x81 x75], [])
(x86, Equp2AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x87, ResoAST, (cl  ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [ x86 t12], [])
(t13, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x87 x83 x85], [])
(x91, Equp2AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x92, ResoAST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ x91 t13], [])
(x93, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [], [])
(x94, Iten1AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x95, Equn2AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x96, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) (op_0)), [ x92 x93 x94 x95], [])
(x97, Equp1AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x98, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x97 t13], [])
(x99, Equp1AST, (cl  ((not (op_0 = op_0))) (op_0) ((not op_0))), [], [])
(x100, ResoAST, (cl  (op_0) ((not op_0))), [ x99 x88], [])
(x101, Iten1AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x102, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x103, Equn1AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x104, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x98 x101 x102 x103 x96 x100], [])
(x105, Equp2AST, (cl  ((not (op_0 = op_0))) ((not op_0)) (op_0)), [], [])
(x106, ResoAST, (cl  ((not op_0)) (op_0)), [ x105 x88], [])
(x107, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x106 x104], [])
(x108, Equp1AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x109, ResoAST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x108 t11], [])
(x110, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x111, Iten2AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))))), [], [])
(x112, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x109 x110 x111 x95 x107 x104], [])
(x113, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x103 x112], [])
(x114, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x115, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x114 x112 x104], [])
(x116, Iten2AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x117, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x116 x113 x107], [])
(x118, Equp2AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x119, ResoAST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ x118 t11], [])
(t14, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x119 x115 x117], [])
(x121, Equn1AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x122, Equn2AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x120, ResoAST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x121 x122], [])
(x123, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x128, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(x124, Equp1AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x125, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x124 t14], [])
(x126, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(x127, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x125 x126], [])
(x129, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x123 x128 x127], [])
(x130, Equn2AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x131, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x129 x130], [])
(x132, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x137, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(x133, Equp2AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x134, ResoAST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x133 t14], [])
(x135, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(x136, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x134 x135], [])
(x138, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x132 x137 x136], [])
(x139, Equn1AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(x140, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x138 x139], [])
(t15, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x131 x140], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [ 0])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [ 1])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t34 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t45 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t54 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t54 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t54 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t34 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after process_subproof: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x157, Equn1AST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(x155, AndnAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x159, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x155 x157], [])
(x158, Equn2AST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x156, AndnAST, (cl  ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x160, ResoAST, (cl  ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x156 x158], [])
(t2, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x159 x160], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(x1, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x3, Equn2AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x5, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((1 + (2 * op_2)) = (1 + (2 * op_3)))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x1 x3], [])
(x2, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x4, Equn1AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x6, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x2 x4], [])
(t9, ResoAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x5 x6 t7 t8], [])
(x7, ReflAST, (cl  (((2 * op_3) = (2 * op_3)))), [], [])
(x8, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x10, Equn2AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x12, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) (((2 * op_3) = (1 + (2 * op_2)))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x8 x10], [])
(x9, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x11, Equn1AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x13, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x9 x11], [])
(t10, ResoAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x12 x13 x7 t7], [])
(x17, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x18, ResoAST, (cl  ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [ x17 t10], [])
(x19, Itep1AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) (op_1) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x20, Iten1AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x21, Equn2AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x22, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) (op_1)), [ x18 x19 x20 x21], [])
(x23, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x24, ResoAST, (cl  ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [ x23 t10], [])
(x25, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x26, ResoAST, (cl  (op_1) ((not op_1))), [ x25 x14], [])
(x27, Iten1AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) (op_1) ((not (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x28, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x29, Equn1AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x30, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x24 x27 x28 x29 x22 x26], [])
(x31, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x32, ResoAST, (cl  ((not op_1)) (op_1)), [ x31 x14], [])
(x33, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x32 x30], [])
(x34, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x35, ResoAST, (cl  ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x34 t9], [])
(x36, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x37, Iten2AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not op_1)) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1))))), [], [])
(x38, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x35 x36 x37 x21 x33 x30], [])
(x39, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x29 x38], [])
(x40, Itep2AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not op_1)) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x41, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [ x40 x38 x30], [])
(x42, Iten2AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) ((not op_1)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x43, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x42 x39 x33], [])
(x44, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x45, ResoAST, (cl  ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ x44 t9], [])
(t11, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x45 x41 x43], [])
(x46, ReflAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(x47, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x49, Equn2AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x51, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3)))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x47 x49], [])
(x48, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x50, Equn1AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x52, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x48 x50], [])
(t12, ResoAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x51 x52 x46 t8], [])
(x59, Equp2AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [], [])
(x60, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [ x59 x53], [])
(x61, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x62, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x63, Equn2AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x64, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) (op_1)), [ x60 x61 x62 x63], [])
(x65, Equp1AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x66, ResoAST, (cl  (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [ x65 x53], [])
(x67, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x68, ResoAST, (cl  (op_1) ((not op_1))), [ x67 x56], [])
(x69, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x70, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x71, Equn1AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x72, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x66 x69 x70 x71 x64 x68], [])
(x73, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x74, ResoAST, (cl  ((not op_1)) (op_1)), [ x73 x56], [])
(x75, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x74 x72], [])
(x76, Equp1AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x77, ResoAST, (cl  (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x76 t12], [])
(x78, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x79, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = ((2 * op_3) + 1))))), [], [])
(x80, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [ x77 x78 x79 x63 x75 x72], [])
(x81, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x71 x80], [])
(x82, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x83, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [ x82 x80 x72], [])
(x84, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x85, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x84 x81 x75], [])
(x86, Equp2AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x87, ResoAST, (cl  ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [ x86 t12], [])
(t13, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x87 x83 x85], [])
(x91, Equp2AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x92, ResoAST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ x91 t13], [])
(x93, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [], [])
(x94, Iten1AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x95, Equn2AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x96, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) (op_0)), [ x92 x93 x94 x95], [])
(x97, Equp1AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x98, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x97 t13], [])
(x99, Equp1AST, (cl  ((not (op_0 = op_0))) (op_0) ((not op_0))), [], [])
(x100, ResoAST, (cl  (op_0) ((not op_0))), [ x99 x88], [])
(x101, Iten1AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x102, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x103, Equn1AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x104, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x98 x101 x102 x103 x96 x100], [])
(x105, Equp2AST, (cl  ((not (op_0 = op_0))) ((not op_0)) (op_0)), [], [])
(x106, ResoAST, (cl  ((not op_0)) (op_0)), [ x105 x88], [])
(x107, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x106 x104], [])
(x108, Equp1AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x109, ResoAST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x108 t11], [])
(x110, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x111, Iten2AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))))), [], [])
(x112, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x109 x110 x111 x95 x107 x104], [])
(x113, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x103 x112], [])
(x114, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x115, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x114 x112 x104], [])
(x116, Iten2AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x117, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x116 x113 x107], [])
(x118, Equp2AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x119, ResoAST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ x118 t11], [])
(t14, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x119 x115 x117], [])
(x121, Equn1AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x122, Equn2AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x120, ResoAST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x121 x122], [])
(x123, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x128, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(x124, Equp1AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x125, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x124 t14], [])
(x126, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(x127, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x125 x126], [])
(x129, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x123 x128 x127], [])
(x130, Equn2AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x131, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x129 x130], [])
(x132, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x137, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(x133, Equp2AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x134, ResoAST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x133 t14], [])
(x135, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(x136, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x134 x135], [])
(x138, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x132 x137 x136], [])
(x139, Equn1AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(x140, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x138 x139], [])
(t15, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x131 x140], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(x167, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(t18, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x167 t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x168, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(t22, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (op_0) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ x168 t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x169, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(t25, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ x169 t18], [])
(x170, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(t26, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ x170 t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(x171, AndnAST, (cl  ((and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [], [])
(t31, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ x171 t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t34 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t47, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t45 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t56, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (op_1) ((op_2 <= op_3))), [ t54 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t54 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t54 t39], [])
(t68, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not ((2 * op_2) = (2 * op_3))))), [ t34 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))))), [ t80 t79 t73], [])
(x164, AndpAST, (cl  ((not (and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [ 0])
(x163, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t81 x164], [])
(x149, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(x150, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x149 x163], [])
(x151, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(x152, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ x151 x163], [])
(x153, ImppAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))), [], [])
(x154, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x153 x150 x152], [])
(x165, AndpAST, (cl  ((not (and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [ 1])
(x166, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ t81 x165], [])
(x172, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))))), [ x154 x166], [])
(x174, AndpAST, (cl  ((not (and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [ 0])
(x173, ResoAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x172 x174], [])
(x142, Impn1AST, (cl  ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x144, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x142 x173], [])
(x143, Impn2AST, (cl  ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x145, ResoAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ x143 x173], [])
(x146, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x147, ResoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x146 x144 x145], [])
(x175, AndpAST, (cl  ((not (and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [ 1])
(x176, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x172 x175], [])
(x177, ResoAST, (cl ), [ x147 x176], [])

File "./test7verit.v", line 23, characters 5-256:
Error:
Verit.import_trace: processing certificate
Error: VeritSyntax.Debug
Message: | VeritSyntax.mk_clause: failing at id x26 || get_clause: clause number x14 not found |
Position: Line 82 Position 1

(t9, CongAST, (cl  (((((2 * x) + 1) = ((2 * y) + 1)) = 
										 ((1 + (2 * x)) = (1 + (2 * y)))))), [ t7 t8], [])
(t10, CongAST, (cl  (((((2 * x) + 1) = (2 * y)) = 
											((2 * y) = (1 + (2 * x)))))), [ t7], [])
(t11, CongAST, (cl  (((ite  c 
														(((2 * x) + 1) = ((2 * y) + 1)) 
														(((2 * x) + 1) = (2 * y))) = 
											(ite  c 
														((1 + (2 * x)) = (1 + (2 * y))) 
														((2 * y) = (1 + (2 * x))))))), [ t9 t10], [])

-----			-----------------------------			-------------------------
c = c			(2x+1 = 2y+1) = (1+2x = 1+2y)			(2x+1 = 2y) = (2y = 1+2x)
---------------------------------------------------------------------cong
ite c (2x+1 = 2y+1) (2x+1 = 2y)		=		ite c (1+2x = 1+2y) (2y = 1+2x)														