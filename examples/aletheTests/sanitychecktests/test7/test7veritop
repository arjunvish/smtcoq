Certif before preprocessing: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t4, NotnotAST, (cl  ((not (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t4 t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(t9, CongAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t7 t8], [])
(t10, CongAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ t7], [])
(t11, CongAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t9 t10], [])
(t12, CongAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ t8], [])
(t13, CongAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t12], [])
(t14, CongAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ t11 t13], [])
(t15, CongAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ t14], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t35, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [ t34], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t35 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t46, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3))))), [ t45], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t46 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t55, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [ t54], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t55 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t55 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t55 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t35 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after storing shared terms: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t4, NotnotAST, (cl  ((not (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t4 t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(t9, CongAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t7 t8], [])
(t10, CongAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ t7], [])
(t11, CongAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t9 t10], [])
(t12, CongAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ t8], [])
(t13, CongAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t12], [])
(t14, CongAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ t11 t13], [])
(t15, CongAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ t14], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t35, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [ t34], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t35 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t46, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3))))), [ t45], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t46 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t55, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [ t54], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t55 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t55 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t55 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t35 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after process_fins: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t4, NotnotAST, (cl  ((not (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t4 t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(t9, CongAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t7 t8], [])
(t10, CongAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ t7], [])
(t11, CongAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t9 t10], [])
(t12, CongAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ t8], [])
(t13, CongAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t12], [])
(t14, CongAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ t11 t13], [])
(t15, CongAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ t14], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t35, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [ t34], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t35 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t46, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3))))), [ t45], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t46 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t55, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [ t54], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t55 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t55 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t55 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t35 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after process_hole: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t4, NotnotAST, (cl  ((not (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t4 t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(t9, CongAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t7 t8], [])
(t10, CongAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ t7], [])
(t11, CongAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t9 t10], [])
(t12, CongAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ t8], [])
(t13, CongAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t12], [])
(t14, CongAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ t11 t13], [])
(t15, CongAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ t14], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t35, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [ t34], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t35 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t46, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3))))), [ t45], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t46 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t55, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [ t54], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t55 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t55 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t55 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t35 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after process_notnot: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(t9, CongAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t7 t8], [])
(t10, CongAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ t7], [])
(t11, CongAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t9 t10], [])
(t12, CongAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ t8], [])
(t13, CongAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t12], [])
(t14, CongAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ t11 t13], [])
(t15, CongAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ t14], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t35, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [ t34], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t35 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t46, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3))))), [ t45], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t46 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t55, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [ t54], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t55 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t55 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t55 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t35 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after process_same: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(t9, CongAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t7 t8], [])
(t10, CongAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ t7], [])
(t11, CongAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t9 t10], [])
(t12, CongAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ t8], [])
(t13, CongAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t12], [])
(t14, CongAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ t11 t13], [])
(t15, CongAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ t14], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t34 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t45 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t54 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t54 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t54 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t34 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after process_cong: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(x1, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x3, Equn2AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x5, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ x1 x3], [])
(x2, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x4, Equn1AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x6, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x2 x4], [])
(t9, ResoAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x5 x6 t7 t8], [])
(x8, Equn1AST, (cl  (((2 * op_3) = (2 * op_3))) ((2 * op_3))), [], [])
(x9, Equn2AST, (cl  (((2 * op_3) = (2 * op_3))) ((not (2 * op_3)))), [], [])
(x7, ResoAST, (cl  (((2 * op_3) = (2 * op_3)))), [ x8 x9], [])
(x10, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x12, Equn2AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x14, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_3) = (1 + (2 * op_2))))), [ x10 x12], [])
(x11, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x13, Equn1AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x15, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [ x11 x13], [])
(t10, ResoAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x14 x15 x7 t7], [])
(x19, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x20, ResoAST, (cl  ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [ x19 t10], [])
(x21, Itep1AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) (op_1) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x22, Iten1AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x23, Equn2AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x24, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) (op_1)), [ x20 x21 x22 x23], [])
(x25, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x26, ResoAST, (cl  ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [ x25 t10], [])
(x27, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x28, ResoAST, (cl  (op_1) ((not op_1))), [ x27 x16], [])
(x29, Iten1AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) (op_1) ((not (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x30, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x31, Equn1AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x32, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x26 x29 x30 x31 x24 x28], [])
(x33, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x34, ResoAST, (cl  ((not op_1)) (op_1)), [ x33 x16], [])
(x35, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x34 x32], [])
(x36, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x37, ResoAST, (cl  ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x36 t9], [])
(x38, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x39, Iten2AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not op_1)) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1))))), [], [])
(x40, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x37 x38 x39 x23 x35 x32], [])
(x41, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x31 x40], [])
(x42, Itep2AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not op_1)) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x43, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [ x42 x40 x32], [])
(x44, Iten2AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) ((not op_1)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x45, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x44 x41 x35], [])
(x46, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x47, ResoAST, (cl  ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ x46 t9], [])
(t11, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x47 x43 x45], [])
(x49, Equn1AST, (cl  (((2 * op_2) = (2 * op_2))) ((2 * op_2))), [], [])
(x50, Equn2AST, (cl  (((2 * op_2) = (2 * op_2))) ((not (2 * op_2)))), [], [])
(x48, ResoAST, (cl  (((2 * op_2) = (2 * op_2)))), [ x49 x50], [])
(x51, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x53, Equn2AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x55, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [ x51 x53], [])
(x52, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x54, Equn1AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x56, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x52 x54], [])
(t12, ResoAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x55 x56 x48 t8], [])
(x63, Equp2AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [], [])
(x64, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [ x63 x57], [])
(x65, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x66, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x67, Equn2AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x68, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) (op_1)), [ x64 x65 x66 x67], [])
(x69, Equp1AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x70, ResoAST, (cl  (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [ x69 x57], [])
(x71, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x72, ResoAST, (cl  (op_1) ((not op_1))), [ x71 x60], [])
(x73, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x74, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x75, Equn1AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x76, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x70 x73 x74 x75 x68 x72], [])
(x77, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x78, ResoAST, (cl  ((not op_1)) (op_1)), [ x77 x60], [])
(x79, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x78 x76], [])
(x80, Equp1AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x81, ResoAST, (cl  (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x80 t12], [])
(x82, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x83, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = ((2 * op_3) + 1))))), [], [])
(x84, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [ x81 x82 x83 x67 x79 x76], [])
(x85, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x75 x84], [])
(x86, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x87, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [ x86 x84 x76], [])
(x88, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x89, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x88 x85 x79], [])
(x90, Equp2AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x91, ResoAST, (cl  ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [ x90 t12], [])
(t13, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x91 x87 x89], [])
(x95, Equp2AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x96, ResoAST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ x95 t13], [])
(x97, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [], [])
(x98, Iten1AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x99, Equn2AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x100, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) (op_0)), [ x96 x97 x98 x99], [])
(x101, Equp1AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x102, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x101 t13], [])
(x103, Equp1AST, (cl  ((not (op_0 = op_0))) (op_0) ((not op_0))), [], [])
(x104, ResoAST, (cl  (op_0) ((not op_0))), [ x103 x92], [])
(x105, Iten1AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x106, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x107, Equn1AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x108, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x102 x105 x106 x107 x100 x104], [])
(x109, Equp2AST, (cl  ((not (op_0 = op_0))) ((not op_0)) (op_0)), [], [])
(x110, ResoAST, (cl  ((not op_0)) (op_0)), [ x109 x92], [])
(x111, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x110 x108], [])
(x112, Equp1AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x113, ResoAST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x112 t11], [])
(x114, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x115, Iten2AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))))), [], [])
(x116, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x113 x114 x115 x99 x111 x108], [])
(x117, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x107 x116], [])
(x118, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x119, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x118 x116 x108], [])
(x120, Iten2AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x121, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x120 x117 x111], [])
(x122, Equp2AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x123, ResoAST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ x122 t11], [])
(t14, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x123 x119 x121], [])
(x125, Equn1AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x126, Equn2AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x124, ResoAST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x125 x126], [])
(x127, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x132, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x128, Equp1AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x129, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x128 t14], [])
(x130, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x131, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x129 x130], [])
(x133, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x127 x132 x131], [])
(x134, Equn2AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x135, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x133 x134], [])
(x136, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x141, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x137, Equp2AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x138, ResoAST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x137 t14], [])
(x139, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x140, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x138 x139], [])
(x142, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x136 x141 x140], [])
(x143, Equn1AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(x144, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x142 x143], [])
(t15, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x135 x144], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t34 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t45 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t54 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t54 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t54 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t34 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after process_trans: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(x1, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x3, Equn2AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x5, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ x1 x3], [])
(x2, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x4, Equn1AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x6, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x2 x4], [])
(t9, ResoAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x5 x6 t7 t8], [])
(x8, Equn1AST, (cl  (((2 * op_3) = (2 * op_3))) ((2 * op_3))), [], [])
(x9, Equn2AST, (cl  (((2 * op_3) = (2 * op_3))) ((not (2 * op_3)))), [], [])
(x7, ResoAST, (cl  (((2 * op_3) = (2 * op_3)))), [ x8 x9], [])
(x10, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x12, Equn2AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x14, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_3) = (1 + (2 * op_2))))), [ x10 x12], [])
(x11, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x13, Equn1AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x15, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [ x11 x13], [])
(t10, ResoAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x14 x15 x7 t7], [])
(x19, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x20, ResoAST, (cl  ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [ x19 t10], [])
(x21, Itep1AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) (op_1) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x22, Iten1AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x23, Equn2AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x24, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) (op_1)), [ x20 x21 x22 x23], [])
(x25, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x26, ResoAST, (cl  ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [ x25 t10], [])
(x27, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x28, ResoAST, (cl  (op_1) ((not op_1))), [ x27 x16], [])
(x29, Iten1AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) (op_1) ((not (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x30, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x31, Equn1AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x32, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x26 x29 x30 x31 x24 x28], [])
(x33, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x34, ResoAST, (cl  ((not op_1)) (op_1)), [ x33 x16], [])
(x35, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x34 x32], [])
(x36, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x37, ResoAST, (cl  ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x36 t9], [])
(x38, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x39, Iten2AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not op_1)) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1))))), [], [])
(x40, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x37 x38 x39 x23 x35 x32], [])
(x41, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x31 x40], [])
(x42, Itep2AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not op_1)) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x43, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [ x42 x40 x32], [])
(x44, Iten2AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) ((not op_1)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x45, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x44 x41 x35], [])
(x46, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x47, ResoAST, (cl  ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ x46 t9], [])
(t11, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x47 x43 x45], [])
(x49, Equn1AST, (cl  (((2 * op_2) = (2 * op_2))) ((2 * op_2))), [], [])
(x50, Equn2AST, (cl  (((2 * op_2) = (2 * op_2))) ((not (2 * op_2)))), [], [])
(x48, ResoAST, (cl  (((2 * op_2) = (2 * op_2)))), [ x49 x50], [])
(x51, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x53, Equn2AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x55, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [ x51 x53], [])
(x52, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x54, Equn1AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x56, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x52 x54], [])
(t12, ResoAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x55 x56 x48 t8], [])
(x63, Equp2AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [], [])
(x64, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [ x63 x57], [])
(x65, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x66, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x67, Equn2AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x68, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) (op_1)), [ x64 x65 x66 x67], [])
(x69, Equp1AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x70, ResoAST, (cl  (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [ x69 x57], [])
(x71, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x72, ResoAST, (cl  (op_1) ((not op_1))), [ x71 x60], [])
(x73, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x74, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x75, Equn1AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x76, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x70 x73 x74 x75 x68 x72], [])
(x77, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x78, ResoAST, (cl  ((not op_1)) (op_1)), [ x77 x60], [])
(x79, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x78 x76], [])
(x80, Equp1AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x81, ResoAST, (cl  (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x80 t12], [])
(x82, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x83, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = ((2 * op_3) + 1))))), [], [])
(x84, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [ x81 x82 x83 x67 x79 x76], [])
(x85, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x75 x84], [])
(x86, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x87, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [ x86 x84 x76], [])
(x88, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x89, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x88 x85 x79], [])
(x90, Equp2AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x91, ResoAST, (cl  ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [ x90 t12], [])
(t13, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x91 x87 x89], [])
(x95, Equp2AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x96, ResoAST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ x95 t13], [])
(x97, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [], [])
(x98, Iten1AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x99, Equn2AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x100, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) (op_0)), [ x96 x97 x98 x99], [])
(x101, Equp1AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x102, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x101 t13], [])
(x103, Equp1AST, (cl  ((not (op_0 = op_0))) (op_0) ((not op_0))), [], [])
(x104, ResoAST, (cl  (op_0) ((not op_0))), [ x103 x92], [])
(x105, Iten1AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x106, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x107, Equn1AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x108, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x102 x105 x106 x107 x100 x104], [])
(x109, Equp2AST, (cl  ((not (op_0 = op_0))) ((not op_0)) (op_0)), [], [])
(x110, ResoAST, (cl  ((not op_0)) (op_0)), [ x109 x92], [])
(x111, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x110 x108], [])
(x112, Equp1AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x113, ResoAST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x112 t11], [])
(x114, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x115, Iten2AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))))), [], [])
(x116, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x113 x114 x115 x99 x111 x108], [])
(x117, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x107 x116], [])
(x118, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x119, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x118 x116 x108], [])
(x120, Iten2AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x121, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x120 x117 x111], [])
(x122, Equp2AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x123, ResoAST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ x122 t11], [])
(t14, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x123 x119 x121], [])
(x125, Equn1AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x126, Equn2AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x124, ResoAST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x125 x126], [])
(x127, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x132, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x128, Equp1AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x129, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x128 t14], [])
(x130, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x131, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x129 x130], [])
(x133, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x127 x132 x131], [])
(x134, Equn2AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x135, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x133 x134], [])
(x136, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x141, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x137, Equp2AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x138, ResoAST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x137 t14], [])
(x139, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x140, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x138 x139], [])
(x142, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x136 x141 x140], [])
(x143, Equn1AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(x144, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x142 x143], [])
(t15, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x135 x144], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t34 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t45 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t54 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t54 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t54 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t34 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after process_simplify: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x161, Equn1AST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(x166, SubproofAST
	(x145, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x146, Impn1AST, (cl  ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x148, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x146 x145], [])
(x147, Impn2AST, (cl  ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x149, ResoAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ x147 x145], [])
(x150, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x151, ResoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x150 x148 x149], [])
(x159, DischargeAST, (cl  ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
	, (cl ), [], [])
(x163, ResoAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x159 x161], [])
(x162, Equn2AST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x165, SubproofAST
	(x152, AssumeAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x153, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(x154, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x153 x152], [])
(x155, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(x156, ResoAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ x155 x152], [])
(x157, ImppAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))), [], [])
(x158, ResoAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x157 x154 x156], [])
(x160, DischargeAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
	, (cl ), [], [])
(x164, ResoAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x160 x162], [])
(t2, ResoAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x163 x164], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(x1, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x3, Equn2AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x5, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ x1 x3], [])
(x2, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x4, Equn1AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x6, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x2 x4], [])
(t9, ResoAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x5 x6 t7 t8], [])
(x8, Equn1AST, (cl  (((2 * op_3) = (2 * op_3))) ((2 * op_3))), [], [])
(x9, Equn2AST, (cl  (((2 * op_3) = (2 * op_3))) ((not (2 * op_3)))), [], [])
(x7, ResoAST, (cl  (((2 * op_3) = (2 * op_3)))), [ x8 x9], [])
(x10, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x12, Equn2AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x14, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_3) = (1 + (2 * op_2))))), [ x10 x12], [])
(x11, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x13, Equn1AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x15, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [ x11 x13], [])
(t10, ResoAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x14 x15 x7 t7], [])
(x19, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x20, ResoAST, (cl  ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [ x19 t10], [])
(x21, Itep1AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) (op_1) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x22, Iten1AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x23, Equn2AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x24, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) (op_1)), [ x20 x21 x22 x23], [])
(x25, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x26, ResoAST, (cl  ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [ x25 t10], [])
(x27, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x28, ResoAST, (cl  (op_1) ((not op_1))), [ x27 x16], [])
(x29, Iten1AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) (op_1) ((not (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x30, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x31, Equn1AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x32, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x26 x29 x30 x31 x24 x28], [])
(x33, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x34, ResoAST, (cl  ((not op_1)) (op_1)), [ x33 x16], [])
(x35, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x34 x32], [])
(x36, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x37, ResoAST, (cl  ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x36 t9], [])
(x38, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x39, Iten2AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not op_1)) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1))))), [], [])
(x40, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x37 x38 x39 x23 x35 x32], [])
(x41, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x31 x40], [])
(x42, Itep2AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not op_1)) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x43, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [ x42 x40 x32], [])
(x44, Iten2AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) ((not op_1)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x45, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x44 x41 x35], [])
(x46, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x47, ResoAST, (cl  ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ x46 t9], [])
(t11, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x47 x43 x45], [])
(x49, Equn1AST, (cl  (((2 * op_2) = (2 * op_2))) ((2 * op_2))), [], [])
(x50, Equn2AST, (cl  (((2 * op_2) = (2 * op_2))) ((not (2 * op_2)))), [], [])
(x48, ResoAST, (cl  (((2 * op_2) = (2 * op_2)))), [ x49 x50], [])
(x51, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x53, Equn2AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x55, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [ x51 x53], [])
(x52, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x54, Equn1AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x56, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x52 x54], [])
(t12, ResoAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x55 x56 x48 t8], [])
(x63, Equp2AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [], [])
(x64, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [ x63 x57], [])
(x65, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x66, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x67, Equn2AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x68, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) (op_1)), [ x64 x65 x66 x67], [])
(x69, Equp1AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x70, ResoAST, (cl  (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [ x69 x57], [])
(x71, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x72, ResoAST, (cl  (op_1) ((not op_1))), [ x71 x60], [])
(x73, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x74, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x75, Equn1AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x76, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x70 x73 x74 x75 x68 x72], [])
(x77, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x78, ResoAST, (cl  ((not op_1)) (op_1)), [ x77 x60], [])
(x79, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x78 x76], [])
(x80, Equp1AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x81, ResoAST, (cl  (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x80 t12], [])
(x82, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x83, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = ((2 * op_3) + 1))))), [], [])
(x84, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [ x81 x82 x83 x67 x79 x76], [])
(x85, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x75 x84], [])
(x86, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x87, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [ x86 x84 x76], [])
(x88, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x89, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x88 x85 x79], [])
(x90, Equp2AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x91, ResoAST, (cl  ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [ x90 t12], [])
(t13, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x91 x87 x89], [])
(x95, Equp2AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x96, ResoAST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ x95 t13], [])
(x97, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [], [])
(x98, Iten1AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x99, Equn2AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x100, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) (op_0)), [ x96 x97 x98 x99], [])
(x101, Equp1AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x102, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x101 t13], [])
(x103, Equp1AST, (cl  ((not (op_0 = op_0))) (op_0) ((not op_0))), [], [])
(x104, ResoAST, (cl  (op_0) ((not op_0))), [ x103 x92], [])
(x105, Iten1AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x106, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x107, Equn1AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x108, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x102 x105 x106 x107 x100 x104], [])
(x109, Equp2AST, (cl  ((not (op_0 = op_0))) ((not op_0)) (op_0)), [], [])
(x110, ResoAST, (cl  ((not op_0)) (op_0)), [ x109 x92], [])
(x111, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x110 x108], [])
(x112, Equp1AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x113, ResoAST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x112 t11], [])
(x114, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x115, Iten2AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))))), [], [])
(x116, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x113 x114 x115 x99 x111 x108], [])
(x117, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x107 x116], [])
(x118, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x119, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x118 x116 x108], [])
(x120, Iten2AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x121, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x120 x117 x111], [])
(x122, Equp2AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x123, ResoAST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ x122 t11], [])
(t14, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x123 x119 x121], [])
(x125, Equn1AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x126, Equn2AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x124, ResoAST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x125 x126], [])
(x127, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x132, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x128, Equp1AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x129, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x128 t14], [])
(x130, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x131, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x129 x130], [])
(x133, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x127 x132 x131], [])
(x134, Equn2AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x135, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x133 x134], [])
(x136, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x141, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x137, Equp2AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x138, ResoAST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x137 t14], [])
(x139, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x140, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x138 x139], [])
(x142, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x136 x141 x140], [])
(x143, Equn1AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(x144, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x142 x143], [])
(t15, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x135 x144], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t34 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t45 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t54 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t54 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t54 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t34 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after process_proj: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x161, Equn1AST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(x166, SubproofAST
	(x145, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x146, Impn1AST, (cl  ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x148, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x146 x145], [])
(x147, Impn2AST, (cl  ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x149, ResoAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ x147 x145], [])
(x150, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x151, ResoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x150 x148 x149], [])
(x159, DischargeAST, (cl  ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
	, (cl ), [], [])
(x163, ResoAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x159 x161], [])
(x162, Equn2AST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x165, SubproofAST
	(x152, AssumeAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x153, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(x154, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x153 x152], [])
(x155, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(x156, ResoAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ x155 x152], [])
(x157, ImppAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))), [], [])
(x158, ResoAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x157 x154 x156], [])
(x160, DischargeAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
	, (cl ), [], [])
(x164, ResoAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x160 x162], [])
(t2, ResoAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x163 x164], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(x1, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x3, Equn2AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x5, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ x1 x3], [])
(x2, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x4, Equn1AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x6, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x2 x4], [])
(t9, ResoAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x5 x6 t7 t8], [])
(x8, Equn1AST, (cl  (((2 * op_3) = (2 * op_3))) ((2 * op_3))), [], [])
(x9, Equn2AST, (cl  (((2 * op_3) = (2 * op_3))) ((not (2 * op_3)))), [], [])
(x7, ResoAST, (cl  (((2 * op_3) = (2 * op_3)))), [ x8 x9], [])
(x10, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x12, Equn2AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x14, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_3) = (1 + (2 * op_2))))), [ x10 x12], [])
(x11, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x13, Equn1AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x15, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [ x11 x13], [])
(t10, ResoAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x14 x15 x7 t7], [])
(x19, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x20, ResoAST, (cl  ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [ x19 t10], [])
(x21, Itep1AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) (op_1) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x22, Iten1AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x23, Equn2AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x24, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) (op_1)), [ x20 x21 x22 x23], [])
(x25, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x26, ResoAST, (cl  ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [ x25 t10], [])
(x27, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x28, ResoAST, (cl  (op_1) ((not op_1))), [ x27 x16], [])
(x29, Iten1AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) (op_1) ((not (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x30, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x31, Equn1AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x32, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x26 x29 x30 x31 x24 x28], [])
(x33, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x34, ResoAST, (cl  ((not op_1)) (op_1)), [ x33 x16], [])
(x35, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x34 x32], [])
(x36, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x37, ResoAST, (cl  ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x36 t9], [])
(x38, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x39, Iten2AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not op_1)) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1))))), [], [])
(x40, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x37 x38 x39 x23 x35 x32], [])
(x41, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x31 x40], [])
(x42, Itep2AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not op_1)) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x43, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [ x42 x40 x32], [])
(x44, Iten2AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) ((not op_1)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x45, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x44 x41 x35], [])
(x46, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x47, ResoAST, (cl  ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ x46 t9], [])
(t11, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x47 x43 x45], [])
(x49, Equn1AST, (cl  (((2 * op_2) = (2 * op_2))) ((2 * op_2))), [], [])
(x50, Equn2AST, (cl  (((2 * op_2) = (2 * op_2))) ((not (2 * op_2)))), [], [])
(x48, ResoAST, (cl  (((2 * op_2) = (2 * op_2)))), [ x49 x50], [])
(x51, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x53, Equn2AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x55, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [ x51 x53], [])
(x52, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x54, Equn1AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x56, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x52 x54], [])
(t12, ResoAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x55 x56 x48 t8], [])
(x63, Equp2AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [], [])
(x64, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [ x63 x57], [])
(x65, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x66, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x67, Equn2AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x68, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) (op_1)), [ x64 x65 x66 x67], [])
(x69, Equp1AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x70, ResoAST, (cl  (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [ x69 x57], [])
(x71, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x72, ResoAST, (cl  (op_1) ((not op_1))), [ x71 x60], [])
(x73, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x74, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x75, Equn1AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x76, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x70 x73 x74 x75 x68 x72], [])
(x77, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x78, ResoAST, (cl  ((not op_1)) (op_1)), [ x77 x60], [])
(x79, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x78 x76], [])
(x80, Equp1AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x81, ResoAST, (cl  (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x80 t12], [])
(x82, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x83, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = ((2 * op_3) + 1))))), [], [])
(x84, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [ x81 x82 x83 x67 x79 x76], [])
(x85, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x75 x84], [])
(x86, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x87, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [ x86 x84 x76], [])
(x88, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x89, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x88 x85 x79], [])
(x90, Equp2AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x91, ResoAST, (cl  ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [ x90 t12], [])
(t13, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x91 x87 x89], [])
(x95, Equp2AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x96, ResoAST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ x95 t13], [])
(x97, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [], [])
(x98, Iten1AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x99, Equn2AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x100, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) (op_0)), [ x96 x97 x98 x99], [])
(x101, Equp1AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x102, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x101 t13], [])
(x103, Equp1AST, (cl  ((not (op_0 = op_0))) (op_0) ((not op_0))), [], [])
(x104, ResoAST, (cl  (op_0) ((not op_0))), [ x103 x92], [])
(x105, Iten1AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x106, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x107, Equn1AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x108, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x102 x105 x106 x107 x100 x104], [])
(x109, Equp2AST, (cl  ((not (op_0 = op_0))) ((not op_0)) (op_0)), [], [])
(x110, ResoAST, (cl  ((not op_0)) (op_0)), [ x109 x92], [])
(x111, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x110 x108], [])
(x112, Equp1AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x113, ResoAST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x112 t11], [])
(x114, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x115, Iten2AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))))), [], [])
(x116, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x113 x114 x115 x99 x111 x108], [])
(x117, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x107 x116], [])
(x118, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x119, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x118 x116 x108], [])
(x120, Iten2AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x121, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x120 x117 x111], [])
(x122, Equp2AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x123, ResoAST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ x122 t11], [])
(t14, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x123 x119 x121], [])
(x125, Equn1AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x126, Equn2AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x124, ResoAST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x125 x126], [])
(x127, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x132, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(x128, Equp1AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x129, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x128 t14], [])
(x130, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(x131, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x129 x130], [])
(x133, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x127 x132 x131], [])
(x134, Equn2AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x135, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x133 x134], [])
(x136, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x141, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(x137, Equp2AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x138, ResoAST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x137 t14], [])
(x139, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(x140, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x138 x139], [])
(x142, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x136 x141 x140], [])
(x143, Equn1AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(x144, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x142 x143], [])
(t15, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x135 x144], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [ 0])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [ 1])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t34 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t45 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t54 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t54 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t54 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t34 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])

Certif after process_subproof: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x161, Equn1AST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(x159, AndnAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x163, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x159 x161], [])
(x162, Equn2AST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x160, AndnAST, (cl  ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x164, ResoAST, (cl  ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x160 x162], [])
(t2, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x163 x164], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(x1, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x3, Equn2AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x5, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ x1 x3], [])
(x2, EqcpAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x4, Equn1AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x6, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x2 x4], [])
(t9, ResoAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x5 x6 t7 t8], [])
(x8, Equn1AST, (cl  (((2 * op_3) = (2 * op_3))) ((2 * op_3))), [], [])
(x9, Equn2AST, (cl  (((2 * op_3) = (2 * op_3))) ((not (2 * op_3)))), [], [])
(x7, ResoAST, (cl  (((2 * op_3) = (2 * op_3)))), [ x8 x9], [])
(x10, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x12, Equn2AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x14, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_3) = (1 + (2 * op_2))))), [ x10 x12], [])
(x11, EqcpAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x13, Equn1AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x15, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [ x11 x13], [])
(t10, ResoAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x14 x15 x7 t7], [])
(x19, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x20, ResoAST, (cl  ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [ x19 t10], [])
(x21, Itep1AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) (op_1) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x22, Iten1AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x23, Equn2AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x24, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) (op_1)), [ x20 x21 x22 x23], [])
(x25, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x26, ResoAST, (cl  ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [ x25 t10], [])
(x27, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x28, ResoAST, (cl  (op_1) ((not op_1))), [ x27 x16], [])
(x29, Iten1AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) (op_1) ((not (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x30, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x31, Equn1AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x32, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x26 x29 x30 x31 x24 x28], [])
(x33, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x34, ResoAST, (cl  ((not op_1)) (op_1)), [ x33 x16], [])
(x35, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x34 x32], [])
(x36, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x37, ResoAST, (cl  ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x36 t9], [])
(x38, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x39, Iten2AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not op_1)) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1))))), [], [])
(x40, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x37 x38 x39 x23 x35 x32], [])
(x41, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x31 x40], [])
(x42, Itep2AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not op_1)) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x43, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [ x42 x40 x32], [])
(x44, Iten2AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) ((not op_1)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x45, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x44 x41 x35], [])
(x46, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x47, ResoAST, (cl  ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ x46 t9], [])
(t11, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x47 x43 x45], [])
(x49, Equn1AST, (cl  (((2 * op_2) = (2 * op_2))) ((2 * op_2))), [], [])
(x50, Equn2AST, (cl  (((2 * op_2) = (2 * op_2))) ((not (2 * op_2)))), [], [])
(x48, ResoAST, (cl  (((2 * op_2) = (2 * op_2)))), [ x49 x50], [])
(x51, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x53, Equn2AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x55, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [ x51 x53], [])
(x52, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x54, Equn1AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x56, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x52 x54], [])
(t12, ResoAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x55 x56 x48 t8], [])
(x63, Equp2AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [], [])
(x64, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [ x63 x57], [])
(x65, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x66, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x67, Equn2AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x68, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) (op_1)), [ x64 x65 x66 x67], [])
(x69, Equp1AST, (cl  ((not (((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x70, ResoAST, (cl  (((2 * op_2) = (2 * op_3))) ((not ((2 * op_2) = (2 * op_3))))), [ x69 x57], [])
(x71, Equp1AST, (cl  ((not (op_1 = op_1))) (op_1) ((not op_1))), [], [])
(x72, ResoAST, (cl  (op_1) ((not op_1))), [ x71 x60], [])
(x73, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x74, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x75, Equn1AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x76, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x70 x73 x74 x75 x68 x72], [])
(x77, Equp2AST, (cl  ((not (op_1 = op_1))) ((not op_1)) (op_1)), [], [])
(x78, ResoAST, (cl  ((not op_1)) (op_1)), [ x77 x60], [])
(x79, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x78 x76], [])
(x80, Equp1AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x81, ResoAST, (cl  (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x80 t12], [])
(x82, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x83, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = ((2 * op_3) + 1))))), [], [])
(x84, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [ x81 x82 x83 x67 x79 x76], [])
(x85, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x75 x84], [])
(x86, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x87, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [ x86 x84 x76], [])
(x88, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x89, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x88 x85 x79], [])
(x90, Equp2AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x91, ResoAST, (cl  ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [ x90 t12], [])
(t13, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x91 x87 x89], [])
(x95, Equp2AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x96, ResoAST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ x95 t13], [])
(x97, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [], [])
(x98, Iten1AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x99, Equn2AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x100, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) (op_0)), [ x96 x97 x98 x99], [])
(x101, Equp1AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x102, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x101 t13], [])
(x103, Equp1AST, (cl  ((not (op_0 = op_0))) (op_0) ((not op_0))), [], [])
(x104, ResoAST, (cl  (op_0) ((not op_0))), [ x103 x92], [])
(x105, Iten1AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x106, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x107, Equn1AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x108, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x102 x105 x106 x107 x100 x104], [])
(x109, Equp2AST, (cl  ((not (op_0 = op_0))) ((not op_0)) (op_0)), [], [])
(x110, ResoAST, (cl  ((not op_0)) (op_0)), [ x109 x92], [])
(x111, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x110 x108], [])
(x112, Equp1AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x113, ResoAST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x112 t11], [])
(x114, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x115, Iten2AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))))), [], [])
(x116, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x113 x114 x115 x99 x111 x108], [])
(x117, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x107 x116], [])
(x118, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x119, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x118 x116 x108], [])
(x120, Iten2AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x121, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x120 x117 x111], [])
(x122, Equp2AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x123, ResoAST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ x122 t11], [])
(t14, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x123 x119 x121], [])
(x125, Equn1AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x126, Equn2AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x124, ResoAST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x125 x126], [])
(x127, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x132, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(x128, Equp1AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x129, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x128 t14], [])
(x130, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(x131, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x129 x130], [])
(x133, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x127 x132 x131], [])
(x134, Equn2AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x135, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x133 x134], [])
(x136, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x141, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(x137, Equp2AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x138, ResoAST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x137 t14], [])
(x139, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(x140, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x138 x139], [])
(x142, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x136 x141 x140], [])
(x143, Equn1AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(x144, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x142 x143], [])
(t15, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x135 x144], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(x171, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(t18, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x171 t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x172, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(t22, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (op_0) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ x172 t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x173, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(t25, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ x173 t18], [])
(x174, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(t26, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ x174 t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(x175, AndnAST, (cl  ((and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [], [])
(t31, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ x175 t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t34 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t47, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t45 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t56, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (op_1) ((op_2 <= op_3))), [ t54 t19 t22 t25 t23 t53 t32 t40], [])
(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
(t64, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t54 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t54 t39], [])
(t68, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not ((2 * op_2) = (2 * op_3))))), [ t34 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))))), [ t80 t79 t73], [])
(x168, AndpAST, (cl  ((not (and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [ 0])
(x167, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t81 x168], [])
(x153, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(x154, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x153 x167], [])
(x155, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(x156, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ x155 x167], [])
(x157, ImppAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))), [], [])
(x158, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x157 x154 x156], [])
(x169, AndpAST, (cl  ((not (and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [ 1])
(x170, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ t81 x169], [])
(x176, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))))), [ x158 x170], [])
(x178, AndpAST, (cl  ((not (and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [ 0])
(x177, ResoAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x176 x178], [])
(x146, Impn1AST, (cl  ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x148, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x146 x177], [])
(x147, Impn2AST, (cl  ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x149, ResoAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ x147 x177], [])
(x150, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x151, ResoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x150 x148 x149], [])
(x179, AndpAST, (cl  ((not (and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [ 1])
(x180, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x176 x179], [])
(x181, ResoAST, (cl ), [ x151 x180], [])

nwt: (* 2 op_3 (aka Smt_var_op_3))File "./test7verit.v", line 23, characters 5-256:
Error:
Verit.import_trace: processing certificate
Error: VeritSyntax.Debug
Message: VeritAst.process_certif: formula Fatom +2*1*3 is not well-typed at id x8
Position: Line 82 Position 1

