(assume a0 (not (=> (ite op_0 (ite op_1 (= (+ (* 2 op_2) 1) (+ (* 2 op_3) 1)) (= (+ (* 2 op_2) 1) (* 2 op_3))) (ite op_1 (= (* 2 op_2) (+ (* 2 op_3) 1)) (= (* 2 op_2) (* 2 op_3)))) (and (=> op_0 op_1) (=> op_1 op_0) (= op_2 op_3)))))
(step t1 (cl (not (= (not (=> (ite op_0 (ite op_1 (= (+ (* 2 op_2) 1) (+ (* 2 op_3) 1)) (= (+ (* 2 op_2) 1) (* 2 op_3))) (ite op_1 (= (* 2 op_2) (+ (* 2 op_3) 1)) (= (* 2 op_2) (* 2 op_3)))) (and (=> op_0 op_1) (=> op_1 op_0) (= op_2 op_3)))) (not (=> (ite op_0 (and op_1 (= op_2 op_3)) (and (not op_1) (= op_2 op_3))) (and (=> op_0 op_1) (=> op_1 op_0) (= op_2 op_3)))))) (not (not (=> (ite op_0 (ite op_1 (= (+ (* 2 op_2) 1) (+ (* 2 op_3) 1)) (= (+ (* 2 op_2) 1) (* 2 op_3))) (ite op_1 (= (* 2 op_2) (+ (* 2 op_3) 1)) (= (* 2 op_2) (* 2 op_3)))) (and (=> op_0 op_1) (=> op_1 op_0) (= op_2 op_3))))) (not (=> (ite op_0 (and op_1 (= op_2 op_3)) (and (not op_1) (= op_2 op_3))) (and (=> op_0 op_1) (=> op_1 op_0) (= op_2 op_3))))) :rule equiv_pos2)
(step t2 (cl (= op_0 op_0)) :rule refl)
(step t3 (cl (= op_1 op_1)) :rule refl)
(step t4 (cl (= (+ (* 2 op_2) 1) (+ 1 (* 2 op_2)))) :rule hole :args (ARITH_POLY_NORM (= (+ (* 2 op_2) 1) (+ 1 (* 2 op_2)))))
(step t5 (cl (= (+ (* 2 op_3) 1) (+ 1 (* 2 op_3)))) :rule hole :args (ARITH_POLY_NORM (= (+ (* 2 op_3) 1) (+ 1 (* 2 op_3)))))
(step t6 (cl (= (= (+ (* 2 op_2) 1) (+ (* 2 op_3) 1)) (= (+ 1 (* 2 op_2)) (+ 1 (* 2 op_3))))) :rule cong :premises (t4 t5))
(step t7 (cl (= (= (+ 1 (* 2 op_2)) (+ 1 (* 2 op_3))) (= op_2 op_3))) :rule hole :args (ARITH_POLY_NORM (= (= (+ 1 (* 2 op_2)) (+ 1 (* 2 op_3))) (= op_2 op_3))))
(step t8 (cl (= (= (+ (* 2 op_2) 1) (+ (* 2 op_3) 1)) (= op_2 op_3))) :rule trans :premises (t6 t7))
(step t9 (cl (= (* 2 op_3) (* 2 op_3))) :rule refl)
(step t10 (cl (= (= (+ (* 2 op_2) 1) (* 2 op_3)) (= (+ 1 (* 2 op_2)) (* 2 op_3)))) :rule cong :premises (t4 t9))
(step t11 (cl (= (= (+ 1 (* 2 op_2)) (* 2 op_3)) false)) :rule all_simplify)
(step t12 (cl (= (= (+ (* 2 op_2) 1) (* 2 op_3)) false)) :rule trans :premises (t10 t11))
(step t13 (cl (= (ite op_1 (= (+ (* 2 op_2) 1) (+ (* 2 op_3) 1)) (= (+ (* 2 op_2) 1) (* 2 op_3))) (ite op_1 (= op_2 op_3) false))) :rule cong :premises (t3 t8 t12))
(step t14 (cl (= (ite op_1 (= op_2 op_3) false) (and op_1 (= op_2 op_3)))) :rule all_simplify :args (ite_simplify10 op_1 (= op_2 op_3)))
(step t15 (cl (= (ite op_1 (= (+ (* 2 op_2) 1) (+ (* 2 op_3) 1)) (= (+ (* 2 op_2) 1) (* 2 op_3))) (and op_1 (= op_2 op_3)))) :rule trans :premises (t13 t14))
(step t16 (cl (= (* 2 op_2) (* 2 op_2))) :rule refl)
(step t17 (cl (= (= (* 2 op_2) (+ (* 2 op_3) 1)) (= (* 2 op_2) (+ 1 (* 2 op_3))))) :rule cong :premises (t16 t5))
(step t18 (cl (= (= (* 2 op_2) (+ 1 (* 2 op_3))) false)) :rule all_simplify)
(step t19 (cl (= (= (* 2 op_2) (+ (* 2 op_3) 1)) false)) :rule trans :premises (t17 t18))
(step t20 (cl (= (= (* 2 op_2) (* 2 op_3)) (= op_2 op_3))) :rule hole :args (ARITH_POLY_NORM (= (= (* 2 op_2) (* 2 op_3)) (= op_2 op_3))))
(step t21 (cl (= (ite op_1 (= (* 2 op_2) (+ (* 2 op_3) 1)) (= (* 2 op_2) (* 2 op_3))) (ite op_1 false (= op_2 op_3)))) :rule cong :premises (t3 t19 t20))
(step t22 (cl (= (ite op_1 false (= op_2 op_3)) (and (not op_1) (= op_2 op_3)))) :rule all_simplify :args (ite_simplify11 op_1 (= op_2 op_3)))
(step t23 (cl (= (ite op_1 (= (* 2 op_2) (+ (* 2 op_3) 1)) (= (* 2 op_2) (* 2 op_3))) (and (not op_1) (= op_2 op_3)))) :rule trans :premises (t21 t22))
(step t24 (cl (= (ite op_0 (ite op_1 (= (+ (* 2 op_2) 1) (+ (* 2 op_3) 1)) (= (+ (* 2 op_2) 1) (* 2 op_3))) (ite op_1 (= (* 2 op_2) (+ (* 2 op_3) 1)) (= (* 2 op_2) (* 2 op_3)))) (ite op_0 (and op_1 (= op_2 op_3)) (and (not op_1) (= op_2 op_3))))) :rule cong :premises (t2 t15 t23))
(step t25 (cl (= (and (=> op_0 op_1) (=> op_1 op_0) (= op_2 op_3)) (and (=> op_0 op_1) (=> op_1 op_0) (= op_2 op_3)))) :rule refl)
(step t26 (cl (= (=> (ite op_0 (ite op_1 (= (+ (* 2 op_2) 1) (+ (* 2 op_3) 1)) (= (+ (* 2 op_2) 1) (* 2 op_3))) (ite op_1 (= (* 2 op_2) (+ (* 2 op_3) 1)) (= (* 2 op_2) (* 2 op_3)))) (and (=> op_0 op_1) (=> op_1 op_0) (= op_2 op_3))) (=> (ite op_0 (and op_1 (= op_2 op_3)) (and (not op_1) (= op_2 op_3))) (and (=> op_0 op_1) (=> op_1 op_0) (= op_2 op_3))))) :rule cong :premises (t24 t25))
(step t27 (cl (= (not (=> (ite op_0 (ite op_1 (= (+ (* 2 op_2) 1) (+ (* 2 op_3) 1)) (= (+ (* 2 op_2) 1) (* 2 op_3))) (ite op_1 (= (* 2 op_2) (+ (* 2 op_3) 1)) (= (* 2 op_2) (* 2 op_3)))) (and (=> op_0 op_1) (=> op_1 op_0) (= op_2 op_3)))) (not (=> (ite op_0 (and op_1 (= op_2 op_3)) (and (not op_1) (= op_2 op_3))) (and (=> op_0 op_1) (=> op_1 op_0) (= op_2 op_3)))))) :rule cong :premises (t26))
(step t28 (cl (not (=> (ite op_0 (and op_1 (= op_2 op_3)) (and (not op_1) (= op_2 op_3))) (and (=> op_0 op_1) (=> op_1 op_0) (= op_2 op_3))))) :rule resolution :premises (t1 t27 a0))
(step t29 (cl (not (and (=> op_0 op_1) (=> op_1 op_0) (= op_2 op_3)))) :rule not_implies2 :premises (t28))
(step t30 (cl (not (=> op_0 op_1)) (not (=> op_1 op_0)) (not (= op_2 op_3))) :rule not_and :premises (t29))
(step t31 (cl (not (= op_2 op_3)) (not (=> op_0 op_1)) (not (=> op_1 op_0))) :rule reordering :premises (t30))
(step t32 (cl (=> op_1 op_0) op_1) :rule implies_neg1)
(step t33 (cl op_1 (=> op_1 op_0)) :rule reordering :premises (t32))
(step t34 (cl (not (and (not op_1) (= op_2 op_3))) (not op_1)) :rule and_pos)
(step t35 (cl (not op_1) (not (and (not op_1) (= op_2 op_3)))) :rule reordering :premises (t34))
(step t36 (cl (ite op_0 (and op_1 (= op_2 op_3)) (and (not op_1) (= op_2 op_3)))) :rule not_implies1 :premises (t28))
(step t37 (cl op_0 (and (not op_1) (= op_2 op_3))) :rule ite1 :premises (t36))
(step t38 (cl (=> op_0 op_1) (not op_1)) :rule implies_neg2)
(step t39 (cl (not (and op_1 (= op_2 op_3))) (= op_2 op_3)) :rule and_pos)
(step t40 (cl (= op_2 op_3) (not (and op_1 (= op_2 op_3)))) :rule reordering :premises (t39))
(step t41 (cl (not (and op_1 (= op_2 op_3))) op_1) :rule and_pos)
(step t42 (cl op_1 (not (and op_1 (= op_2 op_3)))) :rule reordering :premises (t41))
(step t43 (cl (=> op_1 op_0) (not op_0)) :rule implies_neg2)
(step t44 (cl (not (and op_1 (= op_2 op_3))) (not (and op_1 (= op_2 op_3))) (not op_0)) :rule resolution :premises (t31 t38 t40 t42 t43))
(step t45 (cl (not (and op_1 (= op_2 op_3))) (not op_0)) :rule contraction :premises (t44))
(step t46 (cl (not op_0) (and op_1 (= op_2 op_3))) :rule ite2 :premises (t36))
(step t47 (cl (and op_1 (= op_2 op_3)) (not op_0)) :rule reordering :premises (t46))
(step t48 (cl (not op_0) (not op_0)) :rule resolution :premises (t45 t47))
(step t49 (cl (not op_0)) :rule contraction :premises (t48))
(step t50 (cl (and (not op_1) (= op_2 op_3))) :rule resolution :premises (t37 t49))
(step t51 (cl (not op_1)) :rule resolution :premises (t35 t50))
(step t52 (cl (=> op_1 op_0)) :rule resolution :premises (t33 t51))
(step t53 (cl (not (and (not op_1) (= op_2 op_3))) (= op_2 op_3)) :rule and_pos)
(step t54 (cl (= op_2 op_3) (not (and (not op_1) (= op_2 op_3)))) :rule reordering :premises (t53))
(step t55 (cl (= op_2 op_3)) :rule resolution :premises (t54 t50))
(step t56 (cl (=> op_0 op_1) op_0) :rule implies_neg1)
(step t57 (cl op_0 (=> op_0 op_1)) :rule reordering :premises (t56))
(step t58 (cl (=> op_0 op_1)) :rule resolution :premises (t57 t49))
(step t59 (cl) :rule resolution :premises (t31 t52 t55 t58))
