; bool_simplify at t2 is in the path of the resolution at t64
; t64 is sound until process_subproof
; the only subproofs created are from the bool_simplify at t2
; I seperately tested that rewrite (see `testrewrites/coq/testboolsimpsanity.v`) and it works
; So it has to be the case that the residue added by the subproofs are not propagated properly up to t64 (this is handled by `extend_cl` in VeritAst)

;Path of t2:
;t2 Boolsimp
;t6 Reso t2
;t17 Reso t6
;  t18 And t17
;    t22 Ite1 t18
;    t25 Ite2 t18
;  t26 And t17


		 = false
     : bool
Certif before preprocessing: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t2, BoolsimpAST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t4, NotnotAST, (cl  ((not (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t4 t3], [])
(t6, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(t9, CongAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t7 t8], [])
(t10, CongAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ t7], [])
(t11, CongAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t9 t10], [])
(t12, CongAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ t8], [])
(t13, CongAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t12], [])
(t14, CongAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ t11 t13], [])
(t15, CongAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ t14], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(t18, AndAST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(t22, Ite1AST, (cl  (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t25, Ite2AST, (cl  ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ t18], [])
(t26, AndAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(t31, NandAST, (cl  ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])

(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t35, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [ t34], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t35 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])

(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t46, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3))))), [ t45], [])
(t47, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t46 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])

(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t55, SameAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [ t54], [])


(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
--------------------------
									 (not (op_2 <= op_3))	(not ((2 * op_3) <= (2 * op_2)))	(not ((2 * op_2) = (1 + (2 * op_3))))	(not (op_2 = op_3))
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
--------------------------
									   (not (op_2 <= op_3))	(not ((2 * op_3) <= (2 * op_2)))	(not ((2 * op_2) = (1 + (2 * op_3))))	(not (op_3 <= op_2))
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
--------------------------
										 (not (op_2 <= op_3))	(not ((2 * op_3) <= (2 * op_2)))	(not ((2 * op_2) = (1 + (2 * op_3))))
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
--------------------------
										 (not (op_2 <= op_3))	(not ((2 * op_2) = (1 + (2 * op_3))))
(t52, ResoAST, (cl  ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
--------------------------
										 (not (op_2 <= op_3))	(op_1) ((not (imp  op_1 op_0)))
(t56, ResoAST, (cl  (op_1) ((op_2 <= op_3))), [ t55 t19 t22 t25 t23 t53 t32 t40], [])
--------------------------
										 (op_1) ((not (imp  op_1 op_0)))
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
--------------------------
(op_1)
;before any processing, the resolution at t64 checks out

(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])

(t64, ResoAST, (cl  (op_1)), [ t57 t63 t38 t39 t33 t52 t56 t29], [])

(t65, ResoAST, (cl  ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t55 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t55 t39], [])
(t68, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_3))))), [ t35 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl ), [ t80 t79 t73], [])



Certif after process_subproof: 
(h1, AssumeAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x138, Equn1AST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(x136, AndnAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x140, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x136 x138], [])
(x139, Equn2AST, (cl  (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x137, AndnAST, (cl  ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x141, ResoAST, (cl  ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x137 x139], [])
(t2, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x140 x141], [])
(t3, Equp2AST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t5, ThresoAST, (cl  ((not ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t3], [])
(t6, ThresoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ h1 t2 t5], [])
(t7, SumsimpAST, (cl  ((((2 * op_2) + 1) = (1 + (2 * op_2))))), [], [])
(t8, SumsimpAST, (cl  ((((2 * op_3) + 1) = (1 + (2 * op_3))))), [], [])
(x1, EqtrAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x3, Equn2AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x5, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((1 + (2 * op_2)) = (1 + (2 * op_3)))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x1 x3], [])
(x2, EqtrAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x4, Equn1AST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x6, ResoAST, (cl  ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x2 x4], [])
(t9, ResoAST, (cl  (((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x5 x6 t7 t8], [])
(x7, ReflAST, (cl  (((2 * op_3) = (2 * op_3)))), [], [])
(x8, EqtrAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x10, Equn2AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x12, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) (((2 * op_3) = (1 + (2 * op_2)))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x8 x10], [])
(x9, EqtrAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x11, Equn1AST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x13, ResoAST, (cl  ((not ((2 * op_3) = (2 * op_3)))) ((not (((2 * op_2) + 1) = (1 + (2 * op_2))))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x9 x11], [])
(t10, ResoAST, (cl  (((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))), [ x12 x13 t7 x7], [])
(x15, Equn1AST, (cl  ((op_1 = op_1)) (op_1)), [], [])
(x16, Equn2AST, (cl  ((op_1 = op_1)) ((not op_1))), [], [])
(x14, ResoAST, (cl  ((op_1 = op_1))), [ x15 x16], [])
(x17, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x18, ResoAST, (cl  ((not (((2 * op_2) + 1) = (2 * op_3)))) (((2 * op_3) = (1 + (2 * op_2))))), [ x17 t10], [])
(x19, Itep1AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) (op_1) ((((2 * op_2) + 1) = (2 * op_3)))), [], [])
(x20, Iten1AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x21, Equn2AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x22, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) (op_1) (op_1)), [ x18 x19 x20 x21], [])
(x23, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = (2 * op_3)) = ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x24, ResoAST, (cl  ((((2 * op_2) + 1) = (2 * op_3))) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [ x23 t10], [])
(x25, Iten1AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) (op_1) ((not (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x26, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(x27, Equn1AST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x28, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1)), [ x24 x25 x26 x27 x22], [])
(x29, Equp1AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x30, ResoAST, (cl  ((((2 * op_2) + 1) = ((2 * op_3) + 1))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x29 t9], [])
(x31, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x32, Iten2AST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not op_1)) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1))))), [], [])
(x33, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x30 x31 x32 x21 x28], [])
(x34, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x27 x33], [])
(x35, Itep2AST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((not op_1)) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [], [])
(x36, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((((2 * op_2) + 1) = ((2 * op_3) + 1)))), [ x35 x33 x28], [])
(x37, Iten2AST, (cl  ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))) ((not op_1)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [])
(x38, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ x37 x34 x28], [])
(x39, Equp2AST, (cl  ((not ((((2 * op_2) + 1) = ((2 * op_3) + 1)) = ((1 + (2 * op_2)) = (1 + (2 * op_3)))))) ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x40, ResoAST, (cl  ((not (((2 * op_2) + 1) = ((2 * op_3) + 1)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ x39 t9], [])
(t11, ResoAST, (cl  (((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x40 x36 x38], [])
(x41, ReflAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])
(x42, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x44, Equn2AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x46, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3)))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x42 x44], [])
(x43, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x45, Equn1AST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x47, ResoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) ((not (((2 * op_3) + 1) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x43 x45], [])
(t12, ResoAST, (cl  ((((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))), [ x46 x47 x41 t8], [])
(x52, Equn1AST, (cl  ((op_1 = op_1)) (op_1)), [], [])
(x53, Equn2AST, (cl  ((op_1 = op_1)) ((not op_1))), [], [])
(x51, ResoAST, (cl  ((op_1 = op_1))), [ x52 x53], [])
(x49, Equn1AST, (cl  ((((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3)))) (((2 * op_2) = (2 * op_3)))), [], [])
(x50, Equn2AST, (cl  ((((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x48, ResoAST, (cl  ((((2 * op_2) = (2 * op_3)) = ((2 * op_2) = (2 * op_3))))), [ x49 x50], [])
(x54, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x55, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x56, Equn2AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x57, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) (op_1)), [ x54 x55 x56], [])
(x58, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x59, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(x60, Equn1AST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x61, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1)), [ x58 x59 x60 x57], [])
(x62, Equp1AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x63, ResoAST, (cl  (((2 * op_2) = ((2 * op_3) + 1))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x62 t12], [])
(x64, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x65, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = ((2 * op_3) + 1))))), [], [])
(x66, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [ x63 x64 x65 x56 x61], [])
(x67, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x60 x66], [])
(x68, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = ((2 * op_3) + 1)))), [], [])
(x69, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (((2 * op_2) = ((2 * op_3) + 1)))), [ x68 x66 x61], [])
(x70, Iten2AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) ((not op_1)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [])
(x71, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [ x70 x67 x61], [])
(x72, Equp2AST, (cl  ((not (((2 * op_2) = ((2 * op_3) + 1)) = ((2 * op_2) = (1 + (2 * op_3)))))) ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(x73, ResoAST, (cl  ((not ((2 * op_2) = ((2 * op_3) + 1)))) (((2 * op_2) = (1 + (2 * op_3))))), [ x72 t12], [])
(t13, ResoAST, (cl  (((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x73 x69 x71], [])
(x75, Equn1AST, (cl  ((op_0 = op_0)) (op_0)), [], [])
(x76, Equn2AST, (cl  ((op_0 = op_0)) ((not op_0))), [], [])
(x74, ResoAST, (cl  ((op_0 = op_0))), [ x75 x76], [])
(x77, Equp2AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x78, ResoAST, (cl  ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ x77 t13], [])
(x79, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))), [], [])
(x80, Iten1AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x81, Equn2AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x82, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_0) (op_0)), [ x78 x79 x80 x81], [])
(x83, Equp1AST, (cl  ((not ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))) = (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x84, ResoAST, (cl  ((ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x83 t13], [])
(x85, Iten1AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) (op_0) ((not (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x86, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [], [])
(x87, Equn1AST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x88, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0)), [ x84 x85 x86 x87 x82], [])
(x89, Equp1AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x90, ResoAST, (cl  ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x89 t11], [])
(x91, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x92, Iten2AST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3)))))), [], [])
(x93, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x90 x91 x92 x81 x88], [])
(x94, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x87 x93], [])
(x95, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [], [])
(x96, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))), [ x95 x93 x88], [])
(x97, Iten2AST, (cl  ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_0)) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [], [])
(x98, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ x97 x94 x88], [])
(x99, Equp2AST, (cl  ((not ((ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) = (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))) ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(x100, ResoAST, (cl  ((not (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))))) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ x99 t11], [])
(t14, ResoAST, (cl  (((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x100 x96 x98], [])
(x102, Equn1AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x103, Equn2AST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x101, ResoAST, (cl  (((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) = (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x102 x103], [])
(x104, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x109, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(x105, Equp1AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [], [])
(x106, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))), [ x105 t14], [])
(x107, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(x108, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x106 x107], [])
(x110, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x104 x109 x108], [])
(x111, Equn2AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x112, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x110 x111], [])
(x113, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x118, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(x114, Equp2AST, (cl  ((not ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) = (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [])
(x115, ResoAST, (cl  ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x114 t14], [])
(x116, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(x117, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x115 x116], [])
(x119, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x113 x118 x117], [])
(x120, Equn1AST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [])
(x121, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (ite  op_0 (ite  op_1      = false
     : bool
(((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x119 x120], [])
(t15, ResoAST, (cl  (((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x112 x121], [])
(t16, Equp2AST, (cl  ((not ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) = (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(t17, ThresoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t6 t15 t16], [])
(x148, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(t18, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ x148 t17], [])
(t19, Itep1AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) (op_1) (((2 * op_2) = (2 * op_3)))), [], [])
(t20, Itep2AST, (cl  ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))) ((not op_1)) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t21, Iten1AST, (cl  ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (op_1) ((not ((2 * op_2) = (2 * op_3))))), [], [])
(x149, Itep1AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) (op_0) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(t22, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (op_0) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ x149 t18], [])
(t23, Itep1AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) (op_1) (((2 * op_3) = (1 + (2 * op_2))))), [], [])
(t24, Itep2AST, (cl  ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))) ((not op_1)) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(x150, Itep2AST, (cl  ((not (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))) ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [], [])
(t25, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not op_0)) ((ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))))), [ x150 t18], [])
(x151, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2)))) (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(t26, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ x151 t17], [])
(t27, Impn1AST, (cl  ((imp  op_0 op_1)) (op_0)), [], [])
(t28, Impn2AST, (cl  ((imp  op_0 op_1)) ((not op_1))), [], [])
(t29, Impn1AST, (cl  ((imp  op_1 op_0)) (op_1)), [], [])
(t30, Impn2AST, (cl  ((imp  op_1 op_0)) ((not op_0))), [], [])
(x152, AndnAST, (cl  ((and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))) ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [], [])
(t31, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (imp  op_0 op_1))) ((not (imp  op_1 op_0))) ((not (op_2 = op_3)))), [ x152 t26], [])
(t32, LageAST, (cl  (((2 * op_2) <= (2 * op_3))) (((2 * op_3) <= (2 * op_2)))), [], [ 1 1])
(t33, LageAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 1 1])
(t34, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) <= (2 * op_3)))) (((2 * op_3) <= (2 * op_2)))), [], [])
(t36, ResoAST, (cl  (((2 * op_3) <= (2 * op_2))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t34 t19 t20 t33 t32], [])
(t37, LadeAST, (cl  ((or  (op_2 = op_3) (not (op_2 <= op_3)) (not (op_3 <= op_2))))), [], [])
(t38, OrAST, (cl  ((op_2 = op_3)) ((not (op_2 <= op_3))) ((not (op_3 <= op_2)))), [ t37], [])
(t39, LageAST, (cl  ((not ((2 * op_3) <= (2 * op_2)))) ((op_3 <= op_2))), [], [ 1 2])
(t40, LageAST, (cl  ((not ((2 * op_2) <= (2 * op_3)))) ((op_2 <= op_3))), [], [ 1 2])
(t41, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3))))) (((2 * op_2) = (1 + (2 * op_3))))), [], [])
(t42, EqcoAST, (cl  ((not (1 = 1))) ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [], [])
(t43, EqreAST, (cl  ((1 = 1))), [], [])
(t44, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) (((1 + (2 * op_2)) = (1 + (2 * op_3))))), [ t42 t43], [])
(t45, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) = (1 + (2 * op_2))))) (((2 * op_2) = (1 + (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3))))), [ t41 t44], [])
(t47, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (((2 * op_2) = (1 + (2 * op_3)))) (op_1) ((not (imp  op_1 op_0))) ((not (op_2 <= op_3))) ((not (ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3)))))), [ t45 t23 t25 t27 t31 t38 t39 t19 t36], [])
(t48, EqcoAST, (cl  ((not (2 = 2))) ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [], [])
(t49, EqreAST, (cl  ((2 = 2))), [], [])
(t50, ThresoAST, (cl  ((not (op_2 = op_3))) (((2 * op_2) = (2 * op_3)))), [ t48 t49], [])
(t51, LageAST, (cl  ((op_3 <= op_2)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 -1])
(t52, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (op_2 <= op_3))) (op_1) (((2 * op_2) = (1 + (2 * op_3)))) ((not (imp  op_1 op_0)))), [ t51 t38 t50 t23 t25 t22 t21 t47], [])
(t53, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_3) = (1 + (2 * op_2)))))), [], [ 2 1])
(t54, EqcpAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2)))) (((2 * op_2) <= (2 * op_3)))), [], [])
(t56, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (op_1) ((op_2 <= op_3))), [ t54 t19 t22 t25 t23 t53 t32 t40], [])

(t58, EqcpAST, (cl  ((not ((2 * op_3) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2))))), [], [])
(t59, EqtrAST, (cl  ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3))))), [], [])
(t60, ThresoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) (((2 * op_3) = (1 + (2 * op_3)))) ((not (op_2 = op_3)))), [ t59 t50], [])
(t61, ThresoAST, (cl  ((not ((2 * op_2) = (2 * op_2)))) (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t58 t60], [])
(t62, EqreAST, (cl  (((2 * op_2) = (2 * op_2)))), [], [])

(t57, LageAST, (cl  ((not (op_2 <= op_3))) ((not ((1 + (2 * op_3)) <= (2 * op_2))))), [], [ 2 1])
(t63, ThresoAST, (cl  (((1 + (2 * op_3)) <= (2 * op_2))) ((not ((2 * op_3) <= (2 * op_2)))) ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not (op_2 = op_3)))), [ t61 t62], [])
----------------------
									(not (op_2 <= op_3))		(not ((2 * op_3) <= (2 * op_2)))		(not ((2 * op_2) = (1 + (2 * op_3)))) 	(not (op_2 = op_3))
; haven't checked all the resolutions from t64 after the process_subproof, which is where the problem seems to be

(t64, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (op_1)), 
[ t57 t63 t38 t39 t33 t52 t56 t29], [])
(t65, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((imp  op_0 op_1))), [ t28 t64], [])
(t66, ResoAST, (cl  ((not ((2 * op_2) = (1 + (2 * op_3))))) ((not ((2 * op_2) = (2 * op_3))))), [ t63 t38 t57 t40 t54 t39 t33], [])
(t67, ResoAST, (cl  ((op_2 = op_3)) ((not ((2 * op_2) = (2 * op_3)))) ((not ((2 * op_3) <= (2 * op_2))))), [ t40 t38 t54 t39], [])
(t68, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not ((2 * op_2) = (2 * op_3))))), [ t34 t32 t67 t31 t30 t22 t20 t66 t65 t64], [])
(t69, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (op_2 = op_3)))), [ t50 t68], [])
(t70, LageAST, (cl  ((op_3 <= op_2)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 1])
(t71, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (((2 * op_3) <= (2 * op_2)))), [ t70 t24 t25 t38 t22 t40 t36 t32 t64 t69], [])
(t72, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((op_3 <= op_2))), [ t39 t71], [])
(t73, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (op_2 <= op_3)))), [ t38 t72 t69], [])
(t74, LageAST, (cl  ((op_2 <= op_3)) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t75, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not ((1 + (2 * op_2)) = (1 + (2 * op_3)))))), [ t74 t73], [])
(t76, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (ite  op_1 ((1 + (2 * op_2)) = (1 + (2 * op_3))) ((2 * op_3) = (1 + (2 * op_2))))))), [ t24 t75 t64], [])
(t77, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not op_0))), [ t25 t76], [])
(t78, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((ite  op_1 ((2 * op_2) = (1 + (2 * op_3))) ((2 * op_2) = (2 * op_3))))), [ t22 t77], [])
(t79, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (((2 * op_2) = (1 + (2 * op_3))))), [ t20 t78 t64], [])
(t80, LageAST, (cl  ((op_2 <= op_3)) ((not ((2 * op_2) = (1 + (2 * op_3)))))), [], [ 2 -1])
(t81, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))))), [ t80 t79 t73], [])
(x145, AndpAST, (cl  ((not (and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [ 0])
(x144, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ t81 x145], [])
(x130, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [ 0])
(x131, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x130 x144], [])
(x132, AndpAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [ 1])
(x133, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ x132 x144], [])
(x134, ImppAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))), [], [])
(x135, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x134 x131 x133], [])
(x146, AndpAST, (cl  ((not (and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [ 1])
(x147, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ t81 x146], [])
(x153, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))))), [ x135 x147], [])
(x155, AndpAST, (cl  ((not (and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))))) ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [ 0])
(x154, ResoAST, (cl  ((not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x153 x155], [])
(x123, Impn1AST, (cl  ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [], [])
(x125, ResoAST, (cl  ((ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))), [ x123 x154], [])
(x124, Impn2AST, (cl  ((imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [], [])
(x126, ResoAST, (cl  ((not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))), [ x124 x154], [])
(x127, AndnAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))) ((not (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))))) ((not (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [], [])
(x128, ResoAST, (cl  ((and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))), [ x127 x125 x126], [])
(x156, AndpAST, (cl  ((not (and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))))))) ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [], [ 1])
(x157, ResoAST, (cl  ((not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))), [ x153 x156], [])
(x158, ResoAST, (cl ), [ x128 x157], [])



;reprinting the problematic step here:
(t64, ResoAST, (cl  ((and  (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) ((and  (and  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (not (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3)))) (not (not (imp  (ite  op_0 (ite  op_1 (((2 * op_2) + 1) = ((2 * op_3) + 1)) (((2 * op_2) + 1) = (2 * op_3))) (ite  op_1 ((2 * op_2) = ((2 * op_3) + 1)) ((2 * op_2) = (2 * op_3)))) (and  (imp  op_0 op_1) (imp  op_1 op_0) (op_2 = op_3))))))) (op_1)), 
[ t57 t63 t38 t39 t33 t52 t56 t29], [])