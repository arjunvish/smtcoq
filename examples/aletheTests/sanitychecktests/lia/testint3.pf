(assume h1 (> x 0))
(assume h2 (not (> (+ x 1) 0)))
(step t3 (cl (= (> x 0) (not (<= x 0)))) :rule comp_simplify)
(step t4 (cl (not (= (> x 0) (not (<= x 0)))) (not (> x 0)) (not (<= x 0))) :rule equiv_pos2)
(step t5 (cl (not (<= x 0))) :rule th_resolution :premises (h1 t3 t4))
(step t6 (cl (= (+ x 1) (+ 1 x))) :rule sum_simplify)
(step t7 (cl (= (> (+ x 1) 0) (> (+ 1 x) 0))) :rule cong :premises (t6))
(step t8 (cl (= (> (+ 1 x) 0) (not (<= (+ 1 x) 0)))) :rule comp_simplify)
(step t9 (cl (= (> (+ x 1) 0) (not (<= (+ 1 x) 0)))) :rule trans :premises (t7 t8))
(step t10 (cl (= (not (> (+ x 1) 0)) (not (not (<= (+ 1 x) 0))))) :rule cong :premises (t9))
(step t11 (cl (= (not (not (<= (+ 1 x) 0))) (<= (+ 1 x) 0))) :rule not_simplify)
(step t12 (cl (= (not (> (+ x 1) 0)) (<= (+ 1 x) 0))) :rule trans :premises (t10 t11))
(step t13 (cl (not (= (not (> (+ x 1) 0)) (<= (+ 1 x) 0))) (not (not (> (+ x 1) 0))) (<= (+ 1 x) 0)) :rule equiv_pos2)
(step t14 (cl (not (not (not (> (+ x 1) 0)))) (> (+ x 1) 0)) :rule not_not)
(step t15 (cl (not (= (not (> (+ x 1) 0)) (<= (+ 1 x) 0))) (> (+ x 1) 0) (<= (+ 1 x) 0)) :rule th_resolution :premises (t14 t13))
(step t16 (cl (<= (+ 1 x) 0)) :rule th_resolution :premises (h2 t12 t15))
(step t17 (cl (not (<= (+ 1 x) 0)) (<= x 0)) :rule la_generic :args (1 1))
(step t18 (cl) :rule resolution :premises (t17 t5 t16))
