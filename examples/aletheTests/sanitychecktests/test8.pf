(assume h1 (not (=> (= op_0 (+ op_1 1)) (= (op_2 op_1) (op_2 (- op_0 1))))))
(step t2 (cl (= (not (=> (= op_0 (+ op_1 1)) (= (op_2 op_1) (op_2 (- op_0 1))))) (and (= op_0 (+ op_1 1)) (not (= (op_2 op_1) (op_2 (- op_0 1))))))) :rule bool_simplify)
(step t3 (cl (not (= (not (=> (= op_0 (+ op_1 1)) (= (op_2 op_1) (op_2 (- op_0 1))))) (and (= op_0 (+ op_1 1)) (not (= (op_2 op_1) (op_2 (- op_0 1))))))) (not (not (=> (= op_0 (+ op_1 1)) (= (op_2 op_1) (op_2 (- op_0 1)))))) (and (= op_0 (+ op_1 1)) (not (= (op_2 op_1) (op_2 (- op_0 1)))))) :rule equiv_pos2)
(step t4 (cl (not (not (not (=> (= op_0 (+ op_1 1)) (= (op_2 op_1) (op_2 (- op_0 1))))))) (=> (= op_0 (+ op_1 1)) (= (op_2 op_1) (op_2 (- op_0 1))))) :rule not_not)
(step t5 (cl (not (= (not (=> (= op_0 (+ op_1 1)) (= (op_2 op_1) (op_2 (- op_0 1))))) (and (= op_0 (+ op_1 1)) (not (= (op_2 op_1) (op_2 (- op_0 1))))))) (=> (= op_0 (+ op_1 1)) (= (op_2 op_1) (op_2 (- op_0 1)))) (and (= op_0 (+ op_1 1)) (not (= (op_2 op_1) (op_2 (- op_0 1)))))) :rule th_resolution :premises (t4 t3))
(step t6 (cl (and (= op_0 (+ op_1 1)) (not (= (op_2 op_1) (op_2 (- op_0 1)))))) :rule th_resolution :premises (h1 t2 t5))
(step t7 (cl (= (+ op_1 1) (+ 1 op_1))) :rule sum_simplify)
(step t8 (cl (= (= op_0 (+ op_1 1)) (= op_0 (+ 1 op_1)))) :rule cong :premises (t7))
(step t9 (cl (= (and (= op_0 (+ op_1 1)) (not (= (op_2 op_1) (op_2 (- op_0 1))))) (and (= op_0 (+ 1 op_1)) (not (= (op_2 op_1) (op_2 (- op_0 1))))))) :rule cong :premises (t8))
(step t10 (cl (not (= (and (= op_0 (+ op_1 1)) (not (= (op_2 op_1) (op_2 (- op_0 1))))) (and (= op_0 (+ 1 op_1)) (not (= (op_2 op_1) (op_2 (- op_0 1))))))) (not (and (= op_0 (+ op_1 1)) (not (= (op_2 op_1) (op_2 (- op_0 1)))))) (and (= op_0 (+ 1 op_1)) (not (= (op_2 op_1) (op_2 (- op_0 1)))))) :rule equiv_pos2)
(step t11 (cl (and (= op_0 (+ 1 op_1)) (not (= (op_2 op_1) (op_2 (- op_0 1)))))) :rule th_resolution :premises (t6 t9 t10))
(step t12 (cl (= op_0 (+ 1 op_1))) :rule and :premises (t11))
(step t13 (cl (not (= (op_2 op_1) (op_2 (- op_0 1))))) :rule and :premises (t11))
(step t14 (cl (not (= op_1 (- op_0 1))) (= (op_2 op_1) (op_2 (- op_0 1)))) :rule eq_congruent)
(step t15 (cl (not (= op_1 (- op_0 1)))) :rule resolution :premises (t14 t13))
(step t16 (cl (or (= op_1 (- op_0 1)) (not (<= op_1 (- op_0 1))) (not (<= (- op_0 1) op_1)))) :rule la_disequality)
(step t17 (cl (= op_1 (- op_0 1)) (not (<= op_1 (- op_0 1))) (not (<= (- op_0 1) op_1))) :rule or :premises (t16))
(step t18 (cl (not (<= op_1 (- op_0 1))) (not (<= (- op_0 1) op_1))) :rule resolution :premises (t17 t15))
(step t19 (cl (<= (- op_0 1) op_1) (not (= op_0 (+ 1 op_1)))) :rule la_generic :args (1 (- 1)))
(step t20 (cl (<= (- op_0 1) op_1)) :rule resolution :premises (t19 t12))
(step t21 (cl (not (<= op_1 (- op_0 1)))) :rule resolution :premises (t18 t20))
(step t22 (cl (<= op_1 (- op_0 1)) (not (= op_0 (+ 1 op_1)))) :rule la_generic :args (1 1))
(step t23 (cl) :rule resolution :premises (t22 t12 t21))
