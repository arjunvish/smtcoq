(assume a0 (= x y))
(assume a1 (= a b))
(assume a2 (not (= (and x true a) (and y true b))))
(step t1 (cl (not (= (not (= (and x true a) (and y true b))) false)) (not (not (= (and x true a) (and y true b)))) false) :rule equiv_pos2)
(step t2 (cl (= (and x true a) (and x a))) :rule all_simplify :args (and_simplify2 (cvc5_nary_op x) (cvc5_nary_op a)))
(step t3 (cl (= (and y true b) (and y b))) :rule all_simplify :args (and_simplify2 (cvc5_nary_op y) (cvc5_nary_op b)))
(step t4 (cl (= (= (and x true a) (and y true b)) (= (and x a) (and y b)))) :rule cong :premises (t2 t3))
(step t5 (cl (= (not (= (and x true a) (and y true b))) (not (= (and x a) (and y b))))) :rule cong :premises (t4))
(step t6 (cl (and (= a b) (= x y)) (not (= a b)) (not (= x y))) :rule and_neg)
(step t7 (cl (and (= a b) (= x y))) :rule resolution :premises (t6 a1 a0))
(step t8 (cl (= x y)) :rule and :premises (t7))
(step t9 (cl (= a b)) :rule and :premises (t7))
(step t10 (cl (= (and x a) (and y b))) :rule cong :premises (t8 t9))
(step t11 (cl (= (and y b) (and y b))) :rule refl)
(step t12 (cl (= (= (and x a) (and y b)) (= (and y b) (and y b)))) :rule cong :premises (t10 t11))
(step t13 (cl (= (not (= (and x a) (and y b))) (not (= (and y b) (and y b))))) :rule cong :premises (t12))
(step t14 (cl (= (= (and y b) (and y b)) (and (=> (and y b) (and y b)) (=> (and y b) (and y b))))) :rule all_simplify :args (connective_def2 (and y b) (and y b)))
(step t15 (cl (= (and (=> (and y b) (and y b)) (=> (and y b) (and y b))) (=> (and y b) (and y b)))) :rule all_simplify :args (and_simplify3 (=> (and y b) (and y b)) (cvc5_nary_op) (cvc5_nary_op) (cvc5_nary_op)))
(step t16 (cl (= (=> (and y b) (and y b)) true)) :rule all_simplify :args (implies_simplify6 (and y b)))
(step t17 (cl (= (and (=> (and y b) (and y b)) (=> (and y b) (and y b))) true)) :rule trans :premises (t15 t16))
(step t18 (cl (= (= (and y b) (and y b)) true)) :rule trans :premises (t14 t17))
(step t19 (cl (= (not (= (and y b) (and y b))) (not true))) :rule cong :premises (t18))
(step t20 (cl (= (not true) false)) :rule not_simplify)
(step t21 (cl (= (not (= (and y b) (and y b))) false)) :rule trans :premises (t19 t20))
(step t22 (cl (= (not (= (and x a) (and y b))) false)) :rule trans :premises (t13 t21))
(step t23 (cl (= (not (= (and x true a) (and y true b))) false)) :rule trans :premises (t5 t22))
(step t24 (cl false) :rule resolution :premises (t1 t23 a2))
(step t25 (cl (not false)) :rule false)
(step t26 (cl) :rule resolution :premises (t24 t25))
