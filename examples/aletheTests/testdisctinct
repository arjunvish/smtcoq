(assume h1 (not (= (distinct 1) true)))
(step t2 (cl (= (distinct 1) true)) :rule distinct_elim)
(step t3 (cl (= (= (distinct 1) true) (= true true))) :rule cong :premises (t2))
(step t4 (cl (= (not (= (distinct 1) true)) (not (= true true)))) :rule cong :premises (t3))
(step t5 (cl (not (= (not (= (distinct 1) true)) (not (= true true)))) (not (not (= (distinct 1) true))) (not (= true true))) :rule equiv_pos2)
(step t6 (cl (not (not (not (= (distinct 1) true)))) (= (distinct 1) true)) :rule not_not)
(step t7 (cl (not (= (not (= (distinct 1) true)) (not (= true true)))) (= (distinct 1) true) (not (= true true))) :rule th_resolution :premises (t6 t5))
(step t8 (cl (not (= true true))) :rule th_resolution :premises (h1 t4 t7))
(step t9 (cl (= (= true true) true)) :rule equiv_simplify)
(step t10 (cl (= (not (= true true)) (not true))) :rule cong :premises (t9))
(step t11 (cl (= (not true) false)) :rule not_simplify)
(step t12 (cl (= (not (= true true)) false)) :rule trans :premises (t10 t11))
(step t13 (cl (not (= (not (= true true)) false)) (not (not (= true true))) false) :rule equiv_pos2)
(step t14 (cl (not (not (not (= true true)))) (= true true)) :rule not_not)
(step t15 (cl (not (= (not (= true true)) false)) (= true true) false) :rule th_resolution :premises (t14 t13))
(step t16 (cl false) :rule th_resolution :premises (t8 t12 t15))
(step t17 (cl (not false)) :rule false)
(step t18 (cl) :rule resolution :premises (t16 t17))

(assume h1 (not (= (distinct 1) true)))
(step t2 (cl (= (distinct 1) true)) :rule distinct_elim)
(step t3 (cl) :rule resolution :premises (h1 t2))