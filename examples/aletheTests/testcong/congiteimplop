Certif before preprocessing: 
(h1, AssumeAST, (cl  ((b = y))), [], [])
(h2, AssumeAST, (cl  ((c = z))), [], [])
(h3, AssumeAST, (cl  ((not ((ite  a b c) = (ite  a y z))))), [], [])
(t4, CongAST, (cl  (((ite  a b c) = (ite  a y z)))), [ h1 h2], [])
(t5, ResoAST, (cl ), [ h3 t4], [])

Certif after storing shared terms: 
(h1, AssumeAST, (cl  ((b = y))), [], [])
(h2, AssumeAST, (cl  ((c = z))), [], [])
(h3, AssumeAST, (cl  ((not ((ite  a b c) = (ite  a y z))))), [], [])
(t4, CongAST, (cl  (((ite  a b c) = (ite  a y z)))), [ h1 h2], [])
(t5, ResoAST, (cl ), [ h3 t4], [])

Certif after process_fins: 
(h1, AssumeAST, (cl  ((b = y))), [], [])
(h2, AssumeAST, (cl  ((c = z))), [], [])
(h3, AssumeAST, (cl  ((not ((ite  a b c) = (ite  a y z))))), [], [])
(t4, CongAST, (cl  (((ite  a b c) = (ite  a y z)))), [ h1 h2], [])
(t5, ResoAST, (cl ), [ h3 t4], [])

Certif after process_hole: 
(h1, AssumeAST, (cl  ((b = y))), [], [])
(h2, AssumeAST, (cl  ((c = z))), [], [])
(h3, AssumeAST, (cl  ((not ((ite  a b c) = (ite  a y z))))), [], [])
(t4, CongAST, (cl  (((ite  a b c) = (ite  a y z)))), [ h1 h2], [])
(t5, ResoAST, (cl ), [ h3 t4], [])

Certif after process_notnot: 
(h1, AssumeAST, (cl  ((b = y))), [], [])
(h2, AssumeAST, (cl  ((c = z))), [], [])
(h3, AssumeAST, (cl  ((not ((ite  a b c) = (ite  a y z))))), [], [])
(t4, CongAST, (cl  (((ite  a b c) = (ite  a y z)))), [ h1 h2], [])
(t5, ResoAST, (cl ), [ h3 t4], [])

Certif after process_same: 
(h1, AssumeAST, (cl  ((b = y))), [], [])
(h2, AssumeAST, (cl  ((c = z))), [], [])
(h3, AssumeAST, (cl  ((not ((ite  a b c) = (ite  a y z))))), [], [])
(t4, CongAST, (cl  (((ite  a b c) = (ite  a y z)))), [ h1 h2], [])
(t5, ResoAST, (cl ), [ h3 t4], [])

Certif after process_cong: 
(h1, AssumeAST, (cl  ((b = y))), [], [])
(h2, AssumeAST, (cl  ((c = z))), [], [])
(h3, AssumeAST, (cl  ((not ((ite  a b c) = (ite  a y z))))), [], [])
(x4, Equp2AST, (cl  ((not (c = z))) ((not c)) (z)), [], [])
(x5, ResoAST, (cl  ((not c)) (z)), [ x4 h2], [])
(x6, Itep1AST, (cl  ((not (ite  a b c))) (a) (c)), [], [])
(x7, Iten1AST, (cl  ((ite  a y z)) (a) ((not z))), [], [])
(x8, Equn2AST, (cl  (((ite  a b c) = (ite  a y z))) ((ite  a b c)) ((ite  a y z))), [], [])
(x9, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((ite  a y z)) (a) (a)), [ x5 x6 x7 x8], [])
(x10, Equp1AST, (cl  ((not (c = z))) (c) ((not z))), [], [])
(x11, ResoAST, (cl  (c) ((not z))), [ x10 h2], [])
(x12, Equp1AST, (cl  ((not (a = a))) (a) ((not a))), [], [])
(x13, ResoAST, (cl  (a) ((not a))), [ x12 x1], [])
(x14, Iten1AST, (cl  ((ite  a b c)) (a) ((not c))), [], [])
(x15, Itep1AST, (cl  ((not (ite  a y z))) (a) (z)), [], [])
(x16, Equn1AST, (cl  (((ite  a b c) = (ite  a y z))) ((not (ite  a b c))) ((not (ite  a y z)))), [], [])
(x17, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) (a)), [ x11 x14 x15 x16 x9 x13], [])
(x18, Equp2AST, (cl  ((not (a = a))) ((not a)) (a)), [], [])
(x19, ResoAST, (cl  ((not a)) (a)), [ x18 x1], [])
(x20, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) (a)), [ x19 x17], [])
(x21, Equp1AST, (cl  ((not (b = y))) (b) ((not y))), [], [])
(x22, ResoAST, (cl  (b) ((not y))), [ x21 h1], [])
(x23, Itep2AST, (cl  ((not (ite  a y z))) ((not a)) (y)), [], [])
(x24, Iten2AST, (cl  ((ite  a b c)) ((not a)) ((not b))), [], [])
(x25, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((ite  a b c))), [ x22 x23 x24 x8 x20 x17], [])
(x26, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((not (ite  a y z)))), [ x16 x25], [])
(x27, Itep2AST, (cl  ((not (ite  a b c))) ((not a)) (b)), [], [])
(x28, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) (b)), [ x27 x25 x17], [])
(x29, Iten2AST, (cl  ((ite  a y z)) ((not a)) ((not y))), [], [])
(x30, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((not y))), [ x29 x26 x20], [])
(x31, Equp2AST, (cl  ((not (b = y))) ((not b)) (y)), [], [])
(x32, ResoAST, (cl  ((not b)) (y)), [ x31 h1], [])
(t4, ResoAST, (cl  (((ite  a b c) = (ite  a y z)))), [ x32 x28 x30], [])
(t5, ResoAST, (cl ), [ h3 t4], [])

Certif after process_trans: 
(h1, AssumeAST, (cl  ((b = y))), [], [])
(h2, AssumeAST, (cl  ((c = z))), [], [])
(h3, AssumeAST, (cl  ((not ((ite  a b c) = (ite  a y z))))), [], [])
(x4, Equp2AST, (cl  ((not (c = z))) ((not c)) (z)), [], [])
(x5, ResoAST, (cl  ((not c)) (z)), [ x4 h2], [])
(x6, Itep1AST, (cl  ((not (ite  a b c))) (a) (c)), [], [])
(x7, Iten1AST, (cl  ((ite  a y z)) (a) ((not z))), [], [])
(x8, Equn2AST, (cl  (((ite  a b c) = (ite  a y z))) ((ite  a b c)) ((ite  a y z))), [], [])
(x9, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((ite  a y z)) (a) (a)), [ x5 x6 x7 x8], [])
(x10, Equp1AST, (cl  ((not (c = z))) (c) ((not z))), [], [])
(x11, ResoAST, (cl  (c) ((not z))), [ x10 h2], [])
(x12, Equp1AST, (cl  ((not (a = a))) (a) ((not a))), [], [])
(x13, ResoAST, (cl  (a) ((not a))), [ x12 x1], [])
(x14, Iten1AST, (cl  ((ite  a b c)) (a) ((not c))), [], [])
(x15, Itep1AST, (cl  ((not (ite  a y z))) (a) (z)), [], [])
(x16, Equn1AST, (cl  (((ite  a b c) = (ite  a y z))) ((not (ite  a b c))) ((not (ite  a y z)))), [], [])
(x17, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) (a)), [ x11 x14 x15 x16 x9 x13], [])
(x18, Equp2AST, (cl  ((not (a = a))) ((not a)) (a)), [], [])
(x19, ResoAST, (cl  ((not a)) (a)), [ x18 x1], [])
(x20, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) (a)), [ x19 x17], [])
(x21, Equp1AST, (cl  ((not (b = y))) (b) ((not y))), [], [])
(x22, ResoAST, (cl  (b) ((not y))), [ x21 h1], [])
(x23, Itep2AST, (cl  ((not (ite  a y z))) ((not a)) (y)), [], [])
(x24, Iten2AST, (cl  ((ite  a b c)) ((not a)) ((not b))), [], [])
(x25, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((ite  a b c))), [ x22 x23 x24 x8 x20 x17], [])
(x26, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((not (ite  a y z)))), [ x16 x25], [])
(x27, Itep2AST, (cl  ((not (ite  a b c))) ((not a)) (b)), [], [])
(x28, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) (b)), [ x27 x25 x17], [])
(x29, Iten2AST, (cl  ((ite  a y z)) ((not a)) ((not y))), [], [])
(x30, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((not y))), [ x29 x26 x20], [])
(x31, Equp2AST, (cl  ((not (b = y))) ((not b)) (y)), [], [])
(x32, ResoAST, (cl  ((not b)) (y)), [ x31 h1], [])
(t4, ResoAST, (cl  (((ite  a b c) = (ite  a y z)))), [ x32 x28 x30], [])
(t5, ResoAST, (cl ), [ h3 t4], [])

Certif after process_simplify: 
(h1, AssumeAST, (cl  ((b = y))), [], [])
(h2, AssumeAST, (cl  ((c = z))), [], [])
(h3, AssumeAST, (cl  ((not ((ite  a b c) = (ite  a y z))))), [], [])
(x4, Equp2AST, (cl  ((not (c = z))) ((not c)) (z)), [], [])
(x5, ResoAST, (cl  ((not c)) (z)), [ x4 h2], [])
(x6, Itep1AST, (cl  ((not (ite  a b c))) (a) (c)), [], [])
(x7, Iten1AST, (cl  ((ite  a y z)) (a) ((not z))), [], [])
(x8, Equn2AST, (cl  (((ite  a b c) = (ite  a y z))) ((ite  a b c)) ((ite  a y z))), [], [])
(x9, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((ite  a y z)) (a) (a)), [ x5 x6 x7 x8], [])
(x10, Equp1AST, (cl  ((not (c = z))) (c) ((not z))), [], [])
(x11, ResoAST, (cl  (c) ((not z))), [ x10 h2], [])
(x12, Equp1AST, (cl  ((not (a = a))) (a) ((not a))), [], [])
(x13, ResoAST, (cl  (a) ((not a))), [ x12 x1], [])
(x14, Iten1AST, (cl  ((ite  a b c)) (a) ((not c))), [], [])
(x15, Itep1AST, (cl  ((not (ite  a y z))) (a) (z)), [], [])
(x16, Equn1AST, (cl  (((ite  a b c) = (ite  a y z))) ((not (ite  a b c))) ((not (ite  a y z)))), [], [])
(x17, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) (a)), [ x11 x14 x15 x16 x9 x13], [])
(x18, Equp2AST, (cl  ((not (a = a))) ((not a)) (a)), [], [])
(x19, ResoAST, (cl  ((not a)) (a)), [ x18 x1], [])
(x20, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) (a)), [ x19 x17], [])
(x21, Equp1AST, (cl  ((not (b = y))) (b) ((not y))), [], [])
(x22, ResoAST, (cl  (b) ((not y))), [ x21 h1], [])
(x23, Itep2AST, (cl  ((not (ite  a y z))) ((not a)) (y)), [], [])
(x24, Iten2AST, (cl  ((ite  a b c)) ((not a)) ((not b))), [], [])
(x25, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((ite  a b c))), [ x22 x23 x24 x8 x20 x17], [])
(x26, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((not (ite  a y z)))), [ x16 x25], [])
(x27, Itep2AST, (cl  ((not (ite  a b c))) ((not a)) (b)), [], [])
(x28, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) (b)), [ x27 x25 x17], [])
(x29, Iten2AST, (cl  ((ite  a y z)) ((not a)) ((not y))), [], [])
(x30, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((not y))), [ x29 x26 x20], [])
(x31, Equp2AST, (cl  ((not (b = y))) ((not b)) (y)), [], [])
(x32, ResoAST, (cl  ((not b)) (y)), [ x31 h1], [])
(t4, ResoAST, (cl  (((ite  a b c) = (ite  a y z)))), [ x32 x28 x30], [])
(t5, ResoAST, (cl ), [ h3 t4], [])

Certif after process_proj: 
(h1, AssumeAST, (cl  ((b = y))), [], [])
(h2, AssumeAST, (cl  ((c = z))), [], [])
(h3, AssumeAST, (cl  ((not ((ite  a b c) = (ite  a y z))))), [], [])
(x4, Equp2AST, (cl  ((not (c = z))) ((not c)) (z)), [], [])
(x5, ResoAST, (cl  ((not c)) (z)), [ x4 h2], [])
(x6, Itep1AST, (cl  ((not (ite  a b c))) (a) (c)), [], [])
(x7, Iten1AST, (cl  ((ite  a y z)) (a) ((not z))), [], [])
(x8, Equn2AST, (cl  (((ite  a b c) = (ite  a y z))) ((ite  a b c)) ((ite  a y z))), [], [])
(x9, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((ite  a y z)) (a) (a)), [ x5 x6 x7 x8], [])
(x10, Equp1AST, (cl  ((not (c = z))) (c) ((not z))), [], [])
(x11, ResoAST, (cl  (c) ((not z))), [ x10 h2], [])
(x12, Equp1AST, (cl  ((not (a = a))) (a) ((not a))), [], [])
(x13, ResoAST, (cl  (a) ((not a))), [ x12 x1], [])
(x14, Iten1AST, (cl  ((ite  a b c)) (a) ((not c))), [], [])
(x15, Itep1AST, (cl  ((not (ite  a y z))) (a) (z)), [], [])
(x16, Equn1AST, (cl  (((ite  a b c) = (ite  a y z))) ((not (ite  a b c))) ((not (ite  a y z)))), [], [])
(x17, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) (a)), [ x11 x14 x15 x16 x9 x13], [])
(x18, Equp2AST, (cl  ((not (a = a))) ((not a)) (a)), [], [])
(x19, ResoAST, (cl  ((not a)) (a)), [ x18 x1], [])
(x20, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) (a)), [ x19 x17], [])
(x21, Equp1AST, (cl  ((not (b = y))) (b) ((not y))), [], [])
(x22, ResoAST, (cl  (b) ((not y))), [ x21 h1], [])
(x23, Itep2AST, (cl  ((not (ite  a y z))) ((not a)) (y)), [], [])
(x24, Iten2AST, (cl  ((ite  a b c)) ((not a)) ((not b))), [], [])
(x25, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((ite  a b c))), [ x22 x23 x24 x8 x20 x17], [])
(x26, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((not (ite  a y z)))), [ x16 x25], [])
(x27, Itep2AST, (cl  ((not (ite  a b c))) ((not a)) (b)), [], [])
(x28, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) (b)), [ x27 x25 x17], [])
(x29, Iten2AST, (cl  ((ite  a y z)) ((not a)) ((not y))), [], [])
(x30, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((not y))), [ x29 x26 x20], [])
(x31, Equp2AST, (cl  ((not (b = y))) ((not b)) (y)), [], [])
(x32, ResoAST, (cl  ((not b)) (y)), [ x31 h1], [])
(t4, ResoAST, (cl  (((ite  a b c) = (ite  a y z)))), [ x32 x28 x30], [])
(t5, ResoAST, (cl ), [ h3 t4], [])

Certif after process_subproof: 
(h1, AssumeAST, (cl  ((b = y))), [], [])
(h2, AssumeAST, (cl  ((c = z))), [], [])
(h3, AssumeAST, (cl  ((not ((ite  a b c) = (ite  a y z))))), [], [])
(x4, Equp2AST, (cl  ((not (c = z))) ((not c)) (z)), [], [])
(x5, ResoAST, (cl  ((not c)) (z)), [ x4 h2], [])
(x6, Itep1AST, (cl  ((not (ite  a b c))) (a) (c)), [], [])
(x7, Iten1AST, (cl  ((ite  a y z)) (a) ((not z))), [], [])
(x8, Equn2AST, (cl  (((ite  a b c) = (ite  a y z))) ((ite  a b c)) ((ite  a y z))), [], [])
(x9, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((ite  a y z)) (a) (a)), [ x5 x6 x7 x8], [])
(x10, Equp1AST, (cl  ((not (c = z))) (c) ((not z))), [], [])
(x11, ResoAST, (cl  (c) ((not z))), [ x10 h2], [])
(x12, Equp1AST, (cl  ((not (a = a))) (a) ((not a))), [], [])
(x13, ResoAST, (cl  (a) ((not a))), [ x12 x1], [])
(x14, Iten1AST, (cl  ((ite  a b c)) (a) ((not c))), [], [])
(x15, Itep1AST, (cl  ((not (ite  a y z))) (a) (z)), [], [])
(x16, Equn1AST, (cl  (((ite  a b c) = (ite  a y z))) ((not (ite  a b c))) ((not (ite  a y z)))), [], [])
(x17, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) (a)), [ x11 x14 x15 x16 x9 x13], [])
(x18, Equp2AST, (cl  ((not (a = a))) ((not a)) (a)), [], [])
(x19, ResoAST, (cl  ((not a)) (a)), [ x18 x1], [])
(x20, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) (a)), [ x19 x17], [])
(x21, Equp1AST, (cl  ((not (b = y))) (b) ((not y))), [], [])
(x22, ResoAST, (cl  (b) ((not y))), [ x21 h1], [])
(x23, Itep2AST, (cl  ((not (ite  a y z))) ((not a)) (y)), [], [])
(x24, Iten2AST, (cl  ((ite  a b c)) ((not a)) ((not b))), [], [])
(x25, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((ite  a b c))), [ x22 x23 x24 x8 x20 x17], [])
(x26, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((not (ite  a y z)))), [ x16 x25], [])
(x27, Itep2AST, (cl  ((not (ite  a b c))) ((not a)) (b)), [], [])
(x28, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) (b)), [ x27 x25 x17], [])
(x29, Iten2AST, (cl  ((ite  a y z)) ((not a)) ((not y))), [], [])
(x30, ResoAST, (cl  (((ite  a b c) = (ite  a y z))) ((not y))), [ x29 x26 x20], [])
(x31, Equp2AST, (cl  ((not (b = y))) ((not b)) (y)), [], [])
(x32, ResoAST, (cl  ((not b)) (y)), [ x31 h1], [])
(t4, ResoAST, (cl  (((ite  a b c) = (ite  a y z)))), [ x32 x28 x30], [])
(t5, ResoAST, (cl ), [ h3 t4], [])

File "./congiteimpl.v", line 5, characters 2-232:
Error:
Verit.import_trace: processing certificate
Error: VeritSyntax.Debug
Message: | VeritSyntax.mk_clause: failing at id x13 || get_clause: clause number x1 not found |
Position: Line 6 Position 1

