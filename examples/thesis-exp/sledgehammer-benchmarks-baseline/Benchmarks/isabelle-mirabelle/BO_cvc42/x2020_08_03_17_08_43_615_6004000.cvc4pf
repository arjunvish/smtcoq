(check
 ;; Declarations
(% S_v_tm_d sort
(% S_nat_fun_d sort
(% S_enat_fun_d sort
(% V_s_set_fun_d sort
(% S_s_bool_fun_fun_d sort
(% Nat_d sort
(% S_s_v_tm_s_v_tm_bool_fun_fun_s_v_tm_list_s_v_tm_list_bool_fun_fun_fun_fun_d sort
(% ta_d (term S_v_tm_d)
(% delta_d (term Nat_d)
(% gt_sym_d (term S_s_bool_fun_fun_d)
(% ground_heads_var_d (term V_s_set_fun_d)
(% gt_d (term (arrow V_s_set_fun_d (arrow S_s_bool_fun_fun_d (arrow Nat_d (arrow S_s_v_tm_s_v_tm_bool_fun_fun_s_v_tm_list_s_v_tm_list_bool_fun_fun_fun_fun_d (arrow S_enat_fun_d (arrow S_nat_fun_d (arrow S_v_tm_d (arrow S_v_tm_d Bool)))))))))
(% extf_d (term S_s_v_tm_s_v_tm_bool_fun_fun_s_v_tm_list_s_v_tm_list_bool_fun_fun_fun_fun_d)
(% arity_sym_d (term S_enat_fun_d)
(% wt_sym_d (term S_nat_fun_d)
(% t2_d (term S_v_tm_d)
(% sa_d (term S_v_tm_d)
(% arg_d (term (arrow S_v_tm_d S_v_tm_d))
(% A4 (th_holds true)
(% A0 (th_holds (not (p_app (apply _ _ (apply _ _ (apply _ _ (apply _ _ (apply _ _ (apply _ _ (apply _ _ (apply _ _ gt_d ground_heads_var_d)gt_sym_d)delta_d)extf_d)arity_sym_d)wt_sym_d)t2_d)sa_d))))
(% A1 (th_holds (= S_v_tm_d t2_d (apply _ _ arg_d ta_d)))
(% A2 (th_holds (or (p_app (apply _ _ (apply _ _ (apply _ _ (apply _ _ (apply _ _ (apply _ _ (apply _ _ (apply _ _ gt_d ground_heads_var_d)gt_sym_d)delta_d)extf_d)arity_sym_d)wt_sym_d)(apply _ _ arg_d ta_d))sa_d)) (= S_v_tm_d (apply _ _ arg_d ta_d) sa_d)))
(% A3 (th_holds (not (= S_v_tm_d t2_d sa_d)))
(: (holds cln)

 ;; Printing deferred declarations 


;; BV const letification



 ;; Printing the global let map
(@ let1 ground_heads_var_d
(@ let2 gt_sym_d
(@ let3 delta_d
(@ let4 extf_d
(@ let5 arity_sym_d
(@ let6 wt_sym_d
(@ let7 t2_d
(@ let8 sa_d
(@ let9 (p_app (apply _ _ (apply _ _ (apply _ _ (apply _ _ (apply _ _ (apply _ _ (apply _ _ (apply _ _ gt_d let1)let2)let3)let4)let5)let6)let7)let8))
(@ let10 ta_d
(@ let11 (apply _ _ arg_d let10)
(@ let12 (= S_v_tm_d let7 let11)
(@ let13 (p_app (apply _ _ (apply _ _ (apply _ _ (apply _ _ (apply _ _ (apply _ _ (apply _ _ (apply _ _ gt_d let1)let2)let3)let4)let5)let6)let11)let8))
(@ let14 (= S_v_tm_d let8 let11)
(@ let15 (= S_v_tm_d let8 let7)

 ;; Printing aliasing declarations 


 ;; Rewrites for Lemmas 

 ;; In the preprocessor we trust 
(th_let_pf _ (trust_f (iff (or let13 (= S_v_tm_d let11 let8)) (or let13 let14)))(\ .PA301
(th_let_pf _ (trust_f (iff (not (= S_v_tm_d let7 let8)) (not let15)))(\ .PA303

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom let9 (\ .v2 (\ .a2
(decl_atom let12 (\ .v3 (\ .a3
(decl_atom let13 (\ .v4 (\ .a4
(decl_atom let14 (\ .v5 (\ .a5
(decl_atom let15 (\ .v6 (\ .a6
(satlem _ _ (ast _ _ _ .a6 (\ .l13 (clausify_false (contra _ .l13 (or_elim_1 _ _ (not_not_intro _ A3) (iff_elim_1 _ _ .PA303)))))) (\ .pb7
(satlem _ _ (ast _ _ _ .a2 (\ .l5 (clausify_false (contra _ .l5 A0)))) (\ .pb4
(satlem _ _ (asf _ _ _ .a3 (\ .l6 (clausify_false (contra _ A1 .l6)))) (\ .pb5
(satlem _ _ (asf _ _ _ .a4 (\ .l8 (asf _ _ _ .a5 (\ .l10 (clausify_false (contra _ (or_elim_1 _ _ .l8 (or_elim_1 _ _ (not_not_intro _ A2) (iff_elim_1 _ _ .PA301))) .l10)))))) (\ .pb6
 ;; Theory Lemmas 

;; BB atom mapping


;; Bit-blasting definitional clauses 


 ;; Bit-blasting learned clauses 

(satlem _ _ (ast _ _ _ .a5 (\ .l11 (asf _ _ _ .a6 (\ .l12 (ast _ _ _ .a3 (\ .l7  ;; UF Theory Lemma 
;;(not (= sa_d (arg_d ta_d))) (= sa_d t2_d) (not (= t2_d (arg_d ta_d))) 
(clausify_false (contra _ (trans _ _ _ _ .l11 (symm _ _ _ .l7)) .l12))
))))))( \ .lemc10
(satlem _ _ (ast _ _ _ .a4 (\ .l9 (ast _ _ _ .a3 (\ .l7 (asf _ _ _ .a2 (\ .l4  ;; UF Theory Lemma 
;;(not (gt_d ground_heads_var_d gt_sym_d delta_d extf_d arity_sym_d wt_sym_d (arg_d ta_d) sa_d)) (not (= t2_d (arg_d ta_d))) (gt_d ground_heads_var_d gt_sym_d delta_d extf_d arity_sym_d wt_sym_d t2_d sa_d) 
(clausify_false (contra _ (trans _ _ _ _ (symm _ _ _ (trans _ _ _ _ (symm _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ gt_d) (refl _ let1)) (refl _ let2)) (refl _ let3)) (refl _ let4)) (refl _ let5)) (refl _ let6)) (symm _ _ _ .l7)) (refl _ let8))) (pred_eq_t _ .l9))) (pred_eq_f _ .l4)) t_t_neq_f))
))))))( \ .lemc8
(satlem_simplify _ _ _ (R _ _ (Q _ _ .lemc8 .pb5 .v3) .pb4 .v2) (\ .cl9
(satlem_simplify _ _ _ (Q _ _ (R _ _ .lemc10 .pb7 .v6) .pb5 .v3) (\ .cl11
(satlem_simplify _ _ _ (R _ _ (R _ _ .pb6 .cl9 .v4) .cl11 .v5) (\ empty empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
;;
(
a2
a1
a0
a3
)
