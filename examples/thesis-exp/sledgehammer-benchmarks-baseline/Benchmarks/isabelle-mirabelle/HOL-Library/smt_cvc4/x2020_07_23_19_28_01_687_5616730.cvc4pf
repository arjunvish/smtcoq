(check
 ;; Declarations
(% A_d sort
(% A_a_a_fun_fun_d sort
(% B_a_fun_b_set_a_fun_fun_d sort
(% sum_d (term (arrow A_a_a_fun_fun_d (arrow A_d B_a_fun_b_set_a_fun_fun_d)))
(% zero_d (term A_d)
(% plus_d (term A_a_a_fun_fun_d)
(% f_d (term (arrow A_a_a_fun_fun_d (arrow A_d B_a_fun_b_set_a_fun_fun_d)))
(% A2 (th_holds true)
(% A1 (th_holds (= B_a_fun_b_set_a_fun_fun_d (apply _ _ (apply _ _ sum_d plus_d)zero_d) (apply _ _ (apply _ _ f_d plus_d)zero_d)))
(% A0 (th_holds (not (= B_a_fun_b_set_a_fun_fun_d (apply _ _ (apply _ _ f_d plus_d)zero_d) (apply _ _ (apply _ _ sum_d plus_d)zero_d))))
(: (holds cln)

 ;; Printing deferred declarations 


;; BV const letification



 ;; Printing the global let map
(@ let1 plus_d
(@ let2 zero_d
(@ let3 (apply _ _ (apply _ _ f_d let1)let2)
(@ let4 (apply _ _ (apply _ _ sum_d let1)let2)
(@ let5 (= B_a_fun_b_set_a_fun_fun_d let3 let4)

 ;; Printing aliasing declarations 


 ;; Rewrites for Lemmas 

 ;; In the preprocessor we trust 
(th_let_pf _ (trust_f (iff (= B_a_fun_b_set_a_fun_fun_d let4 let3) (= B_a_fun_b_set_a_fun_fun_d let3 let4)))(\ .PA264

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom let5 (\ .v2 (\ .a2
(satlem _ _ (ast _ _ _ .a2 (\ .l5 (clausify_false (contra _ .l5 A0)))) (\ .pb4
(satlem _ _ (asf _ _ _ .a2 (\ .l4 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ A1) (iff_elim_1 _ _ .PA264)) .l4)))) (\ .pb5
 ;; Theory Lemmas 

;; BB atom mapping


;; Bit-blasting definitional clauses 


 ;; Bit-blasting learned clauses 

(satlem_simplify _ _ _ (R _ _ .pb5 .pb4 .v2) (\ empty empty))))))))))))))))))))))))))))
;;
