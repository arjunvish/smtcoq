; --full-saturate-quant --inst-when=full-last-call --inst-no-entail --term-db-mode=relevant --multi-trigger-linear --no-statistics --random-seed=1 --lang=smt2 --continued-execution --tlimit 30000
(set-option :produce-unsat-cores true)
(set-logic AUFLIA)
(declare-sort A_d 0)
(declare-sort Unit_d 0)
(declare-sort Color_d 0)
(declare-sort A_list_d 0)
(declare-sort A_unit_rbt_d 0)
(declare-sort A_a_a_fun_fun_d 0)
(declare-fun hd_d (A_list_d) A_d)
(declare-fun ta_d () A_unit_rbt_d)
(declare-fun tl_d (A_list_d) A_list_d)
(declare-fun max_d () A_a_a_fun_fun_d)
(declare-fun x21_d () Color_d)
(declare-fun x22_d () A_unit_rbt_d)
(declare-fun x23_d () A_d)
(declare-fun x24_d () Unit_d)
(declare-fun x25_d () A_unit_rbt_d)
(declare-fun fold_d (A_a_a_fun_fun_d A_list_d A_d) A_d)
(declare-fun keys_d (A_unit_rbt_d) A_list_d)
(declare-fun empty_d () A_unit_rbt_d)
(declare-fun branch_d (Color_d A_unit_rbt_d A_d Unit_d A_unit_rbt_d) A_unit_rbt_d)
(declare-fun is_rbt_d (A_unit_rbt_d) Bool)
(assert (! (not (= (fold_d max_d (tl_d (keys_d ta_d)) (hd_d (keys_d ta_d))) (fold_d max_d (tl_d (keys_d ta_d)) (hd_d (keys_d ta_d))))) :named a0))
(assert (! (is_rbt_d ta_d) :named a1))
(assert (! (not (= ta_d empty_d)) :named a2))
(assert (! (= ta_d (branch_d x21_d x22_d x23_d x24_d x25_d)) :named a3))
(check-sat)
;(get-unsat-core)
