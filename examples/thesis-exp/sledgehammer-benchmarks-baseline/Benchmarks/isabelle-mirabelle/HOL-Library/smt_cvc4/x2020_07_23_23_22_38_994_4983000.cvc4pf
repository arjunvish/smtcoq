(check
 ;; Declarations
(% A_d sort
(% B_d sort
(% n_d (term A_d)
(% g_d (term (arrow A_d B_d))
(% m_d (term A_d)
(% f_d (term (arrow A_d B_d))
(% A3 (th_holds true)
(% A2 (th_holds (= B_d (apply _ _ f_d n_d) (apply _ _ g_d n_d)))
(% A1 (th_holds (= A_d m_d n_d))
(% A0 (th_holds (not (= B_d (apply _ _ f_d m_d) (apply _ _ g_d n_d))))
(: (holds cln)

 ;; Printing deferred declarations 


;; BV const letification



 ;; Printing the global let map
(@ let1 m_d
(@ let2 (apply _ _ f_d let1)
(@ let3 n_d
(@ let4 (apply _ _ g_d let3)
(@ let5 (= B_d let2 let4)
(@ let6 (= A_d let1 let3)
(@ let7 (apply _ _ f_d let3)
(@ let8 (= B_d let4 let7)

 ;; Printing aliasing declarations 


 ;; Rewrites for Lemmas 

 ;; In the preprocessor we trust 
(th_let_pf _ (trust_f (iff (= B_d let7 let4) (= B_d let4 let7)))(\ .PA278

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom let5 (\ .v2 (\ .a2
(decl_atom let6 (\ .v3 (\ .a3
(decl_atom let8 (\ .v4 (\ .a4
(satlem _ _ (ast _ _ _ .a2 (\ .l5 (clausify_false (contra _ .l5 A0)))) (\ .pb4
(satlem _ _ (asf _ _ _ .a3 (\ .l6 (clausify_false (contra _ A1 .l6)))) (\ .pb5
(satlem _ _ (asf _ _ _ .a4 (\ .l8 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ A2) (iff_elim_1 _ _ .PA278)) .l8)))) (\ .pb6
 ;; Theory Lemmas 

;; BB atom mapping


;; Bit-blasting definitional clauses 


 ;; Bit-blasting learned clauses 

(satlem _ _ (ast _ _ _ .a4 (\ .l9 (ast _ _ _ .a3 (\ .l7 (asf _ _ _ .a2 (\ .l4  ;; UF Theory Lemma 
;;(not (= (g_d n_d) (f_d n_d))) (not (= m_d n_d)) (= (f_d m_d) (g_d n_d)) 
(clausify_false (contra _ (trans _ _ _ _ (trans _ _ _ _ (symm _ _ _ (trans _ _ _ _ .l9 (cong _ _ _ _ _ _ (refl _ f_d) (symm _ _ _ .l7)))) .l9) (symm _ _ _ .l9)) .l4))
))))))( \ .lemc7
(satlem_simplify _ _ _ (R _ _ (Q _ _ (Q _ _ .lemc7 .pb6 .v4) .pb5 .v3) .pb4 .v2) (\ empty empty)))))))))))))))))))))))))))))))))))))))))
;;
