(check
 ;; Declarations
(% Nat_set_d sort
(% A_set_d sort
(% A_nat_fun_d sort
(% image_d (term (arrow A_nat_fun_d (arrow A_set_d Nat_set_d)))
(% s_d (term A_set_d)
(% f_d (term A_nat_fun_d)
(% inj_on_d (term (arrow A_nat_fun_d (arrow A_set_d Bool)))
(% A2 (th_holds true)
(% A1 (th_holds (p_app (apply _ _ (apply _ _ inj_on_d f_d)s_d)))
(% A0 (th_holds (not (and (p_app (apply _ _ (apply _ _ inj_on_d f_d)s_d)) (= Nat_set_d (apply _ _ (apply _ _ image_d f_d)s_d) (apply _ _ (apply _ _ image_d f_d)s_d)))))
(: (holds cln)

 ;; Printing deferred declarations 


;; BV const letification



 ;; Printing the global let map
(@ let1 f_d
(@ let2 s_d
(@ let3 (p_app (apply _ _ (apply _ _ inj_on_d let1)let2))

 ;; Printing aliasing declarations 


 ;; Rewrites for Lemmas 

 ;; In the preprocessor we trust 
(th_let_pf _ (trust_f (iff (not (and let3 (= Nat_set_d (apply _ _ (apply _ _ image_d let1)let2) (apply _ _ (apply _ _ image_d let1)let2)))) (not let3)))(\ .PA278

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom let3 (\ .v2 (\ .a2
(satlem _ _ (ast _ _ _ .a2 (\ .l5 (clausify_false (contra _ .l5 (or_elim_1 _ _ (not_not_intro _ A0) (iff_elim_1 _ _ .PA278)))))) (\ .pb4
(satlem _ _ (asf _ _ _ .a2 (\ .l4 (clausify_false (contra _ A1 .l4)))) (\ .pb5
 ;; Theory Lemmas 

;; BB atom mapping


;; Bit-blasting definitional clauses 


 ;; Bit-blasting learned clauses 

(satlem_simplify _ _ _ (R _ _ .pb5 .pb4 .v2) (\ empty empty))))))))))))))))))))))))))
;;
