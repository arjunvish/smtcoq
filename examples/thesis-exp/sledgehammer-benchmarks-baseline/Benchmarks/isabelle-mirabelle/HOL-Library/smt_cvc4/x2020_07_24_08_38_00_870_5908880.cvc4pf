(check
 ;; Declarations
(% A_list_d sort
(% A_a_a_fun_fun_d sort
(% A_d sort
(% A_unit_rbt_d sort
(% hd_d (term (arrow A_list_d A_d))
(% tl_d (term (arrow A_list_d A_list_d))
(% bot_d (term A_d)
(% keys_d (term (arrow A_unit_rbt_d A_list_d))
(% max_d (term A_a_a_fun_fun_d)
(% empty_d (term A_unit_rbt_d)
(% ta_d (term A_unit_rbt_d)
(% is_rbt_d (term (arrow A_unit_rbt_d Bool))
(% fold_d (term (arrow A_a_a_fun_fun_d (arrow A_list_d (arrow A_d A_d))))
(% A4 (th_holds true)
(% A1 (th_holds (p_app (apply _ _ is_rbt_d ta_d)))
(% A2 (th_holds (not (= A_unit_rbt_d ta_d empty_d)))
(% A0 (th_holds (not (= A_d (apply _ _ (apply _ _ (apply _ _ fold_d max_d)(apply _ _ keys_d ta_d))bot_d) (apply _ _ (apply _ _ (apply _ _ fold_d max_d)(apply _ _ tl_d (apply _ _ keys_d ta_d)))(apply _ _ hd_d (apply _ _ keys_d ta_d))))))
(% A3 (th_holds (= A_unit_rbt_d ta_d empty_d))
(: (holds cln)

 ;; Printing deferred declarations 


;; BV const letification



 ;; Printing the global let map
(@ let1 ta_d
(@ let2 empty_d
(@ let3 (= A_unit_rbt_d let1 let2)

 ;; Printing aliasing declarations 


 ;; Rewrites for Lemmas 

 ;; In the preprocessor we trust 

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom let3 (\ .v4 (\ .a4
(satlem _ _ (ast _ _ _ .a4 (\ .l9 (clausify_false (contra _ .l9 A2)))) (\ .pb6
(satlem _ _ (asf _ _ _ .a4 (\ .l8 (clausify_false (contra _ A3 .l8)))) (\ .pb7
 ;; Theory Lemmas 

;; BB atom mapping


;; Bit-blasting definitional clauses 


 ;; Bit-blasting learned clauses 

(satlem_simplify _ _ _ (R _ _ .pb7 .pb6 .v4) (\ empty empty))))))))))))))))))))))))))))))))
;;
(
a3
a2
)
