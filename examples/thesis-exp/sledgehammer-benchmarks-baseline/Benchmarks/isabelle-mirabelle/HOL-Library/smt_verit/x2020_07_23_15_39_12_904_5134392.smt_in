; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=20
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_d 0)
(declare-sort Nat_d 0)
(declare-fun n_d () Int)
(declare-fun ka_d () Nat_d)
(declare-fun abs_d (Int) A_d)
(declare-fun one_d () A_d)
(declare-fun rep_d (A_d) Int)
(declare-fun suc_d (Nat_d) Nat_d)
(declare-fun modulo_d (Int Int) Int)
(declare-fun of_nat_d (Nat_d) Int)
(declare-fun of_nat_da (Nat_d) A_d)
(assert (! (not (or (not (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))) (= (abs_d (modulo_d (of_nat_d (suc_d ka_d)) n_d)) (abs_d (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))))) :named a0))
(check-sat)
;;;;;;(get-proof)
