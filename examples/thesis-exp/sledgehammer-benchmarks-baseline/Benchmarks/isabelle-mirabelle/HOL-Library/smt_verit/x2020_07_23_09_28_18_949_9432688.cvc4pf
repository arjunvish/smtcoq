(check
 ;; Declarations
(% A_b_fun_set_d sort
(% A_b_fun_d sort
(% h_d (term A_b_fun_d)
(% bigo_d (term (arrow A_b_fun_d A_b_fun_set_d))
(% member_d (term (arrow A_b_fun_d (arrow A_b_fun_set_d Bool)))
(% g_d (term A_b_fun_d)
(% f_d (term A_b_fun_d)
(% elt_set_plus_d (term (arrow A_b_fun_d (arrow A_b_fun_set_d A_b_fun_set_d)))
(% A2 (th_holds true)
(% A1 (th_holds (p_app (apply _ _ (apply _ _ member_d f_d)(apply _ _ (apply _ _ elt_set_plus_d g_d)(apply _ _ bigo_d h_d)))))
(% A0 (th_holds (not (p_app (apply _ _ (apply _ _ member_d f_d)(apply _ _ (apply _ _ elt_set_plus_d g_d)(apply _ _ bigo_d h_d))))))
(: (holds cln)

 ;; Printing deferred declarations 


;; BV const letification



 ;; Printing the global let map
(@ let1 f_d
(@ let2 g_d
(@ let3 h_d
(@ let4 (apply _ _ bigo_d let3)
(@ let5 (apply _ _ (apply _ _ elt_set_plus_d let2)let4)
(@ let6 (p_app (apply _ _ (apply _ _ member_d let1)let5))

 ;; Printing aliasing declarations 


 ;; Rewrites for Lemmas 

 ;; In the preprocessor we trust 

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom let6 (\ .v2 (\ .a2
(satlem _ _ (ast _ _ _ .a2 (\ .l5 (clausify_false (contra _ .l5 A0)))) (\ .pb4
(satlem _ _ (asf _ _ _ .a2 (\ .l4 (clausify_false (contra _ A1 .l4)))) (\ .pb5
 ;; Theory Lemmas 

;; BB atom mapping


;; Bit-blasting definitional clauses 


 ;; Bit-blasting learned clauses 

(satlem_simplify _ _ _ (R _ _ .pb5 .pb4 .v2) (\ empty empty))))))))))))))))))))))))))))
;;
