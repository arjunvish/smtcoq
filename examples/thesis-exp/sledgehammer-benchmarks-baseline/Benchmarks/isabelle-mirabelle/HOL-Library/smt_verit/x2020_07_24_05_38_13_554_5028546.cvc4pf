(check
 ;; Declarations
(% B_d sort
(% A_d sort
(% A_b_prod_d sort
(% bot_da (term B_d)
(% bot_d (term A_d)
(% pair_d (term (arrow A_d (arrow B_d A_b_prod_d)))
(% A1 (th_holds true)
(% A0 (th_holds (not (= A_b_prod_d (apply _ _ (apply _ _ pair_d bot_d)bot_da) (apply _ _ (apply _ _ pair_d bot_d)bot_da))))
(: (holds cln)

 ;; Printing deferred declarations 


;; BV const letification



 ;; Printing the global let map
(@ let1 false

 ;; Printing aliasing declarations 


 ;; Rewrites for Lemmas 

 ;; In the preprocessor we trust 
(th_let_pf _ (trust_f (iff (not (= A_b_prod_d (apply _ _ (apply _ _ pair_d bot_d)bot_da) (apply _ _ (apply _ _ pair_d bot_d)bot_da))) false))(\ .PA235
(th_let_pf _ (trust_f (iff true (not let1)))(\ .PA266

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom let1 (\ .v1 (\ .a1
(satlem _ _ (ast _ _ _ .a1 (\ .l3 (clausify_false (contra _ .l3 (or_elim_1 _ _ (not_not_intro _ A1) (iff_elim_1 _ _ .PA266)))))) (\ .pb1
(satlem _ _ (asf _ _ _ .a1 (\ .l2 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ A0) (iff_elim_1 _ _ .PA235)) .l2)))) (\ .pb4
 ;; Theory Lemmas 

;; BB atom mapping


;; Bit-blasting definitional clauses 


 ;; Bit-blasting learned clauses 

(satlem_simplify _ _ _ (R _ _ .pb4 .pb1 .v1) (\ empty empty))))))))))))))))))))))))
;;
