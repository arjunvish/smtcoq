(check
 ;; Declarations
(% B_a_fun_d sort
(% B_b_bool_fun_fun_d sort
(% A_a_bool_fun_fun_d sort
(% eval_d (term B_a_fun_d)
(% equivp_d (term (arrow A_a_bool_fun_fun_d Bool))
(% r_d (term A_a_bool_fun_fun_d)
(% rel_fun_d (term (arrow B_b_bool_fun_fun_d (arrow A_a_bool_fun_fun_d (arrow B_a_fun_d (arrow B_a_fun_d Bool)))))
(% rel_d (term (arrow A_a_bool_fun_fun_d B_b_bool_fun_fun_d))
(% A2 (th_holds true)
(% A1 (th_holds (and (p_app (apply _ _ equivp_d r_d)) (p_app (apply _ _ (apply _ _ (apply _ _ (apply _ _ rel_fun_d (apply _ _ rel_d r_d))r_d)eval_d)eval_d))))
(% A0 (th_holds (not (p_app (apply _ _ equivp_d r_d))))
(: (holds cln)

 ;; Printing deferred declarations 


;; BV const letification



 ;; Printing the global let map
(@ let1 r_d
(@ let2 (p_app (apply _ _ equivp_d let1))
(@ let3 (apply _ _ rel_d let1)
(@ let4 eval_d
(@ let5 (p_app (apply _ _ (apply _ _ (apply _ _ (apply _ _ rel_fun_d let3)let1)let4)let4))

 ;; Printing aliasing declarations 


 ;; Rewrites for Lemmas 

 ;; In the preprocessor we trust 

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom let2 (\ .v2 (\ .a2
(decl_atom let5 (\ .v3 (\ .a3
(satlem _ _ (ast _ _ _ .a2 (\ .l5 (clausify_false (contra _ .l5 A0)))) (\ .pb4
(satlem _ _ (asf _ _ _ .a2 (\ .l4 (clausify_false (contra _ (and_elim_1 _ _ A1) .l4)))) (\ .pb5
 ;; Theory Lemmas 

;; BB atom mapping


;; Bit-blasting definitional clauses 


 ;; Bit-blasting learned clauses 

(satlem_simplify _ _ _ (R _ _ .pb5 .pb4 .v2) (\ empty empty))))))))))))))))))))))))))))))
;;
