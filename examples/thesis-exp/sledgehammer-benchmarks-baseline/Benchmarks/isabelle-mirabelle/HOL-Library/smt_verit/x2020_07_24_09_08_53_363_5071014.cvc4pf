(check
 ;; Declarations
(% A_d sort
(% A_quot_d sort
(% a_da (term A_d)
(% pick_d (term (arrow A_quot_d A_d))
(% a_d (term A_quot_d)
(% class_d (term (arrow A_d A_quot_d))
(% A2 (th_holds (= A_quot_d a_d (apply _ _ class_d a_da)))
(% A1 (th_holds (= A_quot_d (apply _ _ class_d (apply _ _ pick_d a_d)) (apply _ _ class_d a_da)))
(% A3 (th_holds true)
(% A0 (th_holds (not (= A_quot_d (apply _ _ class_d (apply _ _ pick_d a_d)) a_d)))
(: (holds cln)

 ;; Printing deferred declarations 


;; BV const letification



 ;; Printing the global let map
(@ let1 a_d
(@ let2 (apply _ _ pick_d let1)
(@ let3 (apply _ _ class_d let2)
(@ let4 a_da
(@ let5 (apply _ _ class_d let4)
(@ let6 (= A_quot_d let3 let5)
(@ let7 (= A_quot_d let1 let5)
(@ let8 (= A_quot_d let1 let3)

 ;; Printing aliasing declarations 


 ;; Rewrites for Lemmas 

 ;; In the preprocessor we trust 
(th_let_pf _ (trust_f (iff (not (= A_quot_d let3 let1)) (not let8)))(\ .PA280

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom let6 (\ .v3 (\ .a3
(decl_atom let7 (\ .v4 (\ .a4
(decl_atom let8 (\ .v2 (\ .a2
(satlem _ _ (ast _ _ _ .a2 (\ .l5 (clausify_false (contra _ .l5 (or_elim_1 _ _ (not_not_intro _ A0) (iff_elim_1 _ _ .PA280)))))) (\ .pb4
(satlem _ _ (asf _ _ _ .a3 (\ .l6 (clausify_false (contra _ A1 .l6)))) (\ .pb5
(satlem _ _ (asf _ _ _ .a4 (\ .l8 (clausify_false (contra _ A2 .l8)))) (\ .pb6
 ;; Theory Lemmas 

;; BB atom mapping


;; Bit-blasting definitional clauses 


 ;; Bit-blasting learned clauses 

(satlem _ _ (ast _ _ _ .a4 (\ .l9 (ast _ _ _ .a3 (\ .l7 (asf _ _ _ .a2 (\ .l4  ;; UF Theory Lemma 
;;(not (= a_d (class_d a_da))) (not (= (class_d (pick_d a_d)) (class_d a_da))) (= a_d (class_d (pick_d a_d))) 
(clausify_false (contra _ (trans _ _ _ _ .l9 (symm _ _ _ .l7)) .l4))
))))))( \ .lemc7
(satlem_simplify _ _ _ (R _ _ (Q _ _ (Q _ _ .lemc7 .pb6 .v4) .pb5 .v3) .pb4 .v2) (\ empty empty)))))))))))))))))))))))))))))))))))))))))
;;
