(assume a0 (not (= (ite p_d true q_d) (or p_d q_d))))
(step t2 (cl (= (ite p_d true q_d) (or p_d q_d))) :rule ite_simplify)
(step t3 (cl (= (= (ite p_d true q_d) (or p_d q_d)) (= (or p_d q_d) (or p_d q_d)))) :rule cong :premises (t2))
(step t4 (cl (= (= (or p_d q_d) (or p_d q_d)) true)) :rule equiv_simplify)
(step t5 (cl (= (= (ite p_d true q_d) (or p_d q_d)) true)) :rule trans :premises (t3 t4))
(step t6 (cl (= (not (= (ite p_d true q_d) (or p_d q_d))) (not true))) :rule cong :premises (t5))
(step t7 (cl (= (not true) false)) :rule not_simplify)
(step t8 (cl (= (not (= (ite p_d true q_d) (or p_d q_d))) false)) :rule trans :premises (t6 t7))
(step t9 (cl (not (= (not (= (ite p_d true q_d) (or p_d q_d))) false)) (not (not (= (ite p_d true q_d) (or p_d q_d)))) false) :rule equiv_pos2)
(step t10 (cl (not (not (not (= (ite p_d true q_d) (or p_d q_d))))) (= (ite p_d true q_d) (or p_d q_d))) :rule not_not)
(step t11 (cl (not (= (not (= (ite p_d true q_d) (or p_d q_d))) false)) (= (ite p_d true q_d) (or p_d q_d)) false) :rule th_resolution :premises (t10 t9))
(step t12 (cl false) :rule th_resolution :premises (a0 t8 t11))
(step t13 (cl (not false)) :rule false)
(step t14 (cl) :rule resolution :premises (t12 t13))
