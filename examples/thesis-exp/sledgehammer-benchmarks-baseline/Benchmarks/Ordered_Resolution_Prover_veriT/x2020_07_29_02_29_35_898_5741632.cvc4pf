(check
 ;; Declarations
(% S_d sort
(% A_literal_multiset_d sort
(% A_s_a_fun_fun_d sort
(% A_literal_multiset_multiset_d sort
(% A_literal_multiset_list_d sort
(% sigma_dc (term S_d)
(% sigma_db (term S_d)
(% sigma_da (term S_d)
(% dAa_d (term A_literal_multiset_d)
(% cs_da (term A_literal_multiset_list_d)
(% subst_atm_d (term A_s_a_fun_fun_d)
(% subst_cls_d (term (arrow A_s_a_fun_fun_d (arrow A_literal_multiset_d (arrow S_d A_literal_multiset_d))))
(% mset_d (term (arrow A_literal_multiset_list_d A_literal_multiset_multiset_d))
(% e_da (term A_literal_multiset_d)
(% e_d (term A_literal_multiset_d)
(% plus_d (term (arrow A_literal_multiset_d (arrow A_literal_multiset_d A_literal_multiset_d)))
(% sum_mset_d (term (arrow A_literal_multiset_multiset_d A_literal_multiset_d))
(% cs_d (term A_literal_multiset_list_d)
(% da_d (term A_literal_multiset_d)
(% sigma_d (term S_d)
(% A6 (th_holds (= S_d sigma_dc sigma_da))
(% A5 (th_holds (= S_d sigma_db sigma_d))
(% A4 (th_holds (= A_literal_multiset_list_d cs_da cs_d))
(% A7 (th_holds (= S_d sigma_dc sigma_db))
(% A1 (th_holds (= A_literal_multiset_d e_da (apply _ _ (apply _ _ (apply _ _ subst_cls_d subst_atm_d)(apply _ _ (apply _ _ plus_d (apply _ _ sum_mset_d (apply _ _ mset_d cs_d)))da_d))sigma_d)))
(% A0 (th_holds (not (= A_literal_multiset_d e_d e_da)))
(% A3 (th_holds (= A_literal_multiset_d dAa_d da_d))
(% A8 (th_holds true)
(% A2 (th_holds (= A_literal_multiset_d e_d (apply _ _ (apply _ _ (apply _ _ subst_cls_d subst_atm_d)(apply _ _ (apply _ _ plus_d (apply _ _ sum_mset_d (apply _ _ mset_d cs_da)))dAa_d))sigma_da)))
(: (holds cln)

 ;; Printing deferred declarations 


;; BV const letification



 ;; Printing the global let map
(@ let1 e_d
(@ let2 e_da
(@ let3 (= A_literal_multiset_d let1 let2)
(@ let4 subst_atm_d
(@ let5 cs_d
(@ let6 (apply _ _ mset_d let5)
(@ let7 (apply _ _ sum_mset_d let6)
(@ let8 da_d
(@ let9 (apply _ _ (apply _ _ plus_d let7)let8)
(@ let10 sigma_d
(@ let11 (apply _ _ (apply _ _ (apply _ _ subst_cls_d let4)let9)let10)
(@ let12 (= A_literal_multiset_d let2 let11)
(@ let13 cs_da
(@ let14 (apply _ _ mset_d let13)
(@ let15 (apply _ _ sum_mset_d let14)
(@ let16 dAa_d
(@ let17 (apply _ _ (apply _ _ plus_d let15)let16)
(@ let18 sigma_da
(@ let19 (apply _ _ (apply _ _ (apply _ _ subst_cls_d let4)let17)let18)
(@ let20 (= A_literal_multiset_d let1 let19)
(@ let21 (= A_literal_multiset_d let8 let16)
(@ let22 (= A_literal_multiset_list_d let5 let13)
(@ let23 sigma_db
(@ let24 (= S_d let10 let23)
(@ let25 sigma_dc
(@ let26 (= S_d let18 let25)
(@ let27 (= S_d let23 let25)

 ;; Printing aliasing declarations 


 ;; Rewrites for Lemmas 

 ;; In the preprocessor we trust 
(th_let_pf _ (trust_f (iff (= A_literal_multiset_list_d let13 let5) (= A_literal_multiset_list_d let5 let13)))(\ .PA319
(th_let_pf _ (trust_f (iff (= S_d let23 let10) (= S_d let10 let23)))(\ .PA320
(th_let_pf _ (trust_f (iff (= S_d let25 let18) (= S_d let18 let25)))(\ .PA321
(th_let_pf _ (trust_f (iff (= A_literal_multiset_d let16 let8) (= A_literal_multiset_d let8 let16)))(\ .PA318
(th_let_pf _ (trust_f (iff (= S_d let25 let23) (= S_d let23 let25)))(\ .PA322

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom let3 (\ .v2 (\ .a2
(decl_atom let12 (\ .v3 (\ .a3
(decl_atom let20 (\ .v4 (\ .a4
(decl_atom let21 (\ .v5 (\ .a5
(decl_atom let22 (\ .v6 (\ .a6
(decl_atom let24 (\ .v7 (\ .a7
(decl_atom let26 (\ .v8 (\ .a8
(decl_atom let27 (\ .v9 (\ .a9
(satlem _ _ (ast _ _ _ .a2 (\ .l5 (clausify_false (contra _ .l5 A0)))) (\ .pb4
(satlem _ _ (asf _ _ _ .a3 (\ .l6 (clausify_false (contra _ A1 .l6)))) (\ .pb5
(satlem _ _ (asf _ _ _ .a4 (\ .l8 (clausify_false (contra _ A2 .l8)))) (\ .pb6
(satlem _ _ (asf _ _ _ .a5 (\ .l10 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ A3) (iff_elim_1 _ _ .PA318)) .l10)))) (\ .pb7
(satlem _ _ (asf _ _ _ .a9 (\ .l18 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ A7) (iff_elim_1 _ _ .PA322)) .l18)))) (\ .pb11
(satlem _ _ (asf _ _ _ .a8 (\ .l16 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ A6) (iff_elim_1 _ _ .PA321)) .l16)))) (\ .pb10
(satlem _ _ (asf _ _ _ .a7 (\ .l14 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ A5) (iff_elim_1 _ _ .PA320)) .l14)))) (\ .pb9
(satlem _ _ (asf _ _ _ .a6 (\ .l12 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ A4) (iff_elim_1 _ _ .PA319)) .l12)))) (\ .pb8
 ;; Theory Lemmas 

;; BB atom mapping


;; Bit-blasting definitional clauses 


 ;; Bit-blasting learned clauses 

(satlem _ _ (ast _ _ _ .a9 (\ .l19 (ast _ _ _ .a8 (\ .l17 (ast _ _ _ .a7 (\ .l15 (ast _ _ _ .a6 (\ .l13 (ast _ _ _ .a5 (\ .l11 (ast _ _ _ .a4 (\ .l9 (ast _ _ _ .a3 (\ .l7 (asf _ _ _ .a2 (\ .l4  ;; UF Theory Lemma 
;;(not (= sigma_db sigma_dc)) (not (= sigma_da sigma_dc)) (not (= sigma_d sigma_db)) (not (= cs_d cs_da)) (not (= da_d dAa_d)) (not (= e_d (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_da))) (not (= e_da (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) da_d) sigma_d))) (= e_d e_da) 
(clausify_false (contra _ (trans _ _ _ _ .l9 (symm _ _ _ (trans _ _ _ _ .l7 (symm _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ subst_cls_d) (refl _ let4)) (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ plus_d) (cong _ _ _ _ _ _ (refl _ sum_mset_d) (cong _ _ _ _ _ _ (refl _ mset_d) (symm _ _ _ .l13)))) (symm _ _ _ .l11))) (symm _ _ _ (trans _ _ _ _ (trans _ _ _ _ .l15 .l19) (symm _ _ _ .l17)))))))) .l4))
))))))))))))))))( \ .lemc12
(satlem_simplify _ _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ (Q _ _ .lemc12 .pb11 .v9) .pb10 .v8) .pb9 .v7) .pb8 .v6) .pb7 .v5) .pb6 .v4) .pb5 .v3) .pb4 .v2) (\ empty empty))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
;;
