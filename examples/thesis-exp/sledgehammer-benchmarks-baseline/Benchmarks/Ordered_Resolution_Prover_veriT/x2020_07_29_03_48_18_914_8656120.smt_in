; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S_d 0)
(declare-sort Nat_d 0)
(declare-sort S_list_d 0)
(declare-sort A_s_a_fun_fun_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-sort A_literal_multiset_list_d 0)
(declare-fun i_d () Nat_d)
(declare-fun cs_d () A_literal_multiset_list_d)
(declare-fun cs0_d () A_literal_multiset_list_d)
(declare-fun eta_d () S_d)
(declare-fun nth_d (A_literal_multiset_list_d Nat_d) A_literal_multiset_d)
(declare-fun eta_s0_d () S_list_d)
(declare-fun subst_atm_d () A_s_a_fun_fun_d)
(declare-fun subst_cls_list_d (A_s_a_fun_fun_d A_literal_multiset_list_d S_d) A_literal_multiset_list_d)
(declare-fun subst_cls_lists_d (A_s_a_fun_fun_d A_literal_multiset_list_d S_list_d) A_literal_multiset_list_d)
(assert (! (not (= (nth_d (subst_cls_list_d subst_atm_d cs0_d eta_d) i_d) (nth_d cs_d i_d))) :named a0))
(assert (! (= (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d) (nth_d cs_d i_d)) :named a1))
(assert (! (= (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d) (nth_d (subst_cls_list_d subst_atm_d cs0_d eta_d) i_d)) :named a2))
(check-sat)
;;;;(get-proof)
