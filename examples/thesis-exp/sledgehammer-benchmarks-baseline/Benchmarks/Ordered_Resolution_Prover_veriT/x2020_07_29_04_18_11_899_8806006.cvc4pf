(check
 ;; Declarations
(% A_list_d sort
(% A_a_multiset_prod_list_d sort
(% A_a_multiset_a_multiset_fun_fun_d sort
(% A_a_multiset_prod_a_multiset_fun_d sort
(% A_literal_multiset_list_d sort
(% A_literal_multiset_multiset_d sort
(% S_d sort
(% A_s_a_fun_fun_d sort
(% A_literal_multiset_d sort
(% S_option_d sort
(% A_set_set_d sort
(% A_multiset_a_set_fun_d sort
(% A_multiset_set_d sort
(% A_multiset_list_d sort
(% aAs0_d (term A_multiset_list_d)
(% comp_subst_d (term (arrow S_d (arrow S_d S_d)))
(% tau_d (term S_d)
(% d0_d (term A_literal_multiset_d)
(% sigma_d (term S_d)
(% cs0_d (term A_literal_multiset_list_d)
(% set_mset_d (term A_multiset_a_set_fun_d)
(% subst_cls_d (term (arrow A_s_a_fun_fun_d (arrow A_literal_multiset_d (arrow S_d A_literal_multiset_d))))
(% mset_d (term (arrow A_literal_multiset_list_d A_literal_multiset_multiset_d))
(% sum_mset_d (term (arrow A_literal_multiset_multiset_d A_literal_multiset_d))
(% phi_d (term S_d)
(% subst_atm_d (term A_s_a_fun_fun_d)
(% mgu_d (term (arrow A_set_set_d S_option_d))
(% plus_d (term (arrow A_literal_multiset_d (arrow A_literal_multiset_d A_literal_multiset_d)))
(% eta_d (term S_d)
(% some_d (term (arrow S_d S_option_d))
(% image_d (term (arrow A_multiset_a_set_fun_d (arrow A_multiset_set_d A_set_set_d)))
(% set_d (term (arrow A_multiset_list_d A_multiset_set_d))
(% map_d (term (arrow A_a_multiset_prod_a_multiset_fun_d (arrow A_a_multiset_prod_list_d A_multiset_list_d)))
(% case_prod_d (term (arrow A_a_multiset_a_multiset_fun_fun_d A_a_multiset_prod_a_multiset_fun_d))
(% add_mset_d (term A_a_multiset_a_multiset_fun_fun_d)
(% as0_d (term A_list_d)
(% zip_d (term (arrow A_list_d (arrow A_multiset_list_d A_a_multiset_prod_list_d)))
(% A3 (th_holds true)
(% A2 (th_holds (= S_option_d (apply _ _ some_d tau_d) (apply _ _ mgu_d (apply _ _ (apply _ _ image_d set_mset_d)(apply _ _ set_d (apply _ _ (apply _ _ map_d (apply _ _ case_prod_d add_mset_d))(apply _ _ (apply _ _ zip_d as0_d)aAs0_d)))))))
(% A1 (th_holds (= S_d (apply _ _ (apply _ _ comp_subst_d tau_d)phi_d) (apply _ _ (apply _ _ comp_subst_d eta_d)sigma_d)))
(% A0 (th_holds (not (= A_literal_multiset_d (apply _ _ (apply _ _ (apply _ _ subst_cls_d subst_atm_d)(apply _ _ (apply _ _ plus_d (apply _ _ sum_mset_d (apply _ _ mset_d cs0_d)))d0_d))(apply _ _ (apply _ _ comp_subst_d tau_d)phi_d)) (apply _ _ (apply _ _ (apply _ _ subst_cls_d subst_atm_d)(apply _ _ (apply _ _ plus_d (apply _ _ sum_mset_d (apply _ _ mset_d cs0_d)))d0_d))(apply _ _ (apply _ _ comp_subst_d eta_d)sigma_d)))))
(: (holds cln)

 ;; Printing deferred declarations 


;; BV const letification



 ;; Printing the global let map
(@ let1 subst_atm_d
(@ let2 cs0_d
(@ let3 (apply _ _ mset_d let2)
(@ let4 (apply _ _ sum_mset_d let3)
(@ let5 d0_d
(@ let6 (apply _ _ (apply _ _ plus_d let4)let5)
(@ let7 tau_d
(@ let8 phi_d
(@ let9 (apply _ _ (apply _ _ comp_subst_d let7)let8)
(@ let10 (apply _ _ (apply _ _ (apply _ _ subst_cls_d let1)let6)let9)
(@ let11 eta_d
(@ let12 sigma_d
(@ let13 (apply _ _ (apply _ _ comp_subst_d let11)let12)
(@ let14 (apply _ _ (apply _ _ (apply _ _ subst_cls_d let1)let6)let13)
(@ let15 (= A_literal_multiset_d let10 let14)
(@ let16 (= S_d let9 let13)

 ;; Printing aliasing declarations 


 ;; Rewrites for Lemmas 

 ;; In the preprocessor we trust 

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom let15 (\ .v2 (\ .a2
(decl_atom let16 (\ .v3 (\ .a3
(satlem _ _ (ast _ _ _ .a2 (\ .l5 (clausify_false (contra _ .l5 A0)))) (\ .pb4
(satlem _ _ (asf _ _ _ .a3 (\ .l6 (clausify_false (contra _ A1 .l6)))) (\ .pb5
 ;; Theory Lemmas 

;; BB atom mapping


;; Bit-blasting definitional clauses 


 ;; Bit-blasting learned clauses 

(satlem _ _ (ast _ _ _ .a3 (\ .l7 (asf _ _ _ .a2 (\ .l4  ;; UF Theory Lemma 
;;(not (= (comp_subst_d tau_d phi_d) (comp_subst_d eta_d sigma_d))) (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs0_d)) d0_d) (comp_subst_d tau_d phi_d)) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs0_d)) d0_d) (comp_subst_d eta_d sigma_d))) 
(clausify_false (contra _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ subst_cls_d) (refl _ let1)) (refl _ let6)) .l7) .l4))
))))( \ .lemc7
(satlem_simplify _ _ _ (R _ _ (Q _ _ .lemc7 .pb5 .v3) .pb4 .v2) (\ empty empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
;;
