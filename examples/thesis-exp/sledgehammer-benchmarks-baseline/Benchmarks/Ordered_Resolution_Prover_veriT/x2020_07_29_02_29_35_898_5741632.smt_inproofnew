(assume a0 (not (= e_d e_da)))
(assume a1 (= e_da (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) da_d) sigma_d)))
(assume a2 (= e_d (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_da)))
(assume a3 (= da_d dAa_d))
(assume a4 (= cs_d cs_da))
(assume a5 (= sigma_d sigma_db))
(assume a6 (= sigma_da sigma_dc))
(assume a7 (= sigma_db sigma_dc))
(step t9 (cl (not (= e_d (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_da))) (not (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) da_d) sigma_d) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_da))) (not (= e_da (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) da_d) sigma_d))) (= e_d e_da)) :rule eq_transitive)
(step t10 (cl (not (= subst_atm_d subst_atm_d)) (not (= (plus_d (sum_mset_d (mset_d cs_d)) da_d) (plus_d (sum_mset_d (mset_d cs_da)) dAa_d))) (not (= sigma_d sigma_da)) (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) da_d) sigma_d) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_da))) :rule eq_congruent)
(step t11 (cl (= subst_atm_d subst_atm_d)) :rule eq_reflexive)
(step t12 (cl (not (= (plus_d (sum_mset_d (mset_d cs_d)) da_d) (plus_d (sum_mset_d (mset_d cs_da)) dAa_d))) (not (= sigma_d sigma_da)) (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) da_d) sigma_d) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_da))) :rule th_resolution :premises (t10 t11))
(step t13 (cl (not (= (sum_mset_d (mset_d cs_d)) (sum_mset_d (mset_d cs_da)))) (not (= da_d dAa_d)) (= (plus_d (sum_mset_d (mset_d cs_d)) da_d) (plus_d (sum_mset_d (mset_d cs_da)) dAa_d))) :rule eq_congruent)
(step t14 (cl (not (= (mset_d cs_d) (mset_d cs_da))) (= (sum_mset_d (mset_d cs_d)) (sum_mset_d (mset_d cs_da)))) :rule eq_congruent)
(step t15 (cl (not (= cs_d cs_da)) (= (mset_d cs_d) (mset_d cs_da))) :rule eq_congruent)
(step t16 (cl (= (sum_mset_d (mset_d cs_d)) (sum_mset_d (mset_d cs_da))) (not (= cs_d cs_da))) :rule th_resolution :premises (t14 t15))
(step t17 (cl (not (= da_d dAa_d)) (= (plus_d (sum_mset_d (mset_d cs_d)) da_d) (plus_d (sum_mset_d (mset_d cs_da)) dAa_d)) (not (= cs_d cs_da))) :rule th_resolution :premises (t13 t16))
(step t18 (cl (not (= sigma_d sigma_da)) (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) da_d) sigma_d) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_da)) (not (= da_d dAa_d)) (not (= cs_d cs_da))) :rule th_resolution :premises (t12 t17))
(step t19 (cl (not (= sigma_d sigma_db)) (not (= sigma_db sigma_dc)) (not (= sigma_da sigma_dc)) (= sigma_d sigma_da)) :rule eq_transitive)
(step t20 (cl (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) da_d) sigma_d) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_da)) (not (= da_d dAa_d)) (not (= cs_d cs_da)) (not (= sigma_d sigma_db)) (not (= sigma_db sigma_dc)) (not (= sigma_da sigma_dc))) :rule th_resolution :premises (t18 t19))
(step t21 (cl (not (= e_d (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_da))) (not (= e_da (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) da_d) sigma_d))) (= e_d e_da) (not (= da_d dAa_d)) (not (= cs_d cs_da)) (not (= sigma_d sigma_db)) (not (= sigma_db sigma_dc)) (not (= sigma_da sigma_dc))) :rule th_resolution :premises (t9 t20))
(step t22 (cl) :rule resolution :premises (t21 a0 a1 a2 a3 a4 a5 a6 a7))
