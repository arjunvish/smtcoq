(check
 ;; Declarations
(% S_d sort
(% A_s_a_fun_fun_d sort
(% A_literal_multiset_d sort
(% A_set_d sort
(% is_ground_subst_d (term (arrow A_s_a_fun_fun_d (arrow S_d Bool)))
(% eta_d (term S_d)
(% e_d (term A_literal_multiset_d)
(% true_cls_d (term (arrow A_set_d (arrow A_literal_multiset_d Bool)))
(% i_d (term A_set_d)
(% subst_cls_d (term (arrow A_s_a_fun_fun_d (arrow A_literal_multiset_d (arrow S_d A_literal_multiset_d))))
(% subst_atm_d (term A_s_a_fun_fun_d)
(% A2 (th_holds (impl (p_app (apply _ _ (apply _ _ is_ground_subst_d subst_atm_d)eta_d)) (p_app (apply _ _ (apply _ _ true_cls_d i_d)(apply _ _ (apply _ _ (apply _ _ subst_cls_d subst_atm_d)e_d)eta_d)))))
(% A3 (th_holds true)
(% A1 (th_holds (p_app (apply _ _ (apply _ _ is_ground_subst_d subst_atm_d)eta_d)))
(% A0 (th_holds (not (p_app (apply _ _ (apply _ _ true_cls_d i_d)(apply _ _ (apply _ _ (apply _ _ subst_cls_d subst_atm_d)e_d)eta_d)))))
(: (holds cln)

 ;; Printing deferred declarations 


;; BV const letification



 ;; Printing the global let map
(@ let1 i_d
(@ let2 subst_atm_d
(@ let3 e_d
(@ let4 eta_d
(@ let5 (apply _ _ (apply _ _ (apply _ _ subst_cls_d let2)let3)let4)
(@ let6 (p_app (apply _ _ (apply _ _ true_cls_d let1)let5))
(@ let7 (p_app (apply _ _ (apply _ _ is_ground_subst_d let2)let4))

 ;; Printing aliasing declarations 


 ;; Rewrites for Lemmas 

 ;; In the preprocessor we trust 

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom let6 (\ .v2 (\ .a2
(decl_atom let7 (\ .v3 (\ .a3
(satlem _ _ (ast _ _ _ .a2 (\ .l5 (clausify_false (contra _ .l5 A0)))) (\ .pb4
(satlem _ _ (asf _ _ _ .a3 (\ .l6 (clausify_false (contra _ A1 .l6)))) (\ .pb5
(satlem _ _ (ast _ _ _ .a3 (\ .l7 (asf _ _ _ .a2 (\ .l4 (clausify_false (contra _ (or_elim_1 _ _ (not_not_intro _ .l7) (impl_elim _ _ A2)) .l4)))))) (\ .pb6
 ;; Theory Lemmas 

;; BB atom mapping


;; Bit-blasting definitional clauses 


 ;; Bit-blasting learned clauses 

(satlem_simplify _ _ _ (R _ _ (Q _ _ .pb6 .pb5 .v3) .pb4 .v2) (\ empty empty))))))))))))))))))))))))))))))))))))))
;;
