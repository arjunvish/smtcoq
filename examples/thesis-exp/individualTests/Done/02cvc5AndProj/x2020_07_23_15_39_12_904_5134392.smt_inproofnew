(assume a0 (not (or (not (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))) (= (abs_d (modulo_d (of_nat_d (suc_d ka_d)) n_d)) (abs_d (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))))))
(step t2 (cl (not (not (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))))) :rule not_or :premises (a0))
(step t3 (cl (not (not (not (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))))) (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))) :rule not_not)
(step t4 (cl (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))) :rule th_resolution :premises (t3 t2))
(step t5 (cl (not (= (abs_d (modulo_d (of_nat_d (suc_d ka_d)) n_d)) (abs_d (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))))) :rule not_or :premises (a0))
(step t6 (cl (not (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))) (= (abs_d (modulo_d (of_nat_d (suc_d ka_d)) n_d)) (abs_d (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d)))) :rule eq_congruent)
(step t7 (cl) :rule resolution :premises (t6 t4 t5))
