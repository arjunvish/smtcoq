     = false
     : bool
Certif after storing shared terms: 
(a0, AssumeAST, (cl  ((x = y))), [], [])
(a1, AssumeAST, (cl  ((y = y))), [], [])
(a2, AssumeAST, (cl  ((y = z))), [], [])
(a3, AssumeAST, (cl  ((not (x = z)))), [], [])
(t4, TransAST, (cl  ((x = z))), [ a0 a1 a2], [])
(t5, ResoAST, (cl ), [ a3 t4], [])

Certif after process_fins: 
(a0, AssumeAST, (cl  ((x = y))), [], [])
(a1, AssumeAST, (cl  ((y = y))), [], [])
(a2, AssumeAST, (cl  ((y = z))), [], [])
(a3, AssumeAST, (cl  ((not (x = z)))), [], [])
(t4, TransAST, (cl  ((x = z))), [ a0 a1 a2], [])
(t5, ResoAST, (cl ), [ a3 t4], [])

Certif after process_hole: 
(a0, AssumeAST, (cl  ((x = y))), [], [])
(a1, AssumeAST, (cl  ((y = y))), [], [])
(a2, AssumeAST, (cl  ((y = z))), [], [])
(a3, AssumeAST, (cl  ((not (x = z)))), [], [])
(t4, TransAST, (cl  ((x = z))), [ a0 a1 a2], [])
(t5, ResoAST, (cl ), [ a3 t4], [])

Certif after process_notnot: 
(a0, AssumeAST, (cl  ((x = y))), [], [])
(a1, AssumeAST, (cl  ((y = y))), [], [])
(a2, AssumeAST, (cl  ((y = z))), [], [])
(a3, AssumeAST, (cl  ((not (x = z)))), [], [])
(t4, TransAST, (cl  ((x = z))), [ a0 a1 a2], [])
(t5, ResoAST, (cl ), [ a3 t4], [])

Certif after process_same: 
(a0, AssumeAST, (cl  ((x = y))), [], [])
(a1, AssumeAST, (cl  ((y = y))), [], [])
(a2, AssumeAST, (cl  ((y = z))), [], [])
(a3, AssumeAST, (cl  ((not (x = z)))), [], [])
(t4, TransAST, (cl  ((x = z))), [ a0 a1 a2], [])
(t5, ResoAST, (cl ), [ a3 t4], [])

Certif after process_cong: 
(a0, AssumeAST, (cl  ((x = y))), [], [])
(a1, AssumeAST, (cl  ((y = y))), [], [])
(a2, AssumeAST, (cl  ((y = z))), [], [])
(a3, AssumeAST, (cl  ((not (x = z)))), [], [])
(t4, TransAST, (cl  ((x = z))), [ a0 a1 a2], [])
(t5, ResoAST, (cl ), [ a3 t4], [])

Certif after process_trans: 
(a0, AssumeAST, (cl  ((x = y))), [], [])
(a1, AssumeAST, (cl  ((y = y))), [], [])
(a2, AssumeAST, (cl  ((y = z))), [], [])
(a3, AssumeAST, (cl  ((not (x = z)))), [], [])
(x6, Equp1AST, (cl  ((not (x = y))) (x) ((not y))), [], [])
(x5, ResoAST, (cl  (x) ((not y))), [ x6 a0], [])
(x4, Equp1AST, (cl  ((not (y = y))) (y) ((not y))), [], [])
(x3, ResoAST, (cl  (y) ((not y))), [ x4 a1], [])
(x2, Equp1AST, (cl  ((not (y = z))) (y) ((not z))), [], [])
(x1, ResoAST, (cl  (y) ((not z))), [ x2 a2], [])
(x7, ResoAST, (cl  (x) ((not z))), [ x5 x3 x1], [])
(x8, Equn2AST, (cl  ((x = z)) (x) (z)), [], [])
(x9, ResoAST, (cl  ((x = z)) (x)), [ x7 x8], [])
(x15, Equp2AST, (cl  ((not (x = y))) ((not x)) (y)), [], [])
(x14, ResoAST, (cl  ((not x)) (y)), [ x15 a0], [])
(x13, Equp2AST, (cl  ((not (y = y))) ((not y)) (y)), [], [])
(x12, ResoAST, (cl  ((not y)) (y)), [ x13 a1], [])
(x11, Equp2AST, (cl  ((not (y = z))) ((not y)) (z)), [], [])
(x10, ResoAST, (cl  ((not y)) (z)), [ x11 a2], [])
(x16, ResoAST, (cl  ((not x)) (z)), [ x14 x12 x10], [])
(x17, Equn1AST, (cl  ((x = z)) ((not x)) ((not z))), [], [])
(x18, ResoAST, (cl  ((x = z)) ((not x))), [ x16 x17], [])
(t4, ResoAST, (cl  ((x = z))), [ x9 x18], [])
(t5, ResoAST, (cl ), [ a3 t4], [])

Certif after process_simplify: 
(a0, AssumeAST, (cl  ((x = y))), [], [])
(a1, AssumeAST, (cl  ((y = y))), [], [])
(a2, AssumeAST, (cl  ((y = z))), [], [])
(a3, AssumeAST, (cl  ((not (x = z)))), [], [])
(x6, Equp1AST, (cl  ((not (x = y))) (x) ((not y))), [], [])
(x5, ResoAST, (cl  (x) ((not y))), [ x6 a0], [])
(x4, Equp1AST, (cl  ((not (y = y))) (y) ((not y))), [], [])
(x3, ResoAST, (cl  (y) ((not y))), [ x4 a1], [])
(x2, Equp1AST, (cl  ((not (y = z))) (y) ((not z))), [], [])
(x1, ResoAST, (cl  (y) ((not z))), [ x2 a2], [])
(x7, ResoAST, (cl  (x) ((not z))), [ x5 x3 x1], [])
(x8, Equn2AST, (cl  ((x = z)) (x) (z)), [], [])
(x9, ResoAST, (cl  ((x = z)) (x)), [ x7 x8], [])
(x15, Equp2AST, (cl  ((not (x = y))) ((not x)) (y)), [], [])
(x14, ResoAST, (cl  ((not x)) (y)), [ x15 a0], [])
(x13, Equp2AST, (cl  ((not (y = y))) ((not y)) (y)), [], [])
(x12, ResoAST, (cl  ((not y)) (y)), [ x13 a1], [])
(x11, Equp2AST, (cl  ((not (y = z))) ((not y)) (z)), [], [])
(x10, ResoAST, (cl  ((not y)) (z)), [ x11 a2], [])
(x16, ResoAST, (cl  ((not x)) (z)), [ x14 x12 x10], [])
(x17, Equn1AST, (cl  ((x = z)) ((not x)) ((not z))), [], [])
(x18, ResoAST, (cl  ((x = z)) ((not x))), [ x16 x17], [])
(t4, ResoAST, (cl  ((x = z))), [ x9 x18], [])
(t5, ResoAST, (cl ), [ a3 t4], [])

Certif after process_proj: 
(a0, AssumeAST, (cl  ((x = y))), [], [])
(a1, AssumeAST, (cl  ((y = y))), [], [])
(a2, AssumeAST, (cl  ((y = z))), [], [])
(a3, AssumeAST, (cl  ((not (x = z)))), [], [])
(x6, Equp1AST, (cl  ((not (x = y))) (x) ((not y))), [], [])
(x5, ResoAST, (cl  (x) ((not y))), [ x6 a0], [])
(x4, Equp1AST, (cl  ((not (y = y))) (y) ((not y))), [], [])
(x3, ResoAST, (cl  (y) ((not y))), [ x4 a1], [])
(x2, Equp1AST, (cl  ((not (y = z))) (y) ((not z))), [], [])
(x1, ResoAST, (cl  (y) ((not z))), [ x2 a2], [])
(x7, ResoAST, (cl  (x) ((not z))), [ x5 x3 x1], [])
(x8, Equn2AST, (cl  ((x = z)) (x) (z)), [], [])
(x9, ResoAST, (cl  ((x = z)) (x)), [ x7 x8], [])
(x15, Equp2AST, (cl  ((not (x = y))) ((not x)) (y)), [], [])
(x14, ResoAST, (cl  ((not x)) (y)), [ x15 a0], [])
(x13, Equp2AST, (cl  ((not (y = y))) ((not y)) (y)), [], [])
(x12, ResoAST, (cl  ((not y)) (y)), [ x13 a1], [])
(x11, Equp2AST, (cl  ((not (y = z))) ((not y)) (z)), [], [])
(x10, ResoAST, (cl  ((not y)) (z)), [ x11 a2], [])
(x16, ResoAST, (cl  ((not x)) (z)), [ x14 x12 x10], [])
(x17, Equn1AST, (cl  ((x = z)) ((not x)) ((not z))), [], [])
(x18, ResoAST, (cl  ((x = z)) ((not x))), [ x16 x17], [])
(t4, ResoAST, (cl  ((x = z))), [ x9 x18], [])
(t5, ResoAST, (cl ), [ a3 t4], [])

Certif after process_subproof: 
(a0, AssumeAST, (cl  ((x = y))), [], [])
(a1, AssumeAST, (cl  ((y = y))), [], [])
(a2, AssumeAST, (cl  ((y = z))), [], [])
(a3, AssumeAST, (cl  ((not (x = z)))), [], [])
(x6, Equp1AST, (cl  ((not (x = y))) (x) ((not y))), [], [])
(x5, ResoAST, (cl  (x) ((not y))), [ x6 a0], [])
(x4, Equp1AST, (cl  ((not (y = y))) (y) ((not y))), [], [])
(x3, ResoAST, (cl  (y) ((not y))), [ x4 a1], [])
(x2, Equp1AST, (cl  ((not (y = z))) (y) ((not z))), [], [])
(x1, ResoAST, (cl  (y) ((not z))), [ x2 a2], [])
(x7, ResoAST, (cl  (x) ((not z))), [ x5 x3 x1], [])
(x8, Equn2AST, (cl  ((x = z)) (x) (z)), [], [])
(x9, ResoAST, (cl  ((x = z)) (x)), [ x7 x8], [])
(x15, Equp2AST, (cl  ((not (x = y))) ((not x)) (y)), [], [])
(x14, ResoAST, (cl  ((not x)) (y)), [ x15 a0], [])
(x13, Equp2AST, (cl  ((not (y = y))) ((not y)) (y)), [], [])
(x12, ResoAST, (cl  ((not y)) (y)), [ x13 a1], [])
(x11, Equp2AST, (cl  ((not (y = z))) ((not y)) (z)), [], [])
(x10, ResoAST, (cl  ((not y)) (z)), [ x11 a2], [])
(x16, ResoAST, (cl  ((not x)) (z)), [ x14 x12 x10], [])
(x17, Equn1AST, (cl  ((x = z)) ((not x)) ((not z))), [], [])
(x18, ResoAST, (cl  ((x = z)) ((not x))), [ x16 x17], [])
(t4, ResoAST, (cl  ((x = z))), [ x9 x18], [])
(t5, ResoAST, (cl ), [ a3 t4], [])

