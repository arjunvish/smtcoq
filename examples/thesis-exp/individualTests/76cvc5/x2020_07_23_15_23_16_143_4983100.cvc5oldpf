(assume a0 (not (= (not (= a_d b_d)) (or (and a_d (not b_d)) (and b_d (not a_d))))))
(step t0 (cl (not (or (and a_d (not b_d)) (and b_d (not a_d)))) (and a_d (not b_d)) (and b_d (not a_d))) :rule or_pos)
(step t1 (cl (and a_d (not b_d)) (and b_d (not a_d)) (not (or (and a_d (not b_d)) (and b_d (not a_d))))) :rule reordering :premises (t0))
(step t2 (cl (not (= a_d b_d)) (or (and a_d (not b_d)) (and b_d (not a_d)))) :rule not_equiv1 :premises (a0))
(step t3 (cl (= a_d b_d) a_d b_d) :rule equiv_neg2)
(step t4 (cl a_d b_d (= a_d b_d)) :rule reordering :premises (t3))
(step t5 (cl (not (and a_d (not b_d))) (not b_d)) :rule and_pos)
(step t6 (cl (not b_d) (not (and a_d (not b_d)))) :rule reordering :premises (t5))
(step t7 (cl (= a_d b_d) (not a_d) (not b_d)) :rule equiv_neg1)
(step t8 (cl (= a_d b_d) (not b_d) (not a_d)) :rule reordering :premises (t7))
(step t9 (cl (not (and b_d (not a_d))) (not a_d)) :rule and_pos)
(step t10 (cl (not a_d) (not (and b_d (not a_d)))) :rule reordering :premises (t9))
(step t11 (cl (not b_d) (not b_d) (not a_d) (not a_d)) :rule resolution :premises (t1 t2 t6 t8 t10))
(step t12 (cl (not b_d) (not a_d)) :rule contraction :premises (t11))
(step t13 (cl (or (and a_d (not b_d)) (and b_d (not a_d))) (not (and a_d (not b_d)))) :rule or_neg)
(step t14 (cl (not (= (or (not (not (= a_d b_d))) (not (or (and a_d (not b_d)) (and b_d (not a_d))))) (or (= a_d b_d) (not (or (and a_d (not b_d)) (and b_d (not a_d))))))) (not (or (not (not (= a_d b_d))) (not (or (and a_d (not b_d)) (and b_d (not a_d)))))) (or (= a_d b_d) (not (or (and a_d (not b_d)) (and b_d (not a_d)))))) :rule equiv_pos2)
(step t15 (cl (= (not (not (= a_d b_d))) (= a_d b_d))) :rule all_simplify)
(step t16 (cl (= (not (or (and a_d (not b_d)) (and b_d (not a_d)))) (not (or (and a_d (not b_d)) (and b_d (not a_d)))))) :rule refl)
(step t17 (cl (= (or (not (not (= a_d b_d))) (not (or (and a_d (not b_d)) (and b_d (not a_d))))) (or (= a_d b_d) (not (or (and a_d (not b_d)) (and b_d (not a_d))))))) :rule cong :premises (t15 t16))
(step t18 (cl (not (not (= a_d b_d))) (not (or (and a_d (not b_d)) (and b_d (not a_d))))) :rule not_equiv2 :premises (a0))
(step t19 (cl (or (not (not (= a_d b_d))) (not (or (and a_d (not b_d)) (and b_d (not a_d))))) (not (not (not (= a_d b_d))))) :rule or_neg)
(step t20 (cl (or (not (not (= a_d b_d))) (not (or (and a_d (not b_d)) (and b_d (not a_d))))) (not (not (or (and a_d (not b_d)) (and b_d (not a_d)))))) :rule or_neg)
(step t21 (cl (or (not (not (= a_d b_d))) (not (or (and a_d (not b_d)) (and b_d (not a_d))))) (or (not (not (= a_d b_d))) (not (or (and a_d (not b_d)) (and b_d (not a_d)))))) :rule resolution :premises (t18 t19 t20))
(step t22 (cl (or (not (not (= a_d b_d))) (not (or (and a_d (not b_d)) (and b_d (not a_d)))))) :rule contraction :premises (t21))
(step t23 (cl (or (= a_d b_d) (not (or (and a_d (not b_d)) (and b_d (not a_d)))))) :rule resolution :premises (t14 t17 t22))
(step t24 (cl (= a_d b_d) (not (or (and a_d (not b_d)) (and b_d (not a_d))))) :rule or :premises (t23))
(step t25 (cl (not (= (or (and a_d (not b_d)) (not a_d) (not (not b_d))) (or (and a_d (not b_d)) (not a_d) b_d))) (not (or (and a_d (not b_d)) (not a_d) (not (not b_d)))) (or (and a_d (not b_d)) (not a_d) b_d)) :rule equiv_pos2)
(step t26 (cl (= (and a_d (not b_d)) (and a_d (not b_d)))) :rule refl)
(step t27 (cl (= (not a_d) (not a_d))) :rule refl)
(step t28 (cl (= (not (not b_d)) b_d)) :rule all_simplify)
(step t29 (cl (= (or (and a_d (not b_d)) (not a_d) (not (not b_d))) (or (and a_d (not b_d)) (not a_d) b_d))) :rule cong :premises (t26 t27 t28))
(step t30 (cl (and a_d (not b_d)) (not a_d) (not (not b_d))) :rule and_neg)
(step t31 (cl (or (and a_d (not b_d)) (not a_d) (not (not b_d))) (not (and a_d (not b_d)))) :rule or_neg)
(step t32 (cl (or (and a_d (not b_d)) (not a_d) (not (not b_d))) (not (not a_d))) :rule or_neg)
(step t33 (cl (or (and a_d (not b_d)) (not a_d) (not (not b_d))) (not (not (not b_d)))) :rule or_neg)
(step t34 (cl (or (and a_d (not b_d)) (not a_d) (not (not b_d))) (or (and a_d (not b_d)) (not a_d) (not (not b_d))) (or (and a_d (not b_d)) (not a_d) (not (not b_d)))) :rule resolution :premises (t30 t31 t32 t33))
(step t35 (cl (or (and a_d (not b_d)) (not a_d) (not (not b_d)))) :rule contraction :premises (t34))
(step t36 (cl (or (and a_d (not b_d)) (not a_d) b_d)) :rule resolution :premises (t25 t29 t35))
(step t37 (cl (and a_d (not b_d)) (not a_d) b_d) :rule or :premises (t36))
(step t38 (cl b_d (and a_d (not b_d)) (not a_d)) :rule reordering :premises (t37))
(step t39 (cl (not (= a_d b_d)) (not a_d) b_d) :rule equiv_pos2)
(step t40 (cl b_d (not (= a_d b_d)) (not a_d)) :rule reordering :premises (t39))
(step t41 (cl b_d (not a_d) b_d (not a_d)) :rule resolution :premises (t13 t24 t38 t40))
(step t42 (cl b_d (not a_d)) :rule contraction :premises (t41))
(step t43 (cl (not a_d) (not a_d)) :rule resolution :premises (t12 t42))
(step t44 (cl (not a_d)) :rule contraction :premises (t43))
(step t45 (cl (or (and a_d (not b_d)) (and b_d (not a_d))) (not (and b_d (not a_d)))) :rule or_neg)
(step t46 (cl (= a_d b_d) (not (or (and a_d (not b_d)) (and b_d (not a_d))))) :rule or :premises (t23))
(step t47 (cl (not (= (or (and b_d (not a_d)) (not b_d) (not (not a_d))) (or (and b_d (not a_d)) (not b_d) a_d))) (not (or (and b_d (not a_d)) (not b_d) (not (not a_d)))) (or (and b_d (not a_d)) (not b_d) a_d)) :rule equiv_pos2)
(step t48 (cl (= (and b_d (not a_d)) (and b_d (not a_d)))) :rule refl)
(step t49 (cl (= (not b_d) (not b_d))) :rule refl)
(step t50 (cl (= (not (not a_d)) a_d)) :rule all_simplify)
(step t51 (cl (= (or (and b_d (not a_d)) (not b_d) (not (not a_d))) (or (and b_d (not a_d)) (not b_d) a_d))) :rule cong :premises (t48 t49 t50))
(step t52 (cl (and b_d (not a_d)) (not b_d) (not (not a_d))) :rule and_neg)
(step t53 (cl (or (and b_d (not a_d)) (not b_d) (not (not a_d))) (not (and b_d (not a_d)))) :rule or_neg)
(step t54 (cl (or (and b_d (not a_d)) (not b_d) (not (not a_d))) (not (not b_d))) :rule or_neg)
(step t55 (cl (or (and b_d (not a_d)) (not b_d) (not (not a_d))) (not (not (not a_d)))) :rule or_neg)
(step t56 (cl (or (and b_d (not a_d)) (not b_d) (not (not a_d))) (or (and b_d (not a_d)) (not b_d) (not (not a_d))) (or (and b_d (not a_d)) (not b_d) (not (not a_d)))) :rule resolution :premises (t52 t53 t54 t55))
(step t57 (cl (or (and b_d (not a_d)) (not b_d) (not (not a_d)))) :rule contraction :premises (t56))
(step t58 (cl (or (and b_d (not a_d)) (not b_d) a_d)) :rule resolution :premises (t47 t51 t57))
(step t59 (cl (and b_d (not a_d)) (not b_d) a_d) :rule or :premises (t58))
(step t60 (cl a_d (not b_d) (and b_d (not a_d))) :rule reordering :premises (t59))
(step t61 (cl (not (= a_d b_d)) a_d (not b_d)) :rule equiv_pos1)
(step t62 (cl a_d (not (= a_d b_d)) (not b_d)) :rule reordering :premises (t61))
(step t63 (cl (not b_d) (not b_d)) :rule resolution :premises (t45 t46 t60 t44 t62 t44))
(step t64 (cl (not b_d)) :rule contraction :premises (t63))
(step t65 (cl (= a_d b_d)) :rule resolution :premises (t4 t44 t64))
(step t66 (cl (or (and a_d (not b_d)) (and b_d (not a_d)))) :rule resolution :premises (t2 t65))
(step t67 (cl (not (and b_d (not a_d))) b_d) :rule and_pos)
(step t68 (cl b_d (not (and b_d (not a_d)))) :rule reordering :premises (t67))
(step t69 (cl (not (and b_d (not a_d)))) :rule resolution :premises (t68 t64))
(step t70 (cl (not (and a_d (not b_d))) a_d) :rule and_pos)
(step t71 (cl a_d (not (and a_d (not b_d)))) :rule reordering :premises (t70))
(step t72 (cl (not (and a_d (not b_d)))) :rule resolution :premises (t71 t44))
(step t73 (cl) :rule resolution :premises (t1 t66 t69 t72))
