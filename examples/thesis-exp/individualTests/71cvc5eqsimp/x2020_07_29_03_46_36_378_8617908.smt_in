; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S_d 0)
(declare-sort S_list_d 0)
(declare-sort A_s_a_fun_fun_d 0)
(declare-sort A_literal_multiset_set_d 0)
(declare-sort A_literal_multiset_list_d 0)
(declare-sort A_literal_multiset_a_literal_multiset_fun_d 0)
(declare-fun m_d () A_literal_multiset_set_d)
(declare-fun s_d () A_literal_multiset_a_literal_multiset_fun_d)
(declare-fun cAs_d () A_literal_multiset_list_d)
(declare-fun eta_d () S_d)
(declare-fun map_d (A_literal_multiset_a_literal_multiset_fun_d A_literal_multiset_list_d) A_literal_multiset_list_d)
(declare-fun s_M_d (A_s_a_fun_fun_d A_literal_multiset_a_literal_multiset_fun_d A_literal_multiset_set_d) A_literal_multiset_a_literal_multiset_fun_d)
(declare-fun cAs0_d () A_literal_multiset_list_d)
(declare-fun eta_s0_d () S_list_d)
(declare-fun subst_atm_d () A_s_a_fun_fun_d)
(declare-fun subst_cls_list_d (A_s_a_fun_fun_d A_literal_multiset_list_d S_d) A_literal_multiset_list_d)
(declare-fun subst_cls_lists_d (A_s_a_fun_fun_d A_literal_multiset_list_d S_list_d) A_literal_multiset_list_d)
(assert (! (not (= (subst_cls_list_d subst_atm_d (map_d s_d cAs0_d) eta_d) (map_d (s_M_d subst_atm_d s_d m_d) cAs_d))) :named a0))
(assert (! (= (subst_cls_lists_d subst_atm_d (map_d s_d cAs0_d) eta_s0_d) (subst_cls_list_d subst_atm_d (map_d s_d cAs0_d) eta_d)) :named a1))
(assert (! (= (subst_cls_lists_d subst_atm_d (map_d s_d cAs0_d) eta_s0_d) (map_d (s_M_d subst_atm_d s_d m_d) cAs_d)) :named a2))
(check-sat)
;;;;(get-proof)
