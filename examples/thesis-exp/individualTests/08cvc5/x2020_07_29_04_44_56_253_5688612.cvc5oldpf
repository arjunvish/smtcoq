(assume a0 (not (not (true_cls_d (interp_d s_d n_d) (plus_d (sum_mset_d (mset_d cs_d)) d_d)))))
(assume a1 (not (true_cls_d (interp_d s_d n_d) (plus_d (sum_mset_d (mset_d cs_d)) d_d))))
(step t1 (cl (not (= (not (not (true_cls_d (interp_d s_d n_d) (plus_d (sum_mset_d (mset_d cs_d)) d_d)))) (true_cls_d (interp_d s_d n_d) (plus_d (sum_mset_d (mset_d cs_d)) d_d)))) (not (not (not (true_cls_d (interp_d s_d n_d) (plus_d (sum_mset_d (mset_d cs_d)) d_d))))) (true_cls_d (interp_d s_d n_d) (plus_d (sum_mset_d (mset_d cs_d)) d_d))) :rule equiv_pos2)
(step t2 (cl (= (not (not (true_cls_d (interp_d s_d n_d) (plus_d (sum_mset_d (mset_d cs_d)) d_d)))) (true_cls_d (interp_d s_d n_d) (plus_d (sum_mset_d (mset_d cs_d)) d_d)))) :rule all_simplify :args (not_simplify1 (true_cls_d (interp_d s_d n_d) (plus_d (sum_mset_d (mset_d cs_d)) d_d))))
(step t3 (cl (true_cls_d (interp_d s_d n_d) (plus_d (sum_mset_d (mset_d cs_d)) d_d))) :rule resolution :premises (t1 t2 a0))
(step t4 (cl) :rule resolution :premises (t3 a1))
