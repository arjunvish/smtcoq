(assume a0 (not (less_d zero_d (of_nat_d delta_d))))
(assume a1 (less_d zero_d (of_nat_d epsilon_d)))
(assume a2 (= (of_nat_d delta_d) (of_nat_d epsilon_d)))
(step t0 (cl (not (= (= true false) false)) (not (= true false)) false) :rule equiv_pos2)
(step t1 (cl (= (= true false) false)) :rule all_simplify)
(step t2 (cl (= (= (less_d zero_d (of_nat_d epsilon_d)) true) (less_d zero_d (of_nat_d epsilon_d)))) :rule equiv_simplify)
(step t3 (cl (= (less_d zero_d (of_nat_d epsilon_d)) true) (not (less_d zero_d (of_nat_d epsilon_d)))) :rule equiv2 :premises (t2))
(step t4 (cl (= (less_d zero_d (of_nat_d epsilon_d)) true)) :rule resolution :premises (t3 a1))
(step t5 (cl (= true (less_d zero_d (of_nat_d epsilon_d)))) :rule symm :premises (t4))
(step t6 (cl (= zero_d zero_d)) :rule refl)
(step t7 (cl (= (of_nat_d epsilon_d) (of_nat_d delta_d))) :rule symm :premises (a2))
(step t8 (cl (= (less_d zero_d (of_nat_d epsilon_d)) (less_d zero_d (of_nat_d delta_d)))) :rule cong :premises (t6 t7))
(step t9 (cl (= (= (less_d zero_d (of_nat_d delta_d)) false) (not (less_d zero_d (of_nat_d delta_d))))) :rule equiv_simplify)
(step t10 (cl (= (less_d zero_d (of_nat_d delta_d)) false) (not (not (less_d zero_d (of_nat_d delta_d))))) :rule equiv2 :premises (t9))
(step t11 (cl (not (not (not (less_d zero_d (of_nat_d delta_d))))) (less_d zero_d (of_nat_d delta_d))) :rule not_not)
(step t12 (cl (= (less_d zero_d (of_nat_d delta_d)) false) (less_d zero_d (of_nat_d delta_d))) :rule resolution :premises (t10 t11))
(step t13 (cl (= (less_d zero_d (of_nat_d delta_d)) false)) :rule resolution :premises (t12 a0))
(step t14 (cl (= true false)) :rule trans :premises (t5 t8 t13))
(step t15 (cl false) :rule resolution :premises (t0 t1 t14))
(step t16 (cl (not false)) :rule false)
(step t17 (cl) :rule resolution :premises (t15 t16))
