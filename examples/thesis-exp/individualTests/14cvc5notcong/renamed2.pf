(assume a0 (not (or (gt g s d e a w c (r ua) sa) (= (r ua) sa))))
(assume a1 (gt g s d e a w c (r ua) sa))
(step t1 (cl (or (gt g s d e a w c (r ua) sa) (= sa (r ua))) (not (gt g s d e a w c (r ua) sa))) :rule or_neg)
(step t2 (cl (or (gt g s d e a w c (r ua) sa) (= sa (r ua)))) :rule resolution :premises (t1 a1))
(step t3 (cl (not (= (not (or (gt g s d e a w c (r ua) sa) (= (r ua) sa))) (not (or (gt g s d e a w c (r ua) sa) (= sa (r ua)))))) (not (not (or (gt g s d e a w c (r ua) sa) (= (r ua) sa)))) (not (or (gt g s d e a w c (r ua) sa) (= sa (r ua))))) :rule equiv_pos2)
(step t4 (cl (= (gt g s d e a w c (r ua) sa) (gt g s d e a w c (r ua) sa))) :rule refl)
(step t5 (cl (= (= (r ua) sa) (= sa (r ua)))) :rule all_simplify)
(step t6 (cl (= (or (gt g s d e a w c (r ua) sa) (= (r ua) sa)) (or (gt g s d e a w c (r ua) sa) (= sa (r ua))))) :rule cong :premises (t4 t5))
(step t7 (cl (= (not (or (gt g s d e a w c (r ua) sa) (= (r ua) sa))) (not (or (gt g s d e a w c (r ua) sa) (= sa (r ua)))))) :rule cong :premises (t6))
(step t8 (cl (not (or (gt g s d e a w c (r ua) sa) (= sa (r ua))))) :rule resolution :premises (t3 t7 a0))
(step t9 (cl) :rule resolution :premises (t2 t8))
