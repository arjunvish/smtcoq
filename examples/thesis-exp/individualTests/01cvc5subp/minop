     = false
     : bool
Certif after storing shared terms: 
(a0, AssumeAST, (cl  (x)), [], [])
(a1, AssumeAST, (cl  (y)), [], [])
(a2, AssumeAST, (cl  ((not (and  x y)))), [], [])
(t3, SubproofAST
	(t3.a0, AssumeAST, (cl  (x)), [], [])
(t3.a1, AssumeAST, (cl  (y)), [], [])
(t3.t2, AndnAST, (cl  ((and  x y)) ((not x)) ((not y))), [], [])
(t3.t3, ResoAST, (cl  ((and  x y))), [ t3.t2 t3.a0 t3.a1], [])
(t3, DischargeAST, (cl  ((not x)) ((not y)) ((and  x y))), [], [])
	, (cl ), [], [])
(t4, AndsimpAST, (cl  (((and  x (false)) = (false)))), [], [])
(t5, ResoAST, (cl ), [ t3 a0 a1 a2], [])

Certif after process_fins: 
(a0, AssumeAST, (cl  (x)), [], [])
(a1, AssumeAST, (cl  (y)), [], [])
(a2, AssumeAST, (cl  ((not (and  x y)))), [], [])
(t3, SubproofAST
	(t3.a0, AssumeAST, (cl  (x)), [], [])
(t3.a1, AssumeAST, (cl  (y)), [], [])
(t3.t2, AndnAST, (cl  ((and  x y)) ((not x)) ((not y))), [], [])
(t3.t3, ResoAST, (cl  ((and  x y))), [ t3.t2 t3.a0 t3.a1], [])
(t3, DischargeAST, (cl  ((not x)) ((not y)) ((and  x y))), [], [])
	, (cl ), [], [])
(t4, AndsimpAST, (cl  (((and  x (false)) = (false)))), [], [])
(t5, ResoAST, (cl ), [ t3 a0 a1 a2], [])

Certif after process_hole: 
(a0, AssumeAST, (cl  (x)), [], [])
(a1, AssumeAST, (cl  (y)), [], [])
(a2, AssumeAST, (cl  ((not (and  x y)))), [], [])
(t3, SubproofAST
	(t3.a0, AssumeAST, (cl  (x)), [], [])
(t3.a1, AssumeAST, (cl  (y)), [], [])
(t3.t2, AndnAST, (cl  ((and  x y)) ((not x)) ((not y))), [], [])
(t3.t3, ResoAST, (cl  ((and  x y))), [ t3.t2 t3.a0 t3.a1], [])
(t3, DischargeAST, (cl  ((not x)) ((not y)) ((and  x y))), [], [])
	, (cl ), [], [])
(t4, AndsimpAST, (cl  (((and  x (false)) = (false)))), [], [])
(t5, ResoAST, (cl ), [ t3 a0 a1 a2], [])

Certif after process_notnot: 
(a0, AssumeAST, (cl  (x)), [], [])
(a1, AssumeAST, (cl  (y)), [], [])
(a2, AssumeAST, (cl  ((not (and  x y)))), [], [])
(t3, SubproofAST
	(t3.a0, AssumeAST, (cl  (x)), [], [])
(t3.a1, AssumeAST, (cl  (y)), [], [])
(t3.t2, AndnAST, (cl  ((and  x y)) ((not x)) ((not y))), [], [])
(t3.t3, ResoAST, (cl  ((and  x y))), [ t3.t2 t3.a0 t3.a1], [])
(t3, DischargeAST, (cl  ((not x)) ((not y)) ((and  x y))), [], [])
	, (cl ), [], [])
(t4, AndsimpAST, (cl  (((and  x (false)) = (false)))), [], [])
(t5, ResoAST, (cl ), [ t3 a0 a1 a2], [])

Certif after process_same: 
(a0, AssumeAST, (cl  (x)), [], [])
(a1, AssumeAST, (cl  (y)), [], [])
(a2, AssumeAST, (cl  ((not (and  x y)))), [], [])
(t3, SubproofAST
	(t3.a0, AssumeAST, (cl  (x)), [], [])
(t3.a1, AssumeAST, (cl  (y)), [], [])
(t3.t2, AndnAST, (cl  ((and  x y)) ((not x)) ((not y))), [], [])
(t3.t3, ResoAST, (cl  ((and  x y))), [ t3.t2 t3.a0 t3.a1], [])
(t3, DischargeAST, (cl  ((not x)) ((not y)) ((and  x y))), [], [])
	, (cl ), [], [])
(t4, AndsimpAST, (cl  (((and  x (false)) = (false)))), [], [])
(t5, ResoAST, (cl ), [ t3 a0 a1 a2], [])

Certif after process_cong: 
(a0, AssumeAST, (cl  (x)), [], [])
(a1, AssumeAST, (cl  (y)), [], [])
(a2, AssumeAST, (cl  ((not (and  x y)))), [], [])
(t3, SubproofAST
	(t3.a0, AssumeAST, (cl  (x)), [], [])
(t3.a1, AssumeAST, (cl  (y)), [], [])
(t3.t2, AndnAST, (cl  ((and  x y)) ((not x)) ((not y))), [], [])
(t3.t3, ResoAST, (cl  ((and  x y))), [ t3.t2 t3.a0 t3.a1], [])
(t3, DischargeAST, (cl  ((not x)) ((not y)) ((and  x y))), [], [])
	, (cl ), [], [])
(t4, AndsimpAST, (cl  (((and  x (false)) = (false)))), [], [])
(t5, ResoAST, (cl ), [ t3 a0 a1 a2], [])

Certif after process_trans: 
(a0, AssumeAST, (cl  (x)), [], [])
(a1, AssumeAST, (cl  (y)), [], [])
(a2, AssumeAST, (cl  ((not (and  x y)))), [], [])
(t3, SubproofAST
	(t3.a0, AssumeAST, (cl  (x)), [], [])
(t3.a1, AssumeAST, (cl  (y)), [], [])
(t3.t2, AndnAST, (cl  ((and  x y)) ((not x)) ((not y))), [], [])
(t3.t3, ResoAST, (cl  ((and  x y))), [ t3.t2 t3.a0 t3.a1], [])
(t3, DischargeAST, (cl  ((not x)) ((not y)) ((and  x y))), [], [])
	, (cl ), [], [])
(t4, AndsimpAST, (cl  (((and  x (false)) = (false)))), [], [])
(t5, ResoAST, (cl ), [ t3 a0 a1 a2], [])

Certif after process_simplify: 
(a0, AssumeAST, (cl  (x)), [], [])
(a1, AssumeAST, (cl  (y)), [], [])
(a2, AssumeAST, (cl  ((not (and  x y)))), [], [])
(t3, SubproofAST
	(t3.a0, AssumeAST, (cl  (x)), [], [])
(t3.a1, AssumeAST, (cl  (y)), [], [])
(t3.t2, AndnAST, (cl  ((and  x y)) ((not x)) ((not y))), [], [])
(t3.t3, ResoAST, (cl  ((and  x y))), [ t3.t2 t3.a0 t3.a1], [])
(t3, DischargeAST, (cl  ((not x)) ((not y)) ((and  x y))), [], [])
	, (cl ), [], [])
(x10, Equn1AST, (cl  (((and  x (false)) = (false))) ((not (and  x (false)))) ((not (false)))), [], [])
(x15, SubproofAST
	(x1, AssumeAST, (cl  ((and  x (false)))), [], [])
(x2, AndpAST, (cl  ((not (and  x (false)))) ((false))), [], [ 1])
(x3, ResoAST, (cl  ((false))), [ x1 x2], [])
(x8, DischargeAST, (cl  ((not (and  x (false)))) ((false))), [], [])
	, (cl ), [], [])
(x12, ResoAST, (cl  (((and  x (false)) = (false))) ((not (and  x (false))))), [ x8 x10], [])
(x11, Equn2AST, (cl  (((and  x (false)) = (false))) ((and  x (false))) ((false))), [], [])
(x14, SubproofAST
	(x4, AssumeAST, (cl  ((false))), [], [])
(x5, WeakenAST, (cl  ((false)) ((and  x (false)))), [ x4], [])
(x6, FalsAST, (cl  ((not (false)))), [], [])
(x7, ResoAST, (cl  ((and  x (false)))), [ x5 x6], [])
(x9, DischargeAST, (cl  ((not (false))) ((and  x (false)))), [], [])
	, (cl ), [], [])
(x13, ResoAST, (cl  (((and  x (false)) = (false))) ((and  x (false)))), [ x9 x11], [])
(t4, ResoAST, (cl  (((and  x (false)) = (false)))), [ x12 x13], [])
(t5, ResoAST, (cl ), [ t3 a0 a1 a2], [])

Certif after process_proj: 
(a0, AssumeAST, (cl  (x)), [], [])
(a1, AssumeAST, (cl  (y)), [], [])
(a2, AssumeAST, (cl  ((not (and  x y)))), [], [])
(t3, SubproofAST
	(t3.a0, AssumeAST, (cl  (x)), [], [])
(t3.a1, AssumeAST, (cl  (y)), [], [])
(t3.t2, AndnAST, (cl  ((and  x y)) ((not x)) ((not y))), [], [])
(t3.t3, ResoAST, (cl  ((and  x y))), [ t3.t2 t3.a0 t3.a1], [])
(t3, DischargeAST, (cl  ((not x)) ((not y)) ((and  x y))), [], [])
	, (cl ), [], [])
(x10, Equn1AST, (cl  (((and  x (false)) = (false))) ((not (and  x (false)))) ((not (false)))), [], [])
(x15, SubproofAST
	(x1, AssumeAST, (cl  ((and  x (false)))), [], [])
(x2, AndpAST, (cl  ((not (and  x (false)))) ((false))), [], [ 1])
(x3, ResoAST, (cl  ((false))), [ x1 x2], [])
(x8, DischargeAST, (cl  ((not (and  x (false)))) ((false))), [], [])
	, (cl ), [], [])
(x12, ResoAST, (cl  (((and  x (false)) = (false))) ((not (and  x (false))))), [ x8 x10], [])
(x11, Equn2AST, (cl  (((and  x (false)) = (false))) ((and  x (false))) ((false))), [], [])
(x14, SubproofAST
	(x4, AssumeAST, (cl  ((false))), [], [])
(x5, WeakenAST, (cl  ((false)) ((and  x (false)))), [ x4], [])
(x6, FalsAST, (cl  ((not (false)))), [], [])
(x7, ResoAST, (cl  ((and  x (false)))), [ x5 x6], [])
(x9, DischargeAST, (cl  ((not (false))) ((and  x (false)))), [], [])
	, (cl ), [], [])
(x13, ResoAST, (cl  (((and  x (false)) = (false))) ((and  x (false)))), [ x9 x11], [])
(t4, ResoAST, (cl  (((and  x (false)) = (false)))), [ x12 x13], [])
(t5, ResoAST, (cl ), [ t3 a0 a1 a2], [])

Certif after process_subproof: 
(a0, AssumeAST, (cl  (x)), [], [])
(a1, AssumeAST, (cl  (y)), [], [])
(a2, AssumeAST, (cl  ((not (and  x y)))), [], [])
(t3, AndnAST, (cl  ((and  x y (not (and  x y)))) ((not x)) ((not y)) ((and  x y))), [], [])
(x10, Equn1AST, (cl  (((and  x (false)) = (false))) ((not (and  x (false)))) ((not (false)))), [], [])
(x8, AndnAST, (cl  ((and  (and  x (false)) (not (false)))) ((not (and  x (false)))) ((false))), [], [])
(x12, ResoAST, (cl  ((and  (and  x (false)) (not (false)))) (((and  x (false)) = (false))) ((not (and  x (false))))), [ x8 x10], [])
(x11, Equn2AST, (cl  (((and  x (false)) = (false))) ((and  x (false))) ((false))), [], [])
(x9, AndnAST, (cl  ((and  (false) (not (and  x (false))))) ((not (false))) ((and  x (false)))), [], [])
(x13, ResoAST, (cl  ((and  (false) (not (and  x (false))))) (((and  x (false)) = (false))) ((and  x (false)))), [ x9 x11], [])
(t4, ResoAST, (cl  ((and  (and  x (false)) (not (false)))) ((and  (false) (not (and  x (false))))) (((and  x (false)) = (false)))), [ x12 x13], [])
(t5, ResoAST, (cl  ((and  x y (not (and  x y))))), [ t3 a0 a1 a2], [])
x ^ y ^ (~(x ^ y))
(x19, AndpAST, (cl  ((not (and  (false) (not (and  x (false)))))) ((false))), [], [ 0])
~(F ^ ~(x ^ F)), F
(x16, ResoAST, (cl  ((and  x y (not (and  x y)))) ((false))), [ t5 x19], [])
(x5, WeakenAST, (cl  ((and  x y (not (and  x y)))) ((false)) ((and  x (false)))), [ x16], [])
(x6, FalsAST, (cl  ((not (false)))), [], [])
(x7, ResoAST, (cl  ((and  x y (not (and  x y)))) ((and  x (false)))), [ x5 x6], [])
(x17, AndpAST, (cl  ((not (and  (false) (not (and  x (false)))))) ((not (and  x (false))))), [], [ 1])
(x18, ResoAST, (cl  ((and  x y (not (and  x y)))) ((not (and  x (false))))), [ t5 x17], [])
(x20, ResoAST, (cl  ((and  x y (not (and  x y))))), [ x7 x18], [])
(x24, AndpAST, (cl  ((not (and  (and  x (false)) (not (false))))) ((and  x (false)))), [], [ 0])
(x21, ResoAST, (cl  ((and  x y (not (and  x y)))) ((and  x (false)))), [ x20 x24], [])
(x2, AndpAST, (cl  ((not (and  x (false)))) ((false))), [], [ 1])
(x3, ResoAST, (cl  ((and  x y (not (and  x y)))) ((false))), [ x21 x2], [])
(x22, AndpAST, (cl  ((not (and  (and  x (false)) (not (false))))) ((not (false)))), [], [ 1])
(x23, ResoAST, (cl  ((and  x y (not (and  x y)))) ((not (false)))), [ x20 x22], [])
(x25, ResoAST, (cl  ((and  x y (not (and  x y))))), [ x3 x23], [])
(x31, AndpAST, (cl  ((not (and  x y (not (and  x y))))) (y)), [], [ 1])
(x27, ResoAST, (cl  (y)), [ x25 x31], [])
(x30, AndpAST, (cl  ((not (and  x y (not (and  x y))))) (x)), [], [ 0])
(x26, ResoAST, (cl  (x)), [ x25 x30], [])
(t3.t2, AndnAST, (cl  ((and  x y)) ((not x)) ((not y))), [], [])
(t3.t3, ResoAST, (cl  ((and  x y))), [ t3.t2 x26 x27], [])
(x28, AndpAST, (cl  ((not (and  x y (not (and  x y))))) ((not (and  x y)))), [], [ 2])
(x29, ResoAST, (cl  ((not (and  x y)))), [ x25 x28], [])
(x32, ResoAST, (cl ), [ t3.t3 x29], [])

