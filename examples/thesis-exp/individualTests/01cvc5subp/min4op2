Certif after storing shared terms: 
(a0, AssumeAST, (cl  (x)), [], [])
(a1, AssumeAST, (cl  (y)), [], [])
(a2, AssumeAST, (cl  ((not (and  x y)))), [], [])
(t3, SubproofAST
	(t3.a0, AssumeAST, (cl  (x)), [], [])
(t3.a1, SubproofAST
	(t3.a1.a0, AssumeAST, (cl  (y)), [], [])
(t3.a1.t1, AndnAST, (cl  ((and  x y)) ((not x)) ((not y))), [], [])
(t3.a1.t2, ResoAST, (cl  ((and  x y))), [ t3.a1.t1 t3.a1.a0 t3.a0], [])
(t3.a1, DischargeAST, (cl  ((not y)) ((and  x y))), [], [])
	, (cl ), [], [])
(t3.t2, ResoAST, (cl  ((and  x y))), [ t3.a1 a1], [])
(t3, DischargeAST, (cl  ((not x)) ((and  x y))), [], [])
	, (cl ), [], [])
(t4, ResoAST, (cl ), [ t3 a0 a2], [])

Certif after process_cong: 
(a0, AssumeAST, (cl  (x)), [], [])
(a1, AssumeAST, (cl  (y)), [], [])
(a2, AssumeAST, (cl  ((not (and  x y)))), [], [])
(t3, SubproofAST
	(t3.a0, AssumeAST, (cl  (x)), [], [])
(t3.a1, SubproofAST
	(t3.a1.a0, AssumeAST, (cl  (y)), [], [])
(t3.a1.t1, AndnAST, (cl  ((and  x y)) ((not x)) ((not y))), [], [])
(t3.a1.t2, ResoAST, (cl  ((and  x y))), [ t3.a1.t1 t3.a1.a0 t3.a0], [])
(t3.a1, DischargeAST, (cl  ((not y)) ((and  x y))), [], [])
	, (cl ), [], [])
(t3.t2, ResoAST, (cl  ((and  x y))), [ t3.a1 a1], [])
(t3, DischargeAST, (cl  ((not x)) ((and  x y))), [], [])
	, (cl ), [], [])
(t4, ResoAST, (cl ), [ t3 a0 a2], [])

Certif after process_subproof: 
(a0, AssumeAST, (cl  (x)), [], [])
(a1, AssumeAST, (cl  (y)), [], [])
(a2, AssumeAST, (cl  ((not (and  x y)))), [], [])
(t3, AndnAST, (cl  ((and  x (not (and  x y)))) ((not x)) ((and  x y))), [], [])
(t4, ResoAST, (cl  ((and  x (not (and  x y))))), [ t3 a0 a2], [])
(x9, AndpAST, (cl  ((not (and  x (not (and  x y))))) (x)), [], [ 0])
(x6, ResoAST, (cl  (x)), [ t4 x9], [])
(t3.a1, AndnAST, (cl  ((and  y (not (and  x y)))) ((not y)) ((and  x y))), [], [])
(t3.t2, ResoAST, (cl  ((and  y (not (and  x y)))) ((and  x y))), [ t3.a1 a1], [])
(x4, AndpAST, (cl  ((not (and  y (not (and  x y))))) (y)), [], [ 0])
(x1, ResoAST, (cl  (y)), [ t3.t2 x4], [])
(t3.a1.t1, AndnAST, (cl  ((and  x y)) ((not x)) ((not y))), [], [])
(t3.a1.t2, ResoAST, (cl  ((and  x y))), [ t3.a1.t1 x1 x6], [])
(x2, AndpAST, (cl  ((not (and  y (not (and  x y))))) ((not (and  x y)))), [], [ 1])
(x3, ResoAST, (cl  ((not (and  x y))) ((and  x y))), [ t3.t2 x2], [])
(x5, ResoAST, (cl  ((and  x y))), [ t3.a1.t2 x3], [])
(x7, AndpAST, (cl  ((not (and  x (not (and  x y))))) ((not (and  x y)))), [], [ 1])
(x8, ResoAST, (cl  ((not (and  x y)))), [ t4 x7], [])
(x10, ResoAST, (cl ), [ t3.t2 x8], [])

Certif after process_trivial: 
(a0, AssumeAST, (cl  (x)), [], [])
(a1, AssumeAST, (cl  (y)), [], [])
(a2, AssumeAST, (cl  ((not (and  x y)))), [], [])
(t3, AndnAST, (cl  ((and  x (not (and  x y)))) ((not x)) ((and  x y))), [], [])
(t4, ResoAST, (cl  ((and  x (not (and  x y))))), [ t3 a0 a2], [])
------------------------andn	--a0	--------a2
x ^ ~(x ^ y), ~x, x ^ y			x		~(x ^ y)
------------------------------------------------res
				x ^ ~(x ^ y)
(x9, AndpAST, (cl  ((not (and  x (not (and  x y))))) (x)), [], [ 0])
(x6, ResoAST, (cl  (x)), [ t4 x9], [])
------------t4	------------------andp
x ^ ~(x ^ y)	~(x ^ ~(x ^ y)), x
----------------------------------res
				x
(t3.a1, AndnAST, (cl  ((and  y (not (and  x y)))) ((not y)) ((and  x y))), [], [])
(t3.t2, ResoAST, (cl  ((and  y (not (and  x y)))) ((and  x y))), [ t3.a1 a1], [])
-----------------------andn	--a1
y ^ ~(x ^ y), ~y, x ^ y		y
-----------------------------res
	y ^ ~(x ^ y), x ^ y
(x4, AndpAST, (cl  ((not (and  y (not (and  x y))))) (y)), [], [ 0])
(x1, ResoAST, (cl  (y)), [ t3.t2 x4], [])
-------------------t3.t2	------------------x4
y ^ ~(x ^ y), x ^ y			~(y ^ ~(x ^ y)), y
----------------------------------------------res
(t3.a1.t1, AndnAST, (cl  ((and  x y)) ((not x)) ((not y))), [], [])
(t3.a1.t2, ResoAST, (cl  ((and  x y))), [ t3.a1.t1 x1 x6], [])
(x2, AndpAST, (cl  ((not (and  y (not (and  x y))))) ((not (and  x y)))), [], [ 1])
(x11, WeakenAST, (cl  ((and  x y))), [ t3.a1.t2], [])
(x5, ResoAST, (cl  ((and  x y))), [ x11], [])
(x7, AndpAST, (cl  ((not (and  x (not (and  x y))))) ((not (and  x y)))), [], [ 1])
(x8, ResoAST, (cl  ((not (and  x y)))), [ t4 x7], [])
(x10, ResoAST, (cl ), [ t3.t2 x8], [])

File "./min4.v", line 5, characters 2-252:
Error:
Anomaly
"File "trace/smtTrace.ml", line 311, characters 4-10: Assertion failed."
Please report at http://coq.inria.fr/bugs/.

