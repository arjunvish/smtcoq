     = false
     : bool
Certif after storing shared terms: 
(a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(a1, AssumeAST, (cl  ((not (x = (true))))), [], [])
(t2, SubproofAST
	(t2.a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(t2.t1, NotsimpAST, (cl  (((not (false)) = (true)))), [], [])
(t2.t2, TransAST, (cl  ((x = (true)))), [ t2.a0 t2.t1], [])
(t3, DischargeAST, (cl  ((not (x = (not (false))))) ((x = (true)))), [], [])
	, (cl ), [], [])
(t4, ResoAST, (cl ), [ t3 a0 a1], [])

Certif after process_fins: 
(a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(a1, AssumeAST, (cl  ((not (x = (true))))), [], [])
(t2, SubproofAST
	(t2.a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(t2.t1, NotsimpAST, (cl  (((not (false)) = (true)))), [], [])
(t2.t2, TransAST, (cl  ((x = (true)))), [ t2.a0 t2.t1], [])
(t3, DischargeAST, (cl  ((not (x = (not (false))))) ((x = (true)))), [], [])
	, (cl ), [], [])
(t4, ResoAST, (cl ), [ t3 a0 a1], [])

Certif after process_hole: 
(a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(a1, AssumeAST, (cl  ((not (x = (true))))), [], [])
(t2, SubproofAST
	(t2.a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(t2.t1, NotsimpAST, (cl  (((not (false)) = (true)))), [], [])
(t2.t2, TransAST, (cl  ((x = (true)))), [ t2.a0 t2.t1], [])
(t3, DischargeAST, (cl  ((not (x = (not (false))))) ((x = (true)))), [], [])
	, (cl ), [], [])
(t4, ResoAST, (cl ), [ t3 a0 a1], [])

Certif after process_notnot: 
(a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(a1, AssumeAST, (cl  ((not (x = (true))))), [], [])
(t2, SubproofAST
	(t2.a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(t2.t1, NotsimpAST, (cl  (((not (false)) = (true)))), [], [])
(t2.t2, TransAST, (cl  ((x = (true)))), [ t2.a0 t2.t1], [])
(t3, DischargeAST, (cl  ((not (x = (not (false))))) ((x = (true)))), [], [])
	, (cl ), [], [])
(t4, ResoAST, (cl ), [ t3 a0 a1], [])

Certif after process_same: 
(a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(a1, AssumeAST, (cl  ((not (x = (true))))), [], [])
(t2, SubproofAST
	(t2.a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(t2.t1, NotsimpAST, (cl  (((not (false)) = (true)))), [], [])
(t2.t2, TransAST, (cl  ((x = (true)))), [ t2.a0 t2.t1], [])
(t3, DischargeAST, (cl  ((not (x = (not (false))))) ((x = (true)))), [], [])
	, (cl ), [], [])
(t4, ResoAST, (cl ), [ t3 a0 a1], [])

Certif after process_cong: 
(a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(a1, AssumeAST, (cl  ((not (x = (true))))), [], [])
(t2, SubproofAST
	(t2.a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(t2.t1, NotsimpAST, (cl  (((not (false)) = (true)))), [], [])
(t2.t2, TransAST, (cl  ((x = (true)))), [ t2.a0 t2.t1], [])
(t3, DischargeAST, (cl  ((not (x = (not (false))))) ((x = (true)))), [], [])
	, (cl ), [], [])
(t4, ResoAST, (cl ), [ t3 a0 a1], [])

Certif after process_trans: 
(a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(a1, AssumeAST, (cl  ((not (x = (true))))), [], [])
(t2, SubproofAST
	(t2.a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(t2.t1, NotsimpAST, (cl  (((not (false)) = (true)))), [], [])
(x4, Equp1AST, (cl  ((not (x = (not (false))))) (x) ((not (not (false))))), [], [])
(x3, ResoAST, (cl  (x) ((not (not (false))))), [ x4 t2.a0], [])
(x2, Equp1AST, (cl  ((not ((not (false)) = (true)))) ((not (false))) ((not (true)))), [], [])
(x1, ResoAST, (cl  ((not (false))) ((not (true)))), [ x2 t2.t1], [])
(x5, ResoAST, (cl  (x) ((not (true)))), [ x3 x1], [])
(x6, Equn2AST, (cl  ((x = (true))) (x) ((true))), [], [])
(x7, ResoAST, (cl  ((x = (true))) (x)), [ x5 x6], [])
(x11, Equp2AST, (cl  ((not (x = (not (false))))) ((not x)) ((not (false)))), [], [])
(x10, ResoAST, (cl  ((not x)) ((not (false)))), [ x11 t2.a0], [])
(x9, Equp2AST, (cl  ((not ((not (false)) = (true)))) ((not (not (false)))) ((true))), [], [])
(x8, ResoAST, (cl  ((not (not (false)))) ((true))), [ x9 t2.t1], [])
(x12, ResoAST, (cl  ((not x)) ((true))), [ x10 x8], [])
(x13, Equn1AST, (cl  ((x = (true))) ((not x)) ((not (true)))), [], [])
(x14, ResoAST, (cl  ((x = (true))) ((not x))), [ x12 x13], [])
(t2.t2, ResoAST, (cl  ((x = (true)))), [ x7 x14], [])
(t3, DischargeAST, (cl  ((not (x = (not (false))))) ((x = (true)))), [], [])
	, (cl ), [], [])
(t4, ResoAST, (cl ), [ t3 a0 a1], [])

Certif after process_simplify: 
(a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(a1, AssumeAST, (cl  ((not (x = (true))))), [], [])
(t2, SubproofAST
	(t2.a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(x21, Equn1AST, (cl  (((not (false)) = (true))) ((not (not (false)))) ((not (true)))), [], [])
(x26, SubproofAST
	(x18, AssumeAST, (cl  ((not (false)))), [], [])
(x15, TrueAST, (cl  ((true))), [], [])
(x19, DischargeAST, (cl  ((not (not (false)))) ((true))), [], [])
	, (cl ), [], [])
(x23, ResoAST, (cl  (((not (false)) = (true))) ((not (not (false))))), [ x19 x21], [])
(x22, Equn2AST, (cl  (((not (false)) = (true))) ((not (false))) ((true))), [], [])
(x25, SubproofAST
	(x17, AssumeAST, (cl  ((true))), [], [])
(x16, FalsAST, (cl  ((not (false)))), [], [])
(x20, DischargeAST, (cl  ((not (true))) ((not (false)))), [], [])
	, (cl ), [], [])
(x24, ResoAST, (cl  (((not (false)) = (true))) ((not (false)))), [ x20 x22], [])
(t2.t1, ResoAST, (cl  (((not (false)) = (true)))), [ x23 x24], [])
(x4, Equp1AST, (cl  ((not (x = (not (false))))) (x) ((not (not (false))))), [], [])
(x3, ResoAST, (cl  (x) ((not (not (false))))), [ x4 t2.a0], [])
(x2, Equp1AST, (cl  ((not ((not (false)) = (true)))) ((not (false))) ((not (true)))), [], [])
(x1, ResoAST, (cl  ((not (false))) ((not (true)))), [ x2 t2.t1], [])
(x5, ResoAST, (cl  (x) ((not (true)))), [ x3 x1], [])
(x6, Equn2AST, (cl  ((x = (true))) (x) ((true))), [], [])
(x7, ResoAST, (cl  ((x = (true))) (x)), [ x5 x6], [])
(x11, Equp2AST, (cl  ((not (x = (not (false))))) ((not x)) ((not (false)))), [], [])
(x10, ResoAST, (cl  ((not x)) ((not (false)))), [ x11 t2.a0], [])
(x9, Equp2AST, (cl  ((not ((not (false)) = (true)))) ((not (not (false)))) ((true))), [], [])
(x8, ResoAST, (cl  ((not (not (false)))) ((true))), [ x9 t2.t1], [])
(x12, ResoAST, (cl  ((not x)) ((true))), [ x10 x8], [])
(x13, Equn1AST, (cl  ((x = (true))) ((not x)) ((not (true)))), [], [])
(x14, ResoAST, (cl  ((x = (true))) ((not x))), [ x12 x13], [])
(t2.t2, ResoAST, (cl  ((x = (true)))), [ x7 x14], [])
(t3, DischargeAST, (cl  ((not (x = (not (false))))) ((x = (true)))), [], [])
	, (cl ), [], [])
(t4, ResoAST, (cl ), [ t3 a0 a1], [])

Certif after process_proj: 
(a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(a1, AssumeAST, (cl  ((not (x = (true))))), [], [])
(t2, SubproofAST
	(t2.a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(x21, Equn1AST, (cl  (((not (false)) = (true))) ((not (not (false)))) ((not (true)))), [], [])
(x26, SubproofAST
	(x18, AssumeAST, (cl  ((not (false)))), [], [])
(x15, TrueAST, (cl  ((true))), [], [])
(x19, DischargeAST, (cl  ((not (not (false)))) ((true))), [], [])
	, (cl ), [], [])
(x23, ResoAST, (cl  (((not (false)) = (true))) ((not (not (false))))), [ x19 x21], [])
(x22, Equn2AST, (cl  (((not (false)) = (true))) ((not (false))) ((true))), [], [])
(x25, SubproofAST
	(x17, AssumeAST, (cl  ((true))), [], [])
(x16, FalsAST, (cl  ((not (false)))), [], [])
(x20, DischargeAST, (cl  ((not (true))) ((not (false)))), [], [])
	, (cl ), [], [])
(x24, ResoAST, (cl  (((not (false)) = (true))) ((not (false)))), [ x20 x22], [])
(t2.t1, ResoAST, (cl  (((not (false)) = (true)))), [ x23 x24], [])
(x4, Equp1AST, (cl  ((not (x = (not (false))))) (x) ((not (not (false))))), [], [])
(x3, ResoAST, (cl  (x) ((not (not (false))))), [ x4 t2.a0], [])
(x2, Equp1AST, (cl  ((not ((not (false)) = (true)))) ((not (false))) ((not (true)))), [], [])
(x1, ResoAST, (cl  ((not (false))) ((not (true)))), [ x2 t2.t1], [])
(x5, ResoAST, (cl  (x) ((not (true)))), [ x3 x1], [])
(x6, Equn2AST, (cl  ((x = (true))) (x) ((true))), [], [])
(x7, ResoAST, (cl  ((x = (true))) (x)), [ x5 x6], [])
(x11, Equp2AST, (cl  ((not (x = (not (false))))) ((not x)) ((not (false)))), [], [])
(x10, ResoAST, (cl  ((not x)) ((not (false)))), [ x11 t2.a0], [])
(x9, Equp2AST, (cl  ((not ((not (false)) = (true)))) ((not (not (false)))) ((true))), [], [])
(x8, ResoAST, (cl  ((not (not (false)))) ((true))), [ x9 t2.t1], [])
(x12, ResoAST, (cl  ((not x)) ((true))), [ x10 x8], [])
(x13, Equn1AST, (cl  ((x = (true))) ((not x)) ((not (true)))), [], [])
(x14, ResoAST, (cl  ((x = (true))) ((not x))), [ x12 x13], [])
(t2.t2, ResoAST, (cl  ((x = (true)))), [ x7 x14], [])
(t3, DischargeAST, (cl  ((not (x = (not (false))))) ((x = (true)))), [], [])
	, (cl ), [], [])
(t4, ResoAST, (cl ), [ t3 a0 a1], [])

Certif after process_subproof: 
(a0, AssumeAST, (cl  ((x = (not (false))))), [], [])
(a1, AssumeAST, (cl  ((not (x = (true))))), [], [])
(t3, AndnAST, (cl  ((and  (x = (not (false))) (not (x = (true))))) ((not (x = (not (false))))) ((x = (true)))), [], [])
(t4, ResoAST, (cl  ((and  (x = (not (false))) (not (x = (true)))))), [ t3 a0 a1], [])
(x40, AndpAST, (cl  ((not (and  (x = (not (false))) (not (x = (true)))))) ((x = (not (false))))), [], [ 0])
(x37, ResoAST, (cl  ((x = (not (false))))), [ t4 x40], [])
(x21, Equn1AST, (cl  (((not (false)) = (true))) ((not (not (false)))) ((not (true)))), [], [])
(x19, AndnAST, (cl  ((and  (not (false)) (not (true)))) ((not (not (false)))) ((true))), [], [])
(x23, ResoAST, (cl  ((and  (not (false)) (not (true)))) (((not (false)) = (true))) ((not (not (false))))), [ x19 x21], [])
(x22, Equn2AST, (cl  (((not (false)) = (true))) ((not (false))) ((true))), [], [])
(x20, AndnAST, (cl  ((and  (true) (not (not (false))))) ((not (true))) ((not (false)))), [], [])
(x24, ResoAST, (cl  ((and  (true) (not (not (false))))) (((not (false)) = (true))) ((not (false)))), [ x20 x22], [])
(t2.t1, ResoAST, (cl  ((and  (not (false)) (not (true)))) ((and  (true) (not (not (false))))) (((not (false)) = (true)))), [ x23 x24], [])
(x4, Equp1AST, (cl  ((not (x = (not (false))))) (x) ((not (not (false))))), [], [])
(x3, ResoAST, (cl  (x) ((not (not (false))))), [ x4 x37], [])
(x2, Equp1AST, (cl  ((not ((not (false)) = (true)))) ((not (false))) ((not (true)))), [], [])
(x1, ResoAST, (cl  ((and  (not (false)) (not (true)))) ((and  (true) (not (not (false))))) ((not (false))) ((not (true)))), [ x2 t2.t1], [])
(x5, ResoAST, (cl  ((and  (not (false)) (not (true)))) ((and  (true) (not (not (false))))) (x) ((not (true)))), [ x3 x1], [])
(x6, Equn2AST, (cl  ((x = (true))) (x) ((true))), [], [])
(x7, ResoAST, (cl  ((and  (not (false)) (not (true)))) ((and  (true) (not (not (false))))) ((x = (true))) (x)), [ x5 x6], [])
(x11, Equp2AST, (cl  ((not (x = (not (false))))) ((not x)) ((not (false)))), [], [])
(x10, ResoAST, (cl  ((not x)) ((not (false)))), [ x11 x37], [])
(x9, Equp2AST, (cl  ((not ((not (false)) = (true)))) ((not (not (false)))) ((true))), [], [])
(x8, ResoAST, (cl  ((and  (not (false)) (not (true)))) ((and  (true) (not (not (false))))) ((not (not (false)))) ((true))), [ x9 t2.t1], [])
(x12, ResoAST, (cl  ((and  (not (false)) (not (true)))) ((and  (true) (not (not (false))))) ((not x)) ((true))), [ x10 x8], [])
(x13, Equn1AST, (cl  ((x = (true))) ((not x)) ((not (true)))), [], [])
(x14, ResoAST, (cl  ((and  (not (false)) (not (true)))) ((and  (true) (not (not (false))))) ((x = (true))) ((not x))), [ x12 x13], [])
(t2.t2, ResoAST, (cl  ((and  (not (false)) (not (true)))) ((and  (true) (not (not (false))))) ((x = (true)))), [ x7 x14], [])
(x30, AndpAST, (cl  ((not (and  (true) (not (not (false)))))) ((true))), [], [ 0])
(x27, ResoAST, (cl  ((and  (not (false)) (not (true)))) ((true))), [ t2.t2 x30], [])
(x16, FalsAST, (cl  ((not (false)))), [], [])
(x28, AndpAST, (cl  ((not (and  (true) (not (not (false)))))) ((not (not (false))))), [], [ 1])
(x29, ResoAST, (cl  ((and  (not (false)) (not (true)))) ((not (not (false)))) ((x = (true)))), [ t2.t2 x28], [])
(x31, ResoAST, (cl  ((and  (not (false)) (not (true)))) ((x = (true)))), [ x16 x29], [])
(x35, AndpAST, (cl  ((not (and  (not (false)) (not (true))))) ((not (false)))), [], [ 0])
(x32, ResoAST, (cl  ((not (false)))), [ x31 x35], [])
(x15, TrueAST, (cl  ((true))), [], [])
(x33, AndpAST, (cl  ((not (and  (not (false)) (not (true))))) ((not (true)))), [], [ 1])
(x34, ResoAST, (cl  ((not (true))) ((x = (true)))), [ x31 x33], [])
(x36, ResoAST, (cl  ((x = (true)))), [ x15 x34], [])
(x38, AndpAST, (cl  ((not (and  (x = (not (false))) (not (x = (true)))))) ((not (x = (true))))), [], [ 1])
(x39, ResoAST, (cl  ((not (x = (true))))), [ t4 x38], [])
(x41, ResoAST, (cl ), [ t2.t2 x39], [])

