     = false
     : bool
Certif after process_cong: 
(a0, AssumeAST, (cl  ((not ((not ((f ( x)) = a)) = (not (a = (f ( x)))))))), [], [])
(t1, AllsimpAST, (cl  ((((f ( x)) = a) = (a = (f ( x)))))), [], [])
(x1, Equp1AST, (cl  ((not (((f ( x)) = a) = (a = (f ( x)))))) ((not ((f ( x)) = a))) ((a = (f ( x))))), [], [])
(x2, ResoAST, (cl  ((not ((f ( x)) = a))) ((a = (f ( x))))), [ x1 t1], [])
(x3, Equn1AST, (cl  (((not ((f ( x)) = a)) = (not (a = (f ( x)))))) (((f ( x)) = a)) ((a = (f ( x))))), [], [])
(x4, ResoAST, (cl  (((not ((f ( x)) = a)) = (not (a = (f ( x)))))) ((a = (f ( x))))), [ x2 x3], [])
(x5, Equp2AST, (cl  ((not (((f ( x)) = a) = (a = (f ( x)))))) ((not (a = (f ( x))))) (((f ( x)) = a))), [], [])
(x6, ResoAST, (cl  ((not (a = (f ( x))))) (((f ( x)) = a))), [ x5 t1], [])
(x7, Equn2AST, (cl  (((not ((f ( x)) = a)) = (not (a = (f ( x)))))) ((not ((f ( x)) = a))) ((not (a = (f ( x)))))), [], [])
(x8, ResoAST, (cl  (((not ((f ( x)) = a)) = (not (a = (f ( x)))))) ((not (a = (f ( x)))))), [ x6 x7], [])
(t2, ResoAST, (cl  (((not ((f ( x)) = a)) = (not (a = (f ( x))))))), [ x4 x8], [])
(t3, ResoAST, (cl ), [ t2 a0], [])

Certif after process_simplify: 
(a0, AssumeAST, (cl  ((not ((not ((f ( x)) = a)) = (not (a = (f ( x)))))))), [], [])
(x9, Equn1AST, (cl  ((((f ( x)) = a) = (a = (f ( x))))) ((not ((f ( x)) = a)))), [], [])
(x10, Equn2AST, (cl  ((((f ( x)) = a) = (a = (f ( x))))) (((f ( x)) = a))), [], [])
(t1, ResoAST, (cl  ((((f ( x)) = a) = (a = (f ( x)))))), [ x9 x10], [])
(x1, Equp1AST, (cl  ((not (((f ( x)) = a) = (a = (f ( x)))))) ((not ((f ( x)) = a))) ((a = (f ( x))))), [], [])
(x2, ResoAST, (cl  ((not ((f ( x)) = a))) ((a = (f ( x))))), [ x1 t1], [])
(x3, Equn1AST, (cl  (((not ((f ( x)) = a)) = (not (a = (f ( x)))))) (((f ( x)) = a)) ((a = (f ( x))))), [], [])
(x4, ResoAST, (cl  (((not ((f ( x)) = a)) = (not (a = (f ( x)))))) ((a = (f ( x))))), [ x2 x3], [])
(x5, Equp2AST, (cl  ((not (((f ( x)) = a) = (a = (f ( x)))))) ((not (a = (f ( x))))) (((f ( x)) = a))), [], [])
(x6, ResoAST, (cl  ((not (a = (f ( x))))) (((f ( x)) = a))), [ x5 t1], [])
(x7, Equn2AST, (cl  (((not ((f ( x)) = a)) = (not (a = (f ( x)))))) ((not ((f ( x)) = a))) ((not (a = (f ( x)))))), [], [])
(x8, ResoAST, (cl  (((not ((f ( x)) = a)) = (not (a = (f ( x)))))) ((not (a = (f ( x)))))), [ x6 x7], [])
(t2, ResoAST, (cl  (((not ((f ( x)) = a)) = (not (a = (f ( x))))))), [ x4 x8], [])
(t3, ResoAST, (cl ), [ t2 a0], [])

Trivial clause at id x1!
Trivial clause at id x2!
Trivial clause at id x2!
Trivial clause at id x5!
Trivial clause at id x6!
Trivial clause at id x6!
Certif after process_trivial: 
(a0, AssumeAST, (cl  ((not ((not ((f ( x)) = a)) = (not (a = (f ( x)))))))), [], [])
(x9, Equn1AST, (cl  ((((f ( x)) = a) = (a = (f ( x))))) ((not ((f ( x)) = a)))), [], [])
(x10, Equn2AST, (cl  ((((f ( x)) = a) = (a = (f ( x))))) (((f ( x)) = a))), [], [])
(t1, ResoAST, (cl  ((((f ( x)) = a) = (a = (f ( x)))))), [ x9 x10], [])
--------------------------------eqn1    ------------------------------eqn2
(f x = a) = (a = f x), f x != a        (f x = a) = (a = f x), f x = a
----------------------------------------------------------------------res
                         (f x = a) = (a = f x)
(x3, Equn1AST, (cl  (((not ((f ( x)) = a)) = (not (a = (f ( x)))))) (((f ( x)) = a)) ((a = (f ( x))))), [], [])
(x11, WeakenAST, (cl  ((not (((f ( x)) = a) = (a = (f ( x)))))) (((not ((f ( x)) = a)) = (not (a = (f ( x)))))) (((f ( x)) = a)) ((a = (f ( x))))), [ x3], [])
-----------------------------------------eqn1
(f x != a) = (a != f x), f x = a, a = f x
----------------------------------------------------------------weaken
(f x = a) != (a = f x), (f x != a) = (a != f x), f x = a, a = f x
(x4, ResoAST, (cl  (((not ((f ( x)) = a)) = (not (a = (f ( x)))))) ((a = (f ( x))))), [ x11 t1], [])
------------------------------------------------------------------x11 ---------------------t1
(f x = a) != (a = f x), (f x != a) = (a != f x), f x = a, a = f x     (f x = a) = (a = f x)
--------------------------------------------------------------------------------------------
                         (f x != a) = (a != f x), a = f x
(x7, Equn2AST, (cl  (((not ((f ( x)) = a)) = (not (a = (f ( x)))))) ((not ((f ( x)) = a))) ((not (a = (f ( x)))))), [], [])
(x12, WeakenAST, (cl  ((not (((f ( x)) = a) = (a = (f ( x)))))) (((not ((f ( x)) = a)) = (not (a = (f ( x)))))) ((not ((f ( x)) = a))) ((not (a = (f ( x)))))), [ x7], [])
--------------------------------------------eqn2
(f x != a) = (a != f x), f x != a, a != f x
------------------------------------------------------------------weaken
(f x = a) != (a = f x), (f x != a) = (a != f x), f x != a, a != f x
(x8, ResoAST, (cl  (((not ((f ( x)) = a)) = (not (a = (f ( x)))))) ((not (a = (f ( x)))))), [ x12 t1], [])
-------------------------------------------------------------------x12     ---------------------t1
(f x = a) != (a = f x), (f x != a) = (a != f x), f x != a, a != f x        (f x = a) = (a = f x)
------------------------------------------------------------------------------------------------res
                         (f x != a) = (a != f x), a != f x
(t2, ResoAST, (cl  (((not ((f ( x)) = a)) = (not (a = (f ( x))))))), [ x4 x8], [])
--------------------------------x4   ---------------------------------x8
(f x != a) = (a != f x), a = f x     (f x != a) = (a != f x), a != f x
-----------------------------------------------------------------------res
                         (f x != a) = (a != f x)
(t3, ResoAST, (cl ), [ t2 a0], [])
-----------------------t2     ------------------------a0
(f x != a) = (a != f x)       (f x != a) != (a != f x)  
------------------------------------------------------res
                         []