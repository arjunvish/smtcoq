; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S_d 0)
(declare-sort A_s_a_fun_fun_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-sort A_literal_multiset_list_d 0)
(declare-sort A_literal_multiset_multiset_d 0)
(declare-fun e () A_literal_multiset_d)
(declare-fun c () A_literal_multiset_list_d)
(declare-fun d () A_literal_multiset_d)
(declare-fun f () A_literal_multiset_d)
(declare-fun b () A_literal_multiset_list_d)
(declare-fun a () A_literal_multiset_d)
(declare-fun M (A_literal_multiset_list_d) A_literal_multiset_multiset_d)
(declare-fun PL (A_literal_multiset_d A_literal_multiset_d) A_literal_multiset_d)
(declare-fun P () S_d)
(declare-fun Q () S_d)
(declare-fun R () S_d)
(declare-fun S () S_d)
(declare-fun SM (A_literal_multiset_multiset_d) A_literal_multiset_d)
(declare-fun atm () A_s_a_fun_fun_d)
(declare-fun cls (A_s_a_fun_fun_d A_literal_multiset_d S_d) A_literal_multiset_d)
(assert (! (not (= e f)) :named a0))
(assert (! (= f (cls atm (PL (SM (M c)) d) P)) :named a1))
(assert (! (= e (cls atm (PL (SM (M b)) a) Q)) :named a2))
(assert (! (= a d) :named a3))
(assert (! (= b c) :named a4))
(assert (! (= R P) :named a5))
(assert (! (= S Q) :named a6))
(assert (! (= S R) :named a7))
(check-sat)
;;;;(get-proof)
