(assume a0 (not (= e_d e_da)))
(assume a1 (= e_da (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) da_d) sigma_d)))
(assume a2 (= e_d (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_da)))
(assume a3 (= dAa_d da_d))
(assume a4 (= cs_da cs_d))
(assume a5 (= sigma_db sigma_d))
(assume a6 (= sigma_dc sigma_da))
(assume a7 (= sigma_dc sigma_db))
(step t0 (cl (not (= (not (= e_d e_da)) false)) (not (not (= e_d e_da))) false) :rule equiv_pos2)
(step t1 (cl (= subst_atm_d subst_atm_d)) :rule refl)
(step t2 (cl (= (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) (plus_d (sum_mset_d (mset_d cs_da)) dAa_d))) :rule refl)
(step t3 (cl (= sigma_da sigma_dc)) :rule symm :premises (a6))
(step t4 (cl (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_da) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc))) :rule cong :premises (t1 t2 t3))
(step t5 (cl (= e_d (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc))) :rule trans :premises (a2 t4))
(step t6 (cl (= cs_d cs_da)) :rule symm :premises (a4))
(step t7 (cl (= (mset_d cs_d) (mset_d cs_da))) :rule cong :premises (t6))
(step t8 (cl (= (sum_mset_d (mset_d cs_d)) (sum_mset_d (mset_d cs_da)))) :rule cong :premises (t7))
(step t9 (cl (= da_d dAa_d)) :rule symm :premises (a3))
(step t10 (cl (= (plus_d (sum_mset_d (mset_d cs_d)) da_d) (plus_d (sum_mset_d (mset_d cs_da)) dAa_d))) :rule cong :premises (t8 t9))
(step t11 (cl (= sigma_d sigma_db)) :rule symm :premises (a5))
(step t12 (cl (= sigma_db sigma_dc)) :rule symm :premises (a7))
(step t13 (cl (= sigma_d sigma_dc)) :rule trans :premises (t11 t12))
(step t14 (cl (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) da_d) sigma_d) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc))) :rule cong :premises (t1 t10 t13))
(step t15 (cl (= e_da (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc))) :rule trans :premises (a1 t14))
(step t16 (cl (= (= e_d e_da) (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc)))) :rule cong :premises (t5 t15))
(step t17 (cl (= (not (= e_d e_da)) (not (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc))))) :rule cong :premises (t16))
(step t18 (cl (= (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc)) true)) :rule all_simplify)
(step t19 (cl (= (not (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc))) (not true))) :rule cong :premises (t18))
(step t20 (cl (= (not true) false)) :rule all_simplify)
(step t21 (cl (= (not (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc))) false)) :rule trans :premises (t19 t20))
(step t22 (cl (= (not (= e_d e_da)) false)) :rule trans :premises (t17 t21))
(step t23 (cl false) :rule resolution :premises (t0 t22 a0))
(step t24 (cl (not false)) :rule false)
(step t25 (cl) :rule resolution :premises (t23 t24))
