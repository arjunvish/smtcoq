; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_d 0)
(declare-sort A_set_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-sort A_literal_multiset_set_d 0)
(declare-fun d_d () A_literal_multiset_d)
(declare-fun n_d () A_literal_multiset_set_d)
(declare-fun s_d (A_literal_multiset_d) A_literal_multiset_d)
(declare-fun d_da () A_literal_multiset_d)
(declare-fun max_d (A_set_d) A_d)
(declare-fun less_d (A_d A_d) Bool)
(declare-fun zero_d () A_literal_multiset_d)
(declare-fun member_d (A_literal_multiset_d A_literal_multiset_set_d) Bool)
(declare-fun atms_of_d (A_literal_multiset_d) A_set_d)
(assert (! (not false) :named a0))
(assert (! (=> (less_d (max_d (atms_of_d d_d)) (max_d (atms_of_d d_da))) false) :named a1))
(assert (! (or (and (member_d d_d n_d) (= (s_d d_d) zero_d)) (less_d (max_d (atms_of_d d_d)) (max_d (atms_of_d d_da)))) :named a2))
(assert (! (=> (and (member_d d_d n_d) (= (s_d d_d) zero_d)) false) :named a3))
(check-sat)
;;;;(get-proof)
