; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort Nat_d 0)
(declare-sort A_list_d 0)
(declare-sort S_list_d 0)
(declare-sort A_multiset_list_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-sort A_literal_multiset_list_d 0)
(declare-fun n_d () Nat_d)
(declare-fun as_d () A_list_d)
(declare-fun cs_d () A_literal_multiset_list_d)
(declare-fun aAs_d () A_multiset_list_d)
(declare-fun as0_d () A_list_d)
(declare-fun cAs_d () A_literal_multiset_list_d)
(declare-fun cs0_d () A_literal_multiset_list_d)
(declare-fun dA0_d () A_literal_multiset_d)
(declare-fun suc_d (Nat_d) Nat_d)
(declare-fun aAs0_d () A_multiset_list_d)
(declare-fun as0_da () A_list_d)
(declare-fun cAs0_d () A_literal_multiset_list_d)
(declare-fun cons_d (A_literal_multiset_d A_literal_multiset_list_d) A_literal_multiset_list_d)
(declare-fun cs0_da () A_literal_multiset_list_d)
(declare-fun size_d (S_list_d) Nat_d)
(declare-fun zero_d () Nat_d)
(declare-fun aAs0_da () A_multiset_list_d)
(declare-fun cAs0_da () A_literal_multiset_list_d)
(declare-fun rho_s_d () S_list_d)
(declare-fun size_da (A_literal_multiset_list_d) Nat_d)
(declare-fun size_db (A_list_d) Nat_d)
(declare-fun size_dc (A_multiset_list_d) Nat_d)
(declare-fun eta_s0_d () S_list_d)
(declare-fun eta_s0_da () S_list_d)
(declare-fun renamings_apart_d (A_literal_multiset_list_d) S_list_d)
(assert (! (not (= (size_d eta_s0_d) (size_da cAs_d))) :named a0))
(assert (! (= (size_da cAs_d) n_d) :named a1))
(assert (! (= (size_da cs0_d) n_d) :named a2))
(assert (! (= (size_da cs_d) n_d) :named a3))
(assert (! (= (size_da cs0_da) n_d) :named a4))
(assert (! (= (size_db as_d) n_d) :named a5))
(assert (! (= (size_da cAs0_d) n_d) :named a6))
(assert (! (= (size_d rho_s_d) n_d) :named a7))
(assert (! (= (size_d eta_s0_da) n_d) :named a8))
(assert (! (= (size_d (renamings_apart_d (cons_d dA0_d cAs0_d))) (suc_d n_d)) :named a9))
(assert (! (= (size_da cAs0_da) n_d) :named a10))
(assert (! (= (size_dc aAs_d) n_d) :named a11))
(assert (! (= (size_d eta_s0_d) n_d) :named a12))
(assert (! (not (= n_d zero_d)) :named a13))
(assert (! (= (size_db as0_d) n_d) :named a14))
(assert (! (= (size_dc aAs0_d) n_d) :named a15))
(assert (! (= (size_db as0_da) n_d) :named a16))
(assert (! (= (size_dc aAs0_da) n_d) :named a17))
(check-sat)
;;;;(get-proof)
