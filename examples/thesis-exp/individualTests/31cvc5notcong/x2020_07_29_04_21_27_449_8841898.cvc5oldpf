(assume a0 (not (= (size_d eta_s0_d) (size_da cAs_d))))
(assume a1 (= (size_da cAs_d) n_d))
(assume a2 (= (size_da cs0_d) n_d))
(assume a3 (= (size_da cs_d) n_d))
(assume a4 (= (size_da cs0_da) n_d))
(assume a5 (= (size_db as_d) n_d))
(assume a6 (= (size_da cAs0_d) n_d))
(assume a7 (= (size_d rho_s_d) n_d))
(assume a8 (= (size_d eta_s0_da) n_d))
(assume a9 (= (size_d (renamings_apart_d (cons_d dA0_d cAs0_d))) (suc_d n_d)))
(assume a10 (= (size_da cAs0_da) n_d))
(assume a11 (= (size_dc aAs_d) n_d))
(assume a12 (= (size_d eta_s0_d) n_d))
(assume a13 (not (= n_d zero_d)))
(assume a14 (= (size_db as0_d) n_d))
(assume a15 (= (size_dc aAs0_d) n_d))
(assume a16 (= (size_db as0_da) n_d))
(assume a17 (= (size_dc aAs0_da) n_d))
(step t1 (cl (not (= (= (size_d eta_s0_d) n_d) (= (size_d eta_s0_d) (size_da cAs_d)))) (not (= (size_d eta_s0_d) n_d)) (= (size_d eta_s0_d) (size_da cAs_d))) :rule equiv_pos2)
(step t2 (cl (= (= (size_d eta_s0_d) n_d) (= n_d (size_d eta_s0_d)))) :rule all_simplify)
(step t3 (cl (= n_d (size_da cAs_d))) :rule symm :premises (a1))
(step t4 (cl (= (size_d eta_s0_d) (size_d eta_s0_d))) :rule refl)
(step t5 (cl (= (= n_d (size_d eta_s0_d)) (= (size_da cAs_d) (size_d eta_s0_d)))) :rule cong :premises (t3 t4))
(step t6 (cl (= (= (size_da cAs_d) (size_d eta_s0_d)) (= (size_d eta_s0_d) (size_da cAs_d)))) :rule all_simplify)
(step t7 (cl (= (= n_d (size_d eta_s0_d)) (= (size_d eta_s0_d) (size_da cAs_d)))) :rule trans :premises (t5 t6))
(step t8 (cl (= (= (size_d eta_s0_d) n_d) (= (size_d eta_s0_d) (size_da cAs_d)))) :rule trans :premises (t2 t7))
(step t9 (cl (= (size_d eta_s0_d) (size_da cAs_d))) :rule resolution :premises (t1 t8 a12))
(step t10 (cl) :rule resolution :premises (t9 a0))
