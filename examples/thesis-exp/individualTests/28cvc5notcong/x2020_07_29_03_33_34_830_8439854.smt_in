(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_list_d 0)
(declare-sort A_multiset_d 0)
(declare-sort A_s_a_fun_fun_d 0)
(declare-sort A_a_literal_fun_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-sort A_literal_multiset_set_d 0)
(declare-sort A_literal_multiset_a_literal_multiset_fun_d 0)
(declare-fun d () A_literal_multiset_d)
(declare-fun m () A_literal_multiset_set_d)
(declare-fun s () A_literal_multiset_a_literal_multiset_fun_d)
(declare-fun a () A_list_d)
(declare-fun neg () A_a_literal_fun_d)
(declare-fun S (A_s_a_fun_fun_d A_literal_multiset_a_literal_multiset_fun_d A_literal_multiset_set_d A_literal_multiset_d) A_literal_multiset_d)
(declare-fun mset (A_list_d) A_multiset_d)
(declare-fun pl (A_literal_multiset_d A_literal_multiset_d) A_literal_multiset_d)
(declare-fun o () A_literal_multiset_d)
(declare-fun t () Bool)
(declare-fun sa () A_s_a_fun_fun_d)
(declare-fun im (A_a_literal_fun_d A_multiset_d) A_literal_multiset_d)
(assert (! (not t) :named a0))
(assert (! (=> (=> (not (= (S sa s m (pl d (im neg (mset a)))) o)) (not (= (S sa s m (pl d (im neg (mset a)))) o))) t) :named a1))
(check-sat)