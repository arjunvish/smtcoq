; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_set_d 0)
(declare-sort A_set_set_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-sort A_literal_multiset_set_d 0)
(declare-sort A_literal_multiset_list_d 0)
(declare-sort A_literal_multiset_multiset_d 0)
(declare-sort A_literal_multiset_a_set_fun_d 0)
(declare-fun cs_d () A_literal_multiset_list_d)
(declare-fun cAs_d () A_literal_multiset_list_d)
(declare-fun set_d (A_literal_multiset_list_d) A_literal_multiset_set_d)
(declare-fun sup_d (A_set_set_d) A_set_d)
(declare-fun mset_d (A_literal_multiset_list_d) A_literal_multiset_multiset_d)
(declare-fun image_d (A_literal_multiset_a_set_fun_d A_literal_multiset_set_d) A_set_set_d)
(declare-fun atms_of_d () A_literal_multiset_a_set_fun_d)
(declare-fun fun_app_d (A_literal_multiset_a_set_fun_d A_literal_multiset_d) A_set_d)
(declare-fun less_eq_d (A_set_d A_set_d) Bool)
(declare-fun sum_mset_d (A_literal_multiset_multiset_d) A_literal_multiset_d)
(assert (! (not (less_eq_d (fun_app_d atms_of_d (sum_mset_d (mset_d cs_d))) (sup_d (image_d atms_of_d (set_d cAs_d))))) :named a0))
(assert (! (less_eq_d (fun_app_d atms_of_d (sum_mset_d (mset_d cs_d))) (fun_app_d atms_of_d (sum_mset_d (mset_d cAs_d)))) :named a1))
(assert (! (= (fun_app_d atms_of_d (sum_mset_d (mset_d cAs_d))) (sup_d (image_d atms_of_d (set_d cAs_d)))) :named a2))
(check-sat)
;;;;(get-proof)
