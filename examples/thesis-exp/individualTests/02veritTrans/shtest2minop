     = false
     : bool
Certif after storing shared terms: 
(a0, AssumeAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (not (not (tcd ( (iod ( nd)) nd))))))), [], [])
(a1, AssumeAST, (cl  (((not (not (tcd ( (iod ( nd)) nd)))) = (tcd ( (iod ( nd)) nd))))), [], [])
(a2, AssumeAST, (cl  ((not ((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))))), [], [])
(t3, TransAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd))))), [ a0 a1], [])
(t4, ResoAST, (cl ), [ a2 t3], [])

Certif after process_fins: 
(a0, AssumeAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (not (not (tcd ( (iod ( nd)) nd))))))), [], [])
(a1, AssumeAST, (cl  (((not (not (tcd ( (iod ( nd)) nd)))) = (tcd ( (iod ( nd)) nd))))), [], [])
(a2, AssumeAST, (cl  ((not ((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))))), [], [])
(t3, TransAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd))))), [ a0 a1], [])
(t4, ResoAST, (cl ), [ a2 t3], [])

Certif after process_hole: 
(a0, AssumeAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (not (not (tcd ( (iod ( nd)) nd))))))), [], [])
(a1, AssumeAST, (cl  (((not (not (tcd ( (iod ( nd)) nd)))) = (tcd ( (iod ( nd)) nd))))), [], [])
(a2, AssumeAST, (cl  ((not ((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))))), [], [])
(t3, TransAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd))))), [ a0 a1], [])
(t4, ResoAST, (cl ), [ a2 t3], [])

Certif after process_notnot: 
(a0, AssumeAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (not (not (tcd ( (iod ( nd)) nd))))))), [], [])
(a1, AssumeAST, (cl  (((not (not (tcd ( (iod ( nd)) nd)))) = (tcd ( (iod ( nd)) nd))))), [], [])
(a2, AssumeAST, (cl  ((not ((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))))), [], [])
(t3, TransAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd))))), [ a0 a1], [])
(t4, ResoAST, (cl ), [ a2 t3], [])

Certif after process_same: 
(a0, AssumeAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (not (not (tcd ( (iod ( nd)) nd))))))), [], [])
(a1, AssumeAST, (cl  (((not (not (tcd ( (iod ( nd)) nd)))) = (tcd ( (iod ( nd)) nd))))), [], [])
(a2, AssumeAST, (cl  ((not ((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))))), [], [])
(t3, TransAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd))))), [ a0 a1], [])
(t4, ResoAST, (cl ), [ a2 t3], [])

Certif after process_cong: 
(a0, AssumeAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (not (not (tcd ( (iod ( nd)) nd))))))), [], [])
(a1, AssumeAST, (cl  (((not (not (tcd ( (iod ( nd)) nd)))) = (tcd ( (iod ( nd)) nd))))), [], [])
(a2, AssumeAST, (cl  ((not ((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))))), [], [])
(t3, TransAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd))))), [ a0 a1], [])
(t4, ResoAST, (cl ), [ a2 t3], [])

Certif after process_trans: 
(a0, AssumeAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (not (not (tcd ( (iod ( nd)) nd))))))), [], [])
(a1, AssumeAST, (cl  (((not (not (tcd ( (iod ( nd)) nd)))) = (tcd ( (iod ( nd)) nd))))), [], [])
(a2, AssumeAST, (cl  ((not ((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))))), [], [])
(x4, Equp1AST, (cl  ((not ((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (not (not (tcd ( (iod ( nd)) nd))))))) ((imp  (not (tcd ( (iod ( nd)) nd))) (false))) ((not (not (not (tcd ( (iod ( nd)) nd))))))), [], [])
(x3, ResoAST, (cl  ((imp  (not (tcd ( (iod ( nd)) nd))) (false))) ((not (not (not (tcd ( (iod ( nd)) nd))))))), [ x4 a0], [])
(x2, Equp1AST, (cl  ((not ((not (not (tcd ( (iod ( nd)) nd)))) = (tcd ( (iod ( nd)) nd))))) ((not (not (tcd ( (iod ( nd)) nd))))) ((not (tcd ( (iod ( nd)) nd))))), [], [])
(x1, ResoAST, (cl  ((not (not (tcd ( (iod ( nd)) nd))))) ((not (tcd ( (iod ( nd)) nd))))), [ x2 a1], [])
(x5, ResoAST, (cl  ((imp  (not (tcd ( (iod ( nd)) nd))) (false))) ((not (tcd ( (iod ( nd)) nd))))), [ x3 x1], [])
(x6, Equn2AST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))) ((imp  (not (tcd ( (iod ( nd)) nd))) (false))) ((tcd ( (iod ( nd)) nd)))), [], [])
(x7, ResoAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))) ((imp  (not (tcd ( (iod ( nd)) nd))) (false)))), [ x5 x6], [])
(x11, Equp2AST, (cl  ((not ((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (not (not (tcd ( (iod ( nd)) nd))))))) ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false)))) ((not (not (tcd ( (iod ( nd)) nd)))))), [], [])
(x10, ResoAST, (cl  ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false)))) ((not (not (tcd ( (iod ( nd)) nd)))))), [ x11 a0], [])
(x9, Equp2AST, (cl  ((not ((not (not (tcd ( (iod ( nd)) nd)))) = (tcd ( (iod ( nd)) nd))))) ((not (not (not (tcd ( (iod ( nd)) nd)))))) ((tcd ( (iod ( nd)) nd)))), [], [])
(x8, ResoAST, (cl  ((not (not (not (tcd ( (iod ( nd)) nd)))))) ((tcd ( (iod ( nd)) nd)))), [ x9 a1], [])
(x12, ResoAST, (cl  ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false)))) ((tcd ( (iod ( nd)) nd)))), [ x10 x8], [])
(x13, Equn1AST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))) ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false)))) ((not (tcd ( (iod ( nd)) nd))))), [], [])
(x14, ResoAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))) ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false))))), [ x12 x13], [])
(t3, ResoAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd))))), [ x7 x14], [])
(t4, ResoAST, (cl ), [ a2 t3], [])

Certif after process_simplify: 
(a0, AssumeAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (not (not (tcd ( (iod ( nd)) nd))))))), [], [])
(a1, AssumeAST, (cl  (((not (not (tcd ( (iod ( nd)) nd)))) = (tcd ( (iod ( nd)) nd))))), [], [])
(a2, AssumeAST, (cl  ((not ((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))))), [], [])
(x4, Equp1AST, (cl  ((not ((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (not (not (tcd ( (iod ( nd)) nd))))))) ((imp  (not (tcd ( (iod ( nd)) nd))) (false))) ((not (not (not (tcd ( (iod ( nd)) nd))))))), [], [])
(x3, ResoAST, (cl  ((imp  (not (tcd ( (iod ( nd)) nd))) (false))) ((not (not (not (tcd ( (iod ( nd)) nd))))))), [ x4 a0], [])
(x2, Equp1AST, (cl  ((not ((not (not (tcd ( (iod ( nd)) nd)))) = (tcd ( (iod ( nd)) nd))))) ((not (not (tcd ( (iod ( nd)) nd))))) ((not (tcd ( (iod ( nd)) nd))))), [], [])
(x1, ResoAST, (cl  ((not (not (tcd ( (iod ( nd)) nd))))) ((not (tcd ( (iod ( nd)) nd))))), [ x2 a1], [])
(x5, ResoAST, (cl  ((imp  (not (tcd ( (iod ( nd)) nd))) (false))) ((not (tcd ( (iod ( nd)) nd))))), [ x3 x1], [])
(x6, Equn2AST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))) ((imp  (not (tcd ( (iod ( nd)) nd))) (false))) ((tcd ( (iod ( nd)) nd)))), [], [])
(x7, ResoAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))) ((imp  (not (tcd ( (iod ( nd)) nd))) (false)))), [ x5 x6], [])
(x11, Equp2AST, (cl  ((not ((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (not (not (tcd ( (iod ( nd)) nd))))))) ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false)))) ((not (not (tcd ( (iod ( nd)) nd)))))), [], [])
(x10, ResoAST, (cl  ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false)))) ((not (not (tcd ( (iod ( nd)) nd)))))), [ x11 a0], [])
(x9, Equp2AST, (cl  ((not ((not (not (tcd ( (iod ( nd)) nd)))) = (tcd ( (iod ( nd)) nd))))) ((not (not (not (tcd ( (iod ( nd)) nd)))))) ((tcd ( (iod ( nd)) nd)))), [], [])
(x8, ResoAST, (cl  ((not (not (not (tcd ( (iod ( nd)) nd)))))) ((tcd ( (iod ( nd)) nd)))), [ x9 a1], [])
(x12, ResoAST, (cl  ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false)))) ((tcd ( (iod ( nd)) nd)))), [ x10 x8], [])
(x13, Equn1AST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))) ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false)))) ((not (tcd ( (iod ( nd)) nd))))), [], [])
(x14, ResoAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))) ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false))))), [ x12 x13], [])
(t3, ResoAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd))))), [ x7 x14], [])
(t4, ResoAST, (cl ), [ a2 t3], [])

Certif after process_proj: 
(a0, AssumeAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (not (not (tcd ( (iod ( nd)) nd))))))), [], [])
(a1, AssumeAST, (cl  (((not (not (tcd ( (iod ( nd)) nd)))) = (tcd ( (iod ( nd)) nd))))), [], [])
(a2, AssumeAST, (cl  ((not ((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))))), [], [])
(x4, Equp1AST, (cl  ((not ((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (not (not (tcd ( (iod ( nd)) nd))))))) ((imp  (not (tcd ( (iod ( nd)) nd))) (false))) ((not (not (not (tcd ( (iod ( nd)) nd))))))), [], [])
(x3, ResoAST, (cl  ((imp  (not (tcd ( (iod ( nd)) nd))) (false))) ((not (not (not (tcd ( (iod ( nd)) nd))))))), [ x4 a0], [])
(x2, Equp1AST, (cl  ((not ((not (not (tcd ( (iod ( nd)) nd)))) = (tcd ( (iod ( nd)) nd))))) ((not (not (tcd ( (iod ( nd)) nd))))) ((not (tcd ( (iod ( nd)) nd))))), [], [])
(x1, ResoAST, (cl  ((not (not (tcd ( (iod ( nd)) nd))))) ((not (tcd ( (iod ( nd)) nd))))), [ x2 a1], [])
(x5, ResoAST, (cl  ((imp  (not (tcd ( (iod ( nd)) nd))) (false))) ((not (tcd ( (iod ( nd)) nd))))), [ x3 x1], [])
(x6, Equn2AST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))) ((imp  (not (tcd ( (iod ( nd)) nd))) (false))) ((tcd ( (iod ( nd)) nd)))), [], [])
(x7, ResoAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))) ((imp  (not (tcd ( (iod ( nd)) nd))) (false)))), [ x5 x6], [])
(x11, Equp2AST, (cl  ((not ((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (not (not (tcd ( (iod ( nd)) nd))))))) ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false)))) ((not (not (tcd ( (iod ( nd)) nd)))))), [], [])
(x10, ResoAST, (cl  ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false)))) ((not (not (tcd ( (iod ( nd)) nd)))))), [ x11 a0], [])
(x9, Equp2AST, (cl  ((not ((not (not (tcd ( (iod ( nd)) nd)))) = (tcd ( (iod ( nd)) nd))))) ((not (not (not (tcd ( (iod ( nd)) nd)))))) ((tcd ( (iod ( nd)) nd)))), [], [])
(x8, ResoAST, (cl  ((not (not (not (tcd ( (iod ( nd)) nd)))))) ((tcd ( (iod ( nd)) nd)))), [ x9 a1], [])
(x12, ResoAST, (cl  ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false)))) ((tcd ( (iod ( nd)) nd)))), [ x10 x8], [])
(x13, Equn1AST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))) ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false)))) ((not (tcd ( (iod ( nd)) nd))))), [], [])
(x14, ResoAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))) ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false))))), [ x12 x13], [])
(t3, ResoAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd))))), [ x7 x14], [])
(t4, ResoAST, (cl ), [ a2 t3], [])

Certif after process_subproof: 
(a0, AssumeAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (not (not (tcd ( (iod ( nd)) nd))))))), [], [])
(a1, AssumeAST, (cl  (((not (not (tcd ( (iod ( nd)) nd)))) = (tcd ( (iod ( nd)) nd))))), [], [])
(a2, AssumeAST, (cl  ((not ((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))))), [], [])
(x4, Equp1AST, (cl  ((not ((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (not (not (tcd ( (iod ( nd)) nd))))))) ((imp  (not (tcd ( (iod ( nd)) nd))) (false))) ((not (not (not (tcd ( (iod ( nd)) nd))))))), [], [])
(x3, ResoAST, (cl  ((imp  (not (tcd ( (iod ( nd)) nd))) (false))) ((not (not (not (tcd ( (iod ( nd)) nd))))))), [ x4 a0], [])
(x2, Equp1AST, (cl  ((not ((not (not (tcd ( (iod ( nd)) nd)))) = (tcd ( (iod ( nd)) nd))))) ((not (not (tcd ( (iod ( nd)) nd))))) ((not (tcd ( (iod ( nd)) nd))))), [], [])
(x1, ResoAST, (cl  ((not (not (tcd ( (iod ( nd)) nd))))) ((not (tcd ( (iod ( nd)) nd))))), [ x2 a1], [])
(x5, ResoAST, (cl  ((imp  (not (tcd ( (iod ( nd)) nd))) (false))) ((not (tcd ( (iod ( nd)) nd))))), [ x3 x1], [])
(x6, Equn2AST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))) ((imp  (not (tcd ( (iod ( nd)) nd))) (false))) ((tcd ( (iod ( nd)) nd)))), [], [])
(x7, ResoAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))) ((imp  (not (tcd ( (iod ( nd)) nd))) (false)))), [ x5 x6], [])
(x11, Equp2AST, (cl  ((not ((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (not (not (tcd ( (iod ( nd)) nd))))))) ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false)))) ((not (not (tcd ( (iod ( nd)) nd)))))), [], [])
(x10, ResoAST, (cl  ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false)))) ((not (not (tcd ( (iod ( nd)) nd)))))), [ x11 a0], [])
(x9, Equp2AST, (cl  ((not ((not (not (tcd ( (iod ( nd)) nd)))) = (tcd ( (iod ( nd)) nd))))) ((not (not (not (tcd ( (iod ( nd)) nd)))))) ((tcd ( (iod ( nd)) nd)))), [], [])
(x8, ResoAST, (cl  ((not (not (not (tcd ( (iod ( nd)) nd)))))) ((tcd ( (iod ( nd)) nd)))), [ x9 a1], [])
---------------------------------------------------x10 -------------------------------------------x8
~(~(tcd ((iod nd) nd)) => F), ~~(tcd ((iod nd) nd))    ~~~(tcd ((iod nd) nd)), (tcd ((iod nd) nd))
--------------------------------------------------------------------------------------------------res
               ~(~(tcd ((iod nd) nd)) => F), (tcd ((iod nd) nd))
(x12, ResoAST, (cl  ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false)))) ((tcd ( (iod ( nd)) nd)))), [ x10 x8], [])
x12 is the buggy step
(x13, Equn1AST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))) ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false)))) ((not (tcd ( (iod ( nd)) nd))))), [], [])
(x14, ResoAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd)))) ((not (imp  (not (tcd ( (iod ( nd)) nd))) (false))))), [ x12 x13], [])
(t3, ResoAST, (cl  (((imp  (not (tcd ( (iod ( nd)) nd))) (false)) = (tcd ( (iod ( nd)) nd))))), [ x7 x14], [])
(t4, ResoAST, (cl ), [ a2 t3], [])

