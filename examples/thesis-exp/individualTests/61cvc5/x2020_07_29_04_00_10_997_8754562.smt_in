; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_list_d 0)
(declare-sort A_multiset_d 0)
(declare-sort A_s_a_fun_fun_d 0)
(declare-sort A_a_literal_fun_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-sort A_literal_multiset_set_d 0)
(declare-sort A_literal_multiset_a_literal_multiset_fun_d 0)
(declare-fun d_d () A_literal_multiset_d)
(declare-fun m_d () A_literal_multiset_set_d)
(declare-fun s_d () A_literal_multiset_a_literal_multiset_fun_d)
(declare-fun as_d () A_list_d)
(declare-fun d0_d () A_literal_multiset_d)
(declare-fun as0_d () A_list_d)
(declare-fun dA0_d () A_literal_multiset_d)
(declare-fun neg_d () A_a_literal_fun_d)
(declare-fun s_M_d (A_s_a_fun_fun_d A_literal_multiset_a_literal_multiset_fun_d A_literal_multiset_set_d A_literal_multiset_d) A_literal_multiset_d)
(declare-fun mset_d (A_list_d) A_multiset_d)
(declare-fun plus_d (A_literal_multiset_d A_literal_multiset_d) A_literal_multiset_d)
(declare-fun zero_d () A_literal_multiset_d)
(declare-fun fun_app_d (A_literal_multiset_a_literal_multiset_fun_d A_literal_multiset_d) A_literal_multiset_d)
(declare-fun subst_atm_d () A_s_a_fun_fun_d)
(declare-fun image_mset_d (A_a_literal_fun_d A_multiset_d) A_literal_multiset_d)
(assert (! (not (= (fun_app_d s_d (plus_d d0_d (image_mset_d neg_d (mset_d as0_d)))) (image_mset_d neg_d (mset_d as0_d)))) :named a0))
(assert (! (= dA0_d (plus_d d0_d (image_mset_d neg_d (mset_d as0_d)))) :named a1))
(assert (! (=> (not (= (s_M_d subst_atm_d s_d m_d (plus_d d_d (image_mset_d neg_d (mset_d as_d)))) zero_d)) (= (image_mset_d neg_d (mset_d as0_d)) (fun_app_d s_d dA0_d))) :named a2))
(assert (! (not (= (s_M_d subst_atm_d s_d m_d (plus_d d_d (image_mset_d neg_d (mset_d as_d)))) zero_d)) :named a3))
(check-sat)
;;;;(get-proof)
