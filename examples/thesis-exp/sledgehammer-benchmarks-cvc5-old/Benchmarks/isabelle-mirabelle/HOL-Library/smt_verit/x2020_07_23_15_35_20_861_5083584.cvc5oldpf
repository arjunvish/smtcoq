(assume a0 (not (< 0 n_d)))
(assume a1 (< 1 n_d))
(step t1 (cl (not (= (or (not (not (>= n_d 1))) (not (>= n_d 2))) (or (>= n_d 1) (not (>= n_d 2))))) (not (or (not (not (>= n_d 1))) (not (>= n_d 2)))) (or (>= n_d 1) (not (>= n_d 2)))) :rule equiv_pos2)
(step t2 (cl (= (not (not (>= n_d 1))) (>= n_d 1))) :rule all_simplify :args (not_simplify1 (>= n_d 1)))
(step t3 (cl (= (not (>= n_d 2)) (not (>= n_d 2)))) :rule refl)
(step t4 (cl (= (or (not (not (>= n_d 1))) (not (>= n_d 2))) (or (>= n_d 1) (not (>= n_d 2))))) :rule cong :premises (t2 t3))
(step t5 (cl (=> (and (not (>= n_d 1)) (>= n_d 2)) false) (and (not (>= n_d 1)) (>= n_d 2))) :rule implies_neg1)
(anchor :step t6)
(assume t6.a0 (not (>= n_d 1)))
(assume t6.a1 (>= n_d 2))
(step t6.t1 (cl (not (= (< (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2))) false)) (not (< (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2)))) false) :rule equiv_pos2)
(step t6.t2 (cl (= (< (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2))) (not (>= (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2)))))) :rule all_simplify :args (arith-elim-lt (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2))))
(step t6.t3 (cl (= (* 1 n_d) n_d)) :rule hole :args (ARITH_POLY_NORM (= (* 1 n_d) n_d)))
(step t6.t4 (cl (= (* (- 1) n_d) (* (- 1) n_d))) :rule refl)
(step t6.t5 (cl (= (+ (* 1 n_d) (* (- 1) n_d)) (+ n_d (* (- 1) n_d)))) :rule cong :premises (t6.t3 t6.t4))
(step t6.t6 (cl (= (+ n_d (* (- 1) n_d)) 0)) :rule hole :args (ARITH_POLY_NORM (= (+ n_d (* (- 1) n_d)) 0)))
(step t6.t7 (cl (= (+ (* 1 n_d) (* (- 1) n_d)) 0)) :rule trans :premises (t6.t5 t6.t6))
(step t6.t8 (cl (= (* 1 1) 1)) :rule prod_simplify)
(step t6.t9 (cl (= (* (- 1) 2) (- 2))) :rule prod_simplify)
(step t6.t10 (cl (= (+ (* 1 1) (* (- 1) 2)) (+ 1 (- 2)))) :rule cong :premises (t6.t8 t6.t9))
(step t6.t11 (cl (= (+ 1 (- 2)) (- 1))) :rule sum_simplify)
(step t6.t12 (cl (= (+ (* 1 1) (* (- 1) 2)) (- 1))) :rule trans :premises (t6.t10 t6.t11))
(step t6.t13 (cl (= (>= (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2))) (>= 0 (- 1)))) :rule cong :premises (t6.t7 t6.t12))
(step t6.t14 (cl (= (>= 0 (- 1)) true)) :rule comp_simplify)
(step t6.t15 (cl (= (>= (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2))) true)) :rule trans :premises (t6.t13 t6.t14))
(step t6.t16 (cl (= (not (>= (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2)))) (not true))) :rule cong :premises (t6.t15))
(step t6.t17 (cl (= (not true) false)) :rule not_simplify)
(step t6.t18 (cl (= (not (>= (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2)))) false)) :rule trans :premises (t6.t16 t6.t17))
(step t6.t19 (cl (= (< (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2))) false)) :rule trans :premises (t6.t2 t6.t18))
(step t6.t20 (cl (not (< (* 1 n_d) (* 1 1))) (not (<= (* (- 1) n_d) (* (- 1) 2))) (< (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2)))) :rule la_generic :args (1 1 1))
(step t6.t21 (cl (=> (and (> 1 0) (< n_d 1)) (< (* 1 n_d) (* 1 1)))) :rule la_mult_pos)
(step t6.t22 (cl (not (and (> 1 0) (< n_d 1))) (< (* 1 n_d) (* 1 1))) :rule implies :premises (t6.t21))
(step t6.t23 (cl (and (> 1 0) (< n_d 1)) (not (> 1 0)) (not (< n_d 1))) :rule and_neg)
(step t6.t24 (cl (= (= (> 1 0) true) (> 1 0))) :rule equiv_simplify)
(step t6.t25 (cl (not (= (> 1 0) true)) (> 1 0)) :rule equiv1 :premises (t6.t24))
(step t6.t26 (cl (= (> 1 0) true)) :rule comp_simplify)
(step t6.t27 (cl (> 1 0)) :rule resolution :premises (t6.t25 t6.t26))
(step t6.t28 (cl (not (= (not (>= n_d 1)) (< n_d 1))) (not (not (>= n_d 1))) (< n_d 1)) :rule equiv_pos2)
(step t6.t29 (cl (= (< n_d 1) (not (>= n_d 1)))) :rule all_simplify :args (arith-elim-lt n_d 1))
(step t6.t30 (cl (= (not (>= n_d 1)) (< n_d 1))) :rule symm :premises (t6.t29))
(step t6.t31 (cl (< n_d 1)) :rule resolution :premises (t6.t28 t6.t30 t6.a0))
(step t6.t32 (cl (and (> 1 0) (< n_d 1))) :rule resolution :premises (t6.t23 t6.t27 t6.t31))
(step t6.t33 (cl (< (* 1 n_d) (* 1 1))) :rule resolution :premises (t6.t22 t6.t32))
(step t6.t34 (cl (=> (and (< (- 1) 0) (>= n_d 2)) (<= (* (- 1) n_d) (* (- 1) 2)))) :rule la_mult_neg)
(step t6.t35 (cl (not (and (< (- 1) 0) (>= n_d 2))) (<= (* (- 1) n_d) (* (- 1) 2))) :rule implies :premises (t6.t34))
(step t6.t36 (cl (and (< (- 1) 0) (>= n_d 2)) (not (< (- 1) 0)) (not (>= n_d 2))) :rule and_neg)
(step t6.t37 (cl (= (= (< (- 1) 0) true) (< (- 1) 0))) :rule equiv_simplify)
(step t6.t38 (cl (not (= (< (- 1) 0) true)) (< (- 1) 0)) :rule equiv1 :premises (t6.t37))
(step t6.t39 (cl (= (< (- 1) 0) true)) :rule comp_simplify)
(step t6.t40 (cl (< (- 1) 0)) :rule resolution :premises (t6.t38 t6.t39))
(step t6.t41 (cl (and (< (- 1) 0) (>= n_d 2))) :rule resolution :premises (t6.t36 t6.t40 t6.a1))
(step t6.t42 (cl (<= (* (- 1) n_d) (* (- 1) 2))) :rule resolution :premises (t6.t35 t6.t41))
(step t6.t43 (cl (< (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2)))) :rule resolution :premises (t6.t20 t6.t33 t6.t42))
(step t6.t44 (cl false) :rule resolution :premises (t6.t1 t6.t19 t6.t43))
(step t6 (cl (not (not (>= n_d 1))) (not (>= n_d 2)) false) :rule subproof :discharge (t6.a0 t6.a1))
(step t7 (cl (not (and (not (>= n_d 1)) (>= n_d 2))) (not (>= n_d 1))) :rule and_pos)
(step t8 (cl (not (and (not (>= n_d 1)) (>= n_d 2))) (>= n_d 2)) :rule and_pos)
(step t9 (cl false (not (and (not (>= n_d 1)) (>= n_d 2))) (not (and (not (>= n_d 1)) (>= n_d 2)))) :rule resolution :premises (t6 t7 t8))
(step t10 (cl (not (and (not (>= n_d 1)) (>= n_d 2))) (not (and (not (>= n_d 1)) (>= n_d 2))) false) :rule reordering :premises (t9))
(step t11 (cl (not (and (not (>= n_d 1)) (>= n_d 2))) false) :rule contraction :premises (t10))
(step t12 (cl (=> (and (not (>= n_d 1)) (>= n_d 2)) false) false) :rule resolution :premises (t5 t11))
(step t13 (cl (=> (and (not (>= n_d 1)) (>= n_d 2)) false) (not false)) :rule implies_neg2)
(step t14 (cl (=> (and (not (>= n_d 1)) (>= n_d 2)) false) (=> (and (not (>= n_d 1)) (>= n_d 2)) false)) :rule resolution :premises (t12 t13))
(step t15 (cl (=> (and (not (>= n_d 1)) (>= n_d 2)) false)) :rule contraction :premises (t14))
(step t16 (cl (= (=> (and (not (>= n_d 1)) (>= n_d 2)) false) (not (and (not (>= n_d 1)) (>= n_d 2))))) :rule implies_simplify)
(step t17 (cl (not (=> (and (not (>= n_d 1)) (>= n_d 2)) false)) (not (and (not (>= n_d 1)) (>= n_d 2)))) :rule equiv1 :premises (t16))
(step t18 (cl (not (and (not (>= n_d 1)) (>= n_d 2)))) :rule resolution :premises (t15 t17))
(step t19 (cl (not (not (>= n_d 1))) (not (>= n_d 2))) :rule not_and :premises (t18))
(step t20 (cl (or (not (not (>= n_d 1))) (not (>= n_d 2))) (not (not (not (>= n_d 1))))) :rule or_neg)
(step t21 (cl (or (not (not (>= n_d 1))) (not (>= n_d 2))) (not (not (>= n_d 2)))) :rule or_neg)
(step t22 (cl (or (not (not (>= n_d 1))) (not (>= n_d 2))) (or (not (not (>= n_d 1))) (not (>= n_d 2)))) :rule resolution :premises (t19 t20 t21))
(step t23 (cl (or (not (not (>= n_d 1))) (not (>= n_d 2)))) :rule contraction :premises (t22))
(step t24 (cl (or (>= n_d 1) (not (>= n_d 2)))) :rule resolution :premises (t1 t4 t23))
(step t25 (cl (>= n_d 1) (not (>= n_d 2))) :rule or :premises (t24))
(step t26 (cl (not (= (< 1 n_d) (>= n_d 2))) (not (< 1 n_d)) (>= n_d 2)) :rule equiv_pos2)
(step t27 (cl (= (< 1 n_d) (not (>= 1 n_d)))) :rule all_simplify :args (arith-elim-lt 1 n_d))
(step t28 (cl (= (>= 1 n_d) (not (>= n_d 2)))) :rule all_simplify)
(step t29 (cl (= (not (>= 1 n_d)) (not (not (>= n_d 2))))) :rule cong :premises (t28))
(step t30 (cl (= (not (not (>= n_d 2))) (>= n_d 2))) :rule all_simplify :args (not_simplify1 (>= n_d 2)))
(step t31 (cl (= (not (>= 1 n_d)) (>= n_d 2))) :rule trans :premises (t29 t30))
(step t32 (cl (= (< 1 n_d) (>= n_d 2))) :rule trans :premises (t27 t31))
(step t33 (cl (>= n_d 2)) :rule resolution :premises (t26 t32 a1))
(step t34 (cl (not (= (not (< 0 n_d)) (not (>= n_d 1)))) (not (not (< 0 n_d))) (not (>= n_d 1))) :rule equiv_pos2)
(step t35 (cl (= (< 0 n_d) (not (>= 0 n_d)))) :rule all_simplify :args (arith-elim-lt 0 n_d))
(step t36 (cl (= (>= 0 n_d) (not (>= n_d 1)))) :rule all_simplify)
(step t37 (cl (= (not (>= 0 n_d)) (not (not (>= n_d 1))))) :rule cong :premises (t36))
(step t38 (cl (= (not (>= 0 n_d)) (>= n_d 1))) :rule trans :premises (t37 t2))
(step t39 (cl (= (< 0 n_d) (>= n_d 1))) :rule trans :premises (t35 t38))
(step t40 (cl (= (not (< 0 n_d)) (not (>= n_d 1)))) :rule cong :premises (t39))
(step t41 (cl (not (>= n_d 1))) :rule resolution :premises (t34 t40 a0))
(step t42 (cl) :rule resolution :premises (t25 t33 t41))
