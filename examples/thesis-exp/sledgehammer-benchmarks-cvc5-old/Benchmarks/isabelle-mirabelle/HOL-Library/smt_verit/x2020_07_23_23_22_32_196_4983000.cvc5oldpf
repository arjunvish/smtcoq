(assume a0 (not (= (f_d m_d) (g_d n_d))))
(assume a1 (= m_d n_d))
(assume a2 (= (f_d n_d) (g_d n_d)))
(step t1 (cl (= (g_d n_d) (f_d n_d))) :rule symm :premises (a2))
(step t2 (cl (not (= (not (= (f_d m_d) (g_d n_d))) (not (= (g_d n_d) (f_d n_d))))) (not (not (= (f_d m_d) (g_d n_d)))) (not (= (g_d n_d) (f_d n_d)))) :rule equiv_pos2)
(step t3 (cl (= (f_d m_d) (f_d n_d))) :rule cong :premises (a1))
(step t4 (cl (= (g_d n_d) (g_d n_d))) :rule refl)
(step t5 (cl (= (= (f_d m_d) (g_d n_d)) (= (f_d n_d) (g_d n_d)))) :rule cong :premises (t3 t4))
(step t6 (cl (= (not (= (f_d m_d) (g_d n_d))) (not (= (f_d n_d) (g_d n_d))))) :rule cong :premises (t5))
(step t7 (cl (= (= (f_d n_d) (g_d n_d)) (= (g_d n_d) (f_d n_d)))) :rule all_simplify)
(step t8 (cl (= (not (= (f_d n_d) (g_d n_d))) (not (= (g_d n_d) (f_d n_d))))) :rule cong :premises (t7))
(step t9 (cl (= (not (= (f_d m_d) (g_d n_d))) (not (= (g_d n_d) (f_d n_d))))) :rule trans :premises (t6 t8))
(step t10 (cl (not (= (g_d n_d) (f_d n_d)))) :rule resolution :premises (t2 t9 a0))
(step t11 (cl) :rule resolution :premises (t1 t10))
