(assume a0 (not (= (= (f_d x_d) (f_d y_d)) (= x_d y_d))))
(assume a1 (= (g_d (f_d x_d)) x_d))
(assume a2 (= (g_d (f_d y_d)) y_d))
(step t1 (cl (=> (= x_d y_d) (= (f_d x_d) (f_d y_d))) (= x_d y_d)) :rule implies_neg1)
(anchor :step t2)
(assume t2.a0 (= x_d y_d))
(step t2.t1 (cl (=> (= x_d y_d) (= (f_d x_d) (f_d y_d))) (= x_d y_d)) :rule implies_neg1)
(anchor :step t2.t2)
(assume t2.t2.a0 (= x_d y_d))
(step t2.t2.t1 (cl (= y_d x_d)) :rule symm :premises (t2.t2.a0))
(step t2.t2.t2 (cl (= x_d y_d)) :rule symm :premises (t2.t2.t1))
(step t2.t2.t3 (cl (= (f_d x_d) (f_d y_d))) :rule cong :premises (t2.t2.t2))
(step t2.t2 (cl (not (= x_d y_d)) (= (f_d x_d) (f_d y_d))) :rule subproof :discharge (t2.t2.a0))
(step t2.t3 (cl (=> (= x_d y_d) (= (f_d x_d) (f_d y_d))) (= (f_d x_d) (f_d y_d))) :rule resolution :premises (t2.t1 t2.t2))
(step t2.t4 (cl (=> (= x_d y_d) (= (f_d x_d) (f_d y_d))) (not (= (f_d x_d) (f_d y_d)))) :rule implies_neg2)
(step t2.t5 (cl (=> (= x_d y_d) (= (f_d x_d) (f_d y_d))) (=> (= x_d y_d) (= (f_d x_d) (f_d y_d)))) :rule resolution :premises (t2.t3 t2.t4))
(step t2.t6 (cl (=> (= x_d y_d) (= (f_d x_d) (f_d y_d)))) :rule contraction :premises (t2.t5))
(step t2.t7 (cl (not (= x_d y_d)) (= (f_d x_d) (f_d y_d))) :rule implies :premises (t2.t6))
(step t2.t8 (cl (= (f_d x_d) (f_d y_d))) :rule resolution :premises (t2.t7 t2.a0))
(step t2 (cl (not (= x_d y_d)) (= (f_d x_d) (f_d y_d))) :rule subproof :discharge (t2.a0))
(step t3 (cl (=> (= x_d y_d) (= (f_d x_d) (f_d y_d))) (= (f_d x_d) (f_d y_d))) :rule resolution :premises (t1 t2))
(step t4 (cl (=> (= x_d y_d) (= (f_d x_d) (f_d y_d))) (not (= (f_d x_d) (f_d y_d)))) :rule implies_neg2)
(step t5 (cl (=> (= x_d y_d) (= (f_d x_d) (f_d y_d))) (=> (= x_d y_d) (= (f_d x_d) (f_d y_d)))) :rule resolution :premises (t3 t4))
(step t6 (cl (=> (= x_d y_d) (= (f_d x_d) (f_d y_d)))) :rule contraction :premises (t5))
(step t7 (cl (not (= x_d y_d)) (= (f_d x_d) (f_d y_d))) :rule implies :premises (t6))
(step t8 (cl (= (f_d x_d) (f_d y_d)) (not (= x_d y_d))) :rule reordering :premises (t7))
(step t9 (cl (= (f_d x_d) (f_d y_d)) (= x_d y_d)) :rule not_equiv1 :premises (a0))
(step t10 (cl (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d)))) (not (= (f_d x_d) (f_d y_d))) (not (= x_d (g_d (f_d x_d)))) (not (= y_d (g_d (f_d y_d))))) :rule and_neg)
(step t11 (cl (=> (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d)))) (= x_d y_d)) (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d))))) :rule implies_neg1)
(anchor :step t12)
(assume t12.a0 (= (f_d x_d) (f_d y_d)))
(assume t12.a1 (= x_d (g_d (f_d x_d))))
(assume t12.a2 (= y_d (g_d (f_d y_d))))
(step t12.t1 (cl (=> (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d)))) (= x_d y_d)) (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))))) :rule implies_neg1)
(anchor :step t12.t2)
(assume t12.t2.a0 (= y_d (g_d (f_d y_d))))
(assume t12.t2.a1 (= (f_d x_d) (f_d y_d)))
(assume t12.t2.a2 (= x_d (g_d (f_d x_d))))
(step t12.t2.t1 (cl (= (g_d (f_d x_d)) x_d)) :rule symm :premises (t12.t2.a2))
(step t12.t2.t2 (cl (= x_d (g_d (f_d x_d)))) :rule symm :premises (t12.t2.t1))
(step t12.t2.t3 (cl (= (f_d y_d) (f_d x_d))) :rule symm :premises (t12.t2.a1))
(step t12.t2.t4 (cl (= (f_d x_d) (f_d y_d))) :rule symm :premises (t12.t2.t3))
(step t12.t2.t5 (cl (= (g_d (f_d x_d)) (g_d (f_d y_d)))) :rule cong :premises (t12.t2.t4))
(step t12.t2.t6 (cl (= (g_d (f_d y_d)) y_d)) :rule symm :premises (t12.t2.a0))
(step t12.t2.t7 (cl (= x_d y_d)) :rule trans :premises (t12.t2.t2 t12.t2.t5 t12.t2.t6))
(step t12.t2 (cl (not (= y_d (g_d (f_d y_d)))) (not (= (f_d x_d) (f_d y_d))) (not (= x_d (g_d (f_d x_d)))) (= x_d y_d)) :rule subproof :discharge (t12.t2.a0 t12.t2.a1 t12.t2.a2))
(step t12.t3 (cl (not (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))))) (= y_d (g_d (f_d y_d)))) :rule and_pos)
(step t12.t4 (cl (not (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))))) (= (f_d x_d) (f_d y_d))) :rule and_pos)
(step t12.t5 (cl (not (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))))) (= x_d (g_d (f_d x_d)))) :rule and_pos)
(step t12.t6 (cl (= x_d y_d) (not (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))))) (not (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))))) (not (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d)))))) :rule resolution :premises (t12.t2 t12.t3 t12.t4 t12.t5))
(step t12.t7 (cl (not (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))))) (not (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))))) (not (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))))) (= x_d y_d)) :rule reordering :premises (t12.t6))
(step t12.t8 (cl (not (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))))) (= x_d y_d)) :rule contraction :premises (t12.t7))
(step t12.t9 (cl (=> (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d)))) (= x_d y_d)) (= x_d y_d)) :rule resolution :premises (t12.t1 t12.t8))
(step t12.t10 (cl (=> (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d)))) (= x_d y_d)) (not (= x_d y_d))) :rule implies_neg2)
(step t12.t11 (cl (=> (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d)))) (= x_d y_d)) (=> (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d)))) (= x_d y_d))) :rule resolution :premises (t12.t9 t12.t10))
(step t12.t12 (cl (=> (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d)))) (= x_d y_d))) :rule contraction :premises (t12.t11))
(step t12.t13 (cl (not (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))))) (= x_d y_d)) :rule implies :premises (t12.t12))
(step t12.t14 (cl (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d)))) (not (= y_d (g_d (f_d y_d)))) (not (= (f_d x_d) (f_d y_d))) (not (= x_d (g_d (f_d x_d))))) :rule and_neg)
(step t12.t15 (cl (and (= y_d (g_d (f_d y_d))) (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))))) :rule resolution :premises (t12.t14 t12.a2 t12.a0 t12.a1))
(step t12.t16 (cl (= x_d y_d)) :rule resolution :premises (t12.t13 t12.t15))
(step t12 (cl (not (= (f_d x_d) (f_d y_d))) (not (= x_d (g_d (f_d x_d)))) (not (= y_d (g_d (f_d y_d)))) (= x_d y_d)) :rule subproof :discharge (t12.a0 t12.a1 t12.a2))
(step t13 (cl (not (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d))))) (= (f_d x_d) (f_d y_d))) :rule and_pos)
(step t14 (cl (not (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d))))) (= x_d (g_d (f_d x_d)))) :rule and_pos)
(step t15 (cl (not (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d))))) (= y_d (g_d (f_d y_d)))) :rule and_pos)
(step t16 (cl (= x_d y_d) (not (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d))))) (not (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d))))) (not (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d)))))) :rule resolution :premises (t12 t13 t14 t15))
(step t17 (cl (not (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d))))) (not (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d))))) (not (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d))))) (= x_d y_d)) :rule reordering :premises (t16))
(step t18 (cl (not (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d))))) (= x_d y_d)) :rule contraction :premises (t17))
(step t19 (cl (=> (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d)))) (= x_d y_d)) (= x_d y_d)) :rule resolution :premises (t11 t18))
(step t20 (cl (=> (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d)))) (= x_d y_d)) (not (= x_d y_d))) :rule implies_neg2)
(step t21 (cl (=> (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d)))) (= x_d y_d)) (=> (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d)))) (= x_d y_d))) :rule resolution :premises (t19 t20))
(step t22 (cl (=> (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d)))) (= x_d y_d))) :rule contraction :premises (t21))
(step t23 (cl (not (and (= (f_d x_d) (f_d y_d)) (= x_d (g_d (f_d x_d))) (= y_d (g_d (f_d y_d))))) (= x_d y_d)) :rule implies :premises (t22))
(step t24 (cl (not (= (f_d x_d) (f_d y_d))) (not (= x_d (g_d (f_d x_d)))) (not (= y_d (g_d (f_d y_d)))) (= x_d y_d)) :rule resolution :premises (t10 t23))
(step t25 (cl (= x_d y_d) (not (= (f_d x_d) (f_d y_d))) (not (= x_d (g_d (f_d x_d)))) (not (= y_d (g_d (f_d y_d))))) :rule reordering :premises (t24))
(step t26 (cl (= y_d (g_d (f_d y_d)))) :rule symm :premises (a2))
(step t27 (cl (= x_d (g_d (f_d x_d)))) :rule symm :premises (a1))
(step t28 (cl (not (= (f_d x_d) (f_d y_d))) (not (= x_d y_d))) :rule not_equiv2 :premises (a0))
(step t29 (cl (not (= (f_d x_d) (f_d y_d))) (not (= (f_d x_d) (f_d y_d)))) :rule resolution :premises (t25 t26 t27 t28))
(step t30 (cl (not (= (f_d x_d) (f_d y_d)))) :rule contraction :premises (t29))
(step t31 (cl (= x_d y_d)) :rule resolution :premises (t9 t30))
(step t32 (cl) :rule resolution :premises (t8 t31 t30))
