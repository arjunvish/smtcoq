(assume a0 (not (= (islimpt_d x_d (minus_d s_d t_d)) (islimpt_d x_d s_d))))
(assume a1 (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))
(assume a2 (= (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))) (islimpt_d x_d s_d)))
(step t1 (cl (not (= (or (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (not (islimpt_d x_d (minus_d s_d t_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) (or (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d t_d)) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))))) (not (or (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (not (islimpt_d x_d (minus_d s_d t_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))))) (or (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d t_d)) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))))) :rule equiv_pos2)
(step t2 (cl (= (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))))) :rule refl)
(step t3 (cl (= (= (= (not (not (islimpt_d x_d (minus_d s_d t_d)))) (islimpt_d x_d (minus_d s_d t_d))) true) (= (not (not (islimpt_d x_d (minus_d s_d t_d)))) (islimpt_d x_d (minus_d s_d t_d))))) :rule equiv_simplify)
(step t4 (cl (not (= (= (not (not (islimpt_d x_d (minus_d s_d t_d)))) (islimpt_d x_d (minus_d s_d t_d))) true)) (= (not (not (islimpt_d x_d (minus_d s_d t_d)))) (islimpt_d x_d (minus_d s_d t_d)))) :rule equiv1 :premises (t3))
(step t5 (cl (= (= (not (not (islimpt_d x_d (minus_d s_d t_d)))) (islimpt_d x_d (minus_d s_d t_d))) (= (islimpt_d x_d (minus_d s_d t_d)) (not (not (islimpt_d x_d (minus_d s_d t_d))))))) :rule all_simplify)
(step t6 (cl (= (islimpt_d x_d (minus_d s_d t_d)) (islimpt_d x_d (minus_d s_d t_d)))) :rule refl)
(step t7 (cl (= (not (not (islimpt_d x_d (minus_d s_d t_d)))) (islimpt_d x_d (minus_d s_d t_d)))) :rule all_simplify :args (not_simplify1 (islimpt_d x_d (minus_d s_d t_d))))
(step t8 (cl (= (= (islimpt_d x_d (minus_d s_d t_d)) (not (not (islimpt_d x_d (minus_d s_d t_d))))) (= (islimpt_d x_d (minus_d s_d t_d)) (islimpt_d x_d (minus_d s_d t_d))))) :rule cong :premises (t6 t7))
(step t9 (cl (= (= (islimpt_d x_d (minus_d s_d t_d)) (islimpt_d x_d (minus_d s_d t_d))) (and (=> (islimpt_d x_d (minus_d s_d t_d)) (islimpt_d x_d (minus_d s_d t_d))) (=> (islimpt_d x_d (minus_d s_d t_d)) (islimpt_d x_d (minus_d s_d t_d)))))) :rule all_simplify :args (connective_def2 (islimpt_d x_d (minus_d s_d t_d)) (islimpt_d x_d (minus_d s_d t_d))))
(step t10 (cl (= (and (=> (islimpt_d x_d (minus_d s_d t_d)) (islimpt_d x_d (minus_d s_d t_d))) (=> (islimpt_d x_d (minus_d s_d t_d)) (islimpt_d x_d (minus_d s_d t_d)))) (=> (islimpt_d x_d (minus_d s_d t_d)) (islimpt_d x_d (minus_d s_d t_d))))) :rule all_simplify :args (and_simplify3 (=> (islimpt_d x_d (minus_d s_d t_d)) (islimpt_d x_d (minus_d s_d t_d))) (cvc5_nary_op) (cvc5_nary_op) (cvc5_nary_op)))
(step t11 (cl (= (=> (islimpt_d x_d (minus_d s_d t_d)) (islimpt_d x_d (minus_d s_d t_d))) true)) :rule all_simplify :args (implies_simplify6 (islimpt_d x_d (minus_d s_d t_d))))
(step t12 (cl (= (and (=> (islimpt_d x_d (minus_d s_d t_d)) (islimpt_d x_d (minus_d s_d t_d))) (=> (islimpt_d x_d (minus_d s_d t_d)) (islimpt_d x_d (minus_d s_d t_d)))) true)) :rule trans :premises (t10 t11))
(step t13 (cl (= (= (islimpt_d x_d (minus_d s_d t_d)) (islimpt_d x_d (minus_d s_d t_d))) true)) :rule trans :premises (t9 t12))
(step t14 (cl (= (= (islimpt_d x_d (minus_d s_d t_d)) (not (not (islimpt_d x_d (minus_d s_d t_d))))) true)) :rule trans :premises (t8 t13))
(step t15 (cl (= (= (not (not (islimpt_d x_d (minus_d s_d t_d)))) (islimpt_d x_d (minus_d s_d t_d))) true)) :rule trans :premises (t5 t14))
(step t16 (cl (= (not (not (islimpt_d x_d (minus_d s_d t_d)))) (islimpt_d x_d (minus_d s_d t_d)))) :rule resolution :premises (t4 t15))
(step t17 (cl (= (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))))) :rule refl)
(step t18 (cl (= (or (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (not (islimpt_d x_d (minus_d s_d t_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) (or (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d t_d)) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))))) :rule cong :premises (t2 t16 t17))
(step t19 (cl (and (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))) (not (islimpt_d x_d (minus_d s_d t_d)))) (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (not (islimpt_d x_d (minus_d s_d t_d))))) :rule and_neg)
(step t20 (cl (=> (and (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))) (not (islimpt_d x_d (minus_d s_d t_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) (and (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))) (not (islimpt_d x_d (minus_d s_d t_d))))) :rule implies_neg1)
(anchor :step t21)
(assume t21.a0 (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))
(assume t21.a1 (not (islimpt_d x_d (minus_d s_d t_d))))
(step t21.t1 (cl (=> (and (not (islimpt_d x_d (minus_d s_d t_d))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) (and (not (islimpt_d x_d (minus_d s_d t_d))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) :rule implies_neg1)
(anchor :step t21.t2)
(assume t21.t2.a0 (not (islimpt_d x_d (minus_d s_d t_d))))
(assume t21.t2.a1 (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))
(step t21.t2.t1 (cl (= (= (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))) false) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))))) :rule equiv_simplify)
(step t21.t2.t2 (cl (not (= (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))) false)) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule equiv1 :premises (t21.t2.t1))
(step t21.t2.t3 (cl (= x_d x_d)) :rule refl)
(step t21.t2.t4 (cl (= (minus_d s_d (inf_d t_d s_d)) (minus_d s_d t_d))) :rule symm :premises (t21.t2.a1))
(step t21.t2.t5 (cl (= (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))) (islimpt_d x_d (minus_d s_d t_d)))) :rule cong :premises (t21.t2.t3 t21.t2.t4))
(step t21.t2.t6 (cl (= (= (islimpt_d x_d (minus_d s_d t_d)) false) (not (islimpt_d x_d (minus_d s_d t_d))))) :rule equiv_simplify)
(step t21.t2.t7 (cl (= (islimpt_d x_d (minus_d s_d t_d)) false) (not (not (islimpt_d x_d (minus_d s_d t_d))))) :rule equiv2 :premises (t21.t2.t6))
(step t21.t2.t8 (cl (not (not (not (islimpt_d x_d (minus_d s_d t_d))))) (islimpt_d x_d (minus_d s_d t_d))) :rule not_not)
(step t21.t2.t9 (cl (= (islimpt_d x_d (minus_d s_d t_d)) false) (islimpt_d x_d (minus_d s_d t_d))) :rule resolution :premises (t21.t2.t7 t21.t2.t8))
(step t21.t2.t10 (cl (= (islimpt_d x_d (minus_d s_d t_d)) false)) :rule resolution :premises (t21.t2.t9 t21.t2.a0))
(step t21.t2.t11 (cl (= (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))) false)) :rule trans :premises (t21.t2.t5 t21.t2.t10))
(step t21.t2.t12 (cl (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule resolution :premises (t21.t2.t2 t21.t2.t11))
(step t21.t2 (cl (not (not (islimpt_d x_d (minus_d s_d t_d)))) (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule subproof :discharge (t21.t2.a0 t21.t2.a1))
(step t21.t3 (cl (not (and (not (islimpt_d x_d (minus_d s_d t_d))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (not (islimpt_d x_d (minus_d s_d t_d)))) :rule and_pos)
(step t21.t4 (cl (not (and (not (islimpt_d x_d (minus_d s_d t_d))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) :rule and_pos)
(step t21.t5 (cl (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) (not (and (not (islimpt_d x_d (minus_d s_d t_d))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (not (and (not (islimpt_d x_d (minus_d s_d t_d))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))))) :rule resolution :premises (t21.t2 t21.t3 t21.t4))
(step t21.t6 (cl (not (and (not (islimpt_d x_d (minus_d s_d t_d))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (not (and (not (islimpt_d x_d (minus_d s_d t_d))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule reordering :premises (t21.t5))
(step t21.t7 (cl (not (and (not (islimpt_d x_d (minus_d s_d t_d))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule contraction :premises (t21.t6))
(step t21.t8 (cl (=> (and (not (islimpt_d x_d (minus_d s_d t_d))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule resolution :premises (t21.t1 t21.t7))
(step t21.t9 (cl (=> (and (not (islimpt_d x_d (minus_d s_d t_d))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) (not (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))))) :rule implies_neg2)
(step t21.t10 (cl (=> (and (not (islimpt_d x_d (minus_d s_d t_d))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) (=> (and (not (islimpt_d x_d (minus_d s_d t_d))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))))) :rule resolution :premises (t21.t8 t21.t9))
(step t21.t11 (cl (=> (and (not (islimpt_d x_d (minus_d s_d t_d))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))))) :rule contraction :premises (t21.t10))
(step t21.t12 (cl (not (and (not (islimpt_d x_d (minus_d s_d t_d))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule implies :premises (t21.t11))
(step t21.t13 (cl (and (not (islimpt_d x_d (minus_d s_d t_d))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (not (islimpt_d x_d (minus_d s_d t_d)))) (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) :rule and_neg)
(step t21.t14 (cl (and (not (islimpt_d x_d (minus_d s_d t_d))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) :rule resolution :premises (t21.t13 t21.a1 t21.a0))
(step t21.t15 (cl (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule resolution :premises (t21.t12 t21.t14))
(step t21 (cl (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (not (islimpt_d x_d (minus_d s_d t_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule subproof :discharge (t21.a0 t21.a1))
(step t22 (cl (not (and (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))) (not (islimpt_d x_d (minus_d s_d t_d))))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) :rule and_pos)
(step t23 (cl (not (and (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))) (not (islimpt_d x_d (minus_d s_d t_d))))) (not (islimpt_d x_d (minus_d s_d t_d)))) :rule and_pos)
(step t24 (cl (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) (not (and (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))) (not (islimpt_d x_d (minus_d s_d t_d))))) (not (and (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))) (not (islimpt_d x_d (minus_d s_d t_d)))))) :rule resolution :premises (t21 t22 t23))
(step t25 (cl (not (and (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))) (not (islimpt_d x_d (minus_d s_d t_d))))) (not (and (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))) (not (islimpt_d x_d (minus_d s_d t_d))))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule reordering :premises (t24))
(step t26 (cl (not (and (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))) (not (islimpt_d x_d (minus_d s_d t_d))))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule contraction :premises (t25))
(step t27 (cl (=> (and (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))) (not (islimpt_d x_d (minus_d s_d t_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule resolution :premises (t20 t26))
(step t28 (cl (=> (and (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))) (not (islimpt_d x_d (minus_d s_d t_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) (not (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))))) :rule implies_neg2)
(step t29 (cl (=> (and (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))) (not (islimpt_d x_d (minus_d s_d t_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) (=> (and (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))) (not (islimpt_d x_d (minus_d s_d t_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))))) :rule resolution :premises (t27 t28))
(step t30 (cl (=> (and (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))) (not (islimpt_d x_d (minus_d s_d t_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))))) :rule contraction :premises (t29))
(step t31 (cl (not (and (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))) (not (islimpt_d x_d (minus_d s_d t_d))))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule implies :premises (t30))
(step t32 (cl (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (not (islimpt_d x_d (minus_d s_d t_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule resolution :premises (t19 t31))
(step t33 (cl (or (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (not (islimpt_d x_d (minus_d s_d t_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) (not (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))))) :rule or_neg)
(step t34 (cl (or (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (not (islimpt_d x_d (minus_d s_d t_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) (not (not (not (islimpt_d x_d (minus_d s_d t_d)))))) :rule or_neg)
(step t35 (cl (or (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (not (islimpt_d x_d (minus_d s_d t_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) (not (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))))) :rule or_neg)
(step t36 (cl (or (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (not (islimpt_d x_d (minus_d s_d t_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) (or (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (not (islimpt_d x_d (minus_d s_d t_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) (or (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (not (islimpt_d x_d (minus_d s_d t_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))))) :rule resolution :premises (t32 t33 t34 t35))
(step t37 (cl (or (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (not (islimpt_d x_d (minus_d s_d t_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))))) :rule contraction :premises (t36))
(step t38 (cl (or (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d t_d)) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))))) :rule resolution :premises (t1 t18 t37))
(step t39 (cl (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d t_d)) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule or :premises (t38))
(step t40 (cl (islimpt_d x_d (minus_d s_d t_d)) (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule reordering :premises (t39))
(step t41 (cl (= (islimpt_d x_d s_d) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule symm :premises (a2))
(step t42 (cl (not (islimpt_d x_d s_d)) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) :rule equiv1 :premises (t41))
(step t43 (cl (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))) (not (islimpt_d x_d s_d))) :rule reordering :premises (t42))
(step t44 (cl (islimpt_d x_d (minus_d s_d t_d)) (islimpt_d x_d s_d)) :rule not_equiv1 :premises (a0))
(step t45 (cl (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (islimpt_d x_d (minus_d s_d t_d))) (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) :rule and_neg)
(step t46 (cl (=> (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) :rule implies_neg1)
(anchor :step t47)
(assume t47.a0 (islimpt_d x_d (minus_d s_d t_d)))
(assume t47.a1 (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))
(step t47.t1 (cl (=> (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) :rule implies_neg1)
(anchor :step t47.t2)
(assume t47.t2.a0 (islimpt_d x_d (minus_d s_d t_d)))
(assume t47.t2.a1 (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))
(step t47.t2.t1 (cl (= (= (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))) true) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule equiv_simplify)
(step t47.t2.t2 (cl (not (= (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))) true)) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) :rule equiv1 :premises (t47.t2.t1))
(step t47.t2.t3 (cl (= x_d x_d)) :rule refl)
(step t47.t2.t4 (cl (= (minus_d s_d (inf_d t_d s_d)) (minus_d s_d t_d))) :rule symm :premises (t47.t2.a1))
(step t47.t2.t5 (cl (= (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))) (islimpt_d x_d (minus_d s_d t_d)))) :rule cong :premises (t47.t2.t3 t47.t2.t4))
(step t47.t2.t6 (cl (= (= (islimpt_d x_d (minus_d s_d t_d)) true) (islimpt_d x_d (minus_d s_d t_d)))) :rule equiv_simplify)
(step t47.t2.t7 (cl (= (islimpt_d x_d (minus_d s_d t_d)) true) (not (islimpt_d x_d (minus_d s_d t_d)))) :rule equiv2 :premises (t47.t2.t6))
(step t47.t2.t8 (cl (= (islimpt_d x_d (minus_d s_d t_d)) true)) :rule resolution :premises (t47.t2.t7 t47.t2.a0))
(step t47.t2.t9 (cl (= (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))) true)) :rule trans :premises (t47.t2.t5 t47.t2.t8))
(step t47.t2.t10 (cl (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) :rule resolution :premises (t47.t2.t2 t47.t2.t9))
(step t47.t2 (cl (not (islimpt_d x_d (minus_d s_d t_d))) (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) :rule subproof :discharge (t47.t2.a0 t47.t2.a1))
(step t47.t3 (cl (not (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (islimpt_d x_d (minus_d s_d t_d))) :rule and_pos)
(step t47.t4 (cl (not (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) :rule and_pos)
(step t47.t5 (cl (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))) (not (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (not (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))))) :rule resolution :premises (t47.t2 t47.t3 t47.t4))
(step t47.t6 (cl (not (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (not (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) :rule reordering :premises (t47.t5))
(step t47.t7 (cl (not (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) :rule contraction :premises (t47.t6))
(step t47.t8 (cl (=> (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) :rule resolution :premises (t47.t1 t47.t7))
(step t47.t9 (cl (=> (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule implies_neg2)
(step t47.t10 (cl (=> (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) (=> (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule resolution :premises (t47.t8 t47.t9))
(step t47.t11 (cl (=> (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule contraction :premises (t47.t10))
(step t47.t12 (cl (not (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) :rule implies :premises (t47.t11))
(step t47.t13 (cl (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (not (islimpt_d x_d (minus_d s_d t_d))) (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) :rule and_neg)
(step t47.t14 (cl (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) :rule resolution :premises (t47.t13 t47.a0 t47.a1))
(step t47.t15 (cl (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) :rule resolution :premises (t47.t12 t47.t14))
(step t47 (cl (not (islimpt_d x_d (minus_d s_d t_d))) (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) :rule subproof :discharge (t47.a0 t47.a1))
(step t48 (cl (not (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (islimpt_d x_d (minus_d s_d t_d))) :rule and_pos)
(step t49 (cl (not (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) :rule and_pos)
(step t50 (cl (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))) (not (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (not (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))))) :rule resolution :premises (t47 t48 t49))
(step t51 (cl (not (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (not (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) :rule reordering :premises (t50))
(step t52 (cl (not (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) :rule contraction :premises (t51))
(step t53 (cl (=> (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) :rule resolution :premises (t46 t52))
(step t54 (cl (=> (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule implies_neg2)
(step t55 (cl (=> (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) (=> (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule resolution :premises (t53 t54))
(step t56 (cl (=> (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule contraction :premises (t55))
(step t57 (cl (not (and (islimpt_d x_d (minus_d s_d t_d)) (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) :rule implies :premises (t56))
(step t58 (cl (not (islimpt_d x_d (minus_d s_d t_d))) (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d)))) (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) :rule resolution :premises (t45 t57))
(step t59 (cl (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))) (not (islimpt_d x_d (minus_d s_d t_d))) (not (= (minus_d s_d t_d) (minus_d s_d (inf_d t_d s_d))))) :rule reordering :premises (t58))
(step t60 (cl (islimpt_d x_d s_d) (not (islimpt_d x_d (minus_d s_d (inf_d t_d s_d))))) :rule equiv2 :premises (t41))
(step t61 (cl (not (islimpt_d x_d (minus_d s_d t_d))) (not (islimpt_d x_d s_d))) :rule not_equiv2 :premises (a0))
(step t62 (cl (not (islimpt_d x_d (minus_d s_d t_d))) (not (islimpt_d x_d (minus_d s_d t_d)))) :rule resolution :premises (t59 a1 t60 t61))
(step t63 (cl (not (islimpt_d x_d (minus_d s_d t_d)))) :rule contraction :premises (t62))
(step t64 (cl (islimpt_d x_d s_d)) :rule resolution :premises (t44 t63))
(step t65 (cl (islimpt_d x_d (minus_d s_d (inf_d t_d s_d)))) :rule resolution :premises (t43 t64))
(step t66 (cl) :rule resolution :premises (t40 t65 t63 a1))
