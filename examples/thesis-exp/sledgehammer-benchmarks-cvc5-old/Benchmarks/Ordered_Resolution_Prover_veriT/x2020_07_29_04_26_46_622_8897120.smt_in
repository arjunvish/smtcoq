; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_list_d 0)
(declare-sort A_multiset_d 0)
(declare-sort A_a_literal_fun_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-sort A_literal_multiset_a_literal_multiset_fun_d 0)
(declare-fun d_d () A_literal_multiset_d)
(declare-fun asa_d () A_list_d)
(declare-fun neg_d () A_a_literal_fun_d)
(declare-fun s_G_d () A_literal_multiset_a_literal_multiset_fun_d)
(declare-fun mset_d (A_list_d) A_multiset_d)
(declare-fun plus_d (A_literal_multiset_d A_literal_multiset_d) A_literal_multiset_d)
(declare-fun eligible_d (A_literal_multiset_a_literal_multiset_fun_d A_list_d A_literal_multiset_d) Bool)
(declare-fun image_mset_d (A_a_literal_fun_d A_multiset_d) A_literal_multiset_d)
(assert (! (not (eligible_d s_G_d asa_d (plus_d d_d (image_mset_d neg_d (mset_d asa_d))))) :named a0))
(assert (! (eligible_d s_G_d asa_d (plus_d d_d (image_mset_d neg_d (mset_d asa_d)))) :named a1))
(check-sat)
;;;;(get-proof)
