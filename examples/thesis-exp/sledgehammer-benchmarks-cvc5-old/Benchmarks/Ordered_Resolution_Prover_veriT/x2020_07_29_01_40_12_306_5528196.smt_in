; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort Nat_d 0)
(declare-sort Enat_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-sort A_literal_multiset_set_d 0)
(declare-sort A_literal_multiset_set_llist_d 0)
(declare-fun c_d () A_literal_multiset_d)
(declare-fun i_d () Nat_d)
(declare-fun k_d () Nat_d)
(declare-fun ns_d () A_literal_multiset_set_llist_d)
(declare-fun enat_d (Nat_d) Enat_d)
(declare-fun less_d (Enat_d Enat_d) Bool)
(declare-fun lnth_d (A_literal_multiset_set_llist_d Nat_d) A_literal_multiset_set_d)
(declare-fun member_d (A_literal_multiset_d A_literal_multiset_set_d) Bool)
(declare-fun less_eq_d (Nat_d Nat_d) Bool)
(declare-fun llength_d (A_literal_multiset_set_llist_d) Enat_d)
(assert (! (not (member_d c_d (lnth_d ns_d k_d))) :named a0))
(assert (! (=> (and (less_eq_d i_d k_d) (less_d (enat_d k_d) (llength_d ns_d))) (member_d c_d (lnth_d ns_d k_d))) :named a1))
(assert (! (less_eq_d i_d k_d) :named a2))
(assert (! (less_d (enat_d k_d) (llength_d ns_d)) :named a3))
(check-sat)
;;;;(get-proof)
