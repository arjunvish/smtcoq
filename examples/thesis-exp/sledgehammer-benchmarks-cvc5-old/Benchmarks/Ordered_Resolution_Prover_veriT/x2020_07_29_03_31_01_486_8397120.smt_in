; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_d 0)
(declare-sort Nat_d 0)
(declare-sort A_list_d 0)
(declare-sort A_literal_d 0)
(declare-sort A_multiset_d 0)
(declare-sort A_a_literal_fun_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-fun d_d () A_literal_multiset_d)
(declare-fun as_d () A_list_d)
(declare-fun da_d () A_literal_multiset_d)
(declare-fun neg_d () A_a_literal_fun_d)
(declare-fun nth_d (A_list_d Nat_d) A_d)
(declare-fun mset_d (A_list_d) A_multiset_d)
(declare-fun plus_d (A_literal_multiset_d A_literal_multiset_d) A_literal_multiset_d)
(declare-fun zero_d () Nat_d)
(declare-fun zero_da () A_literal_multiset_d)
(declare-fun d_twin_d () A_literal_multiset_d)
(declare-fun fun_app_d (A_a_literal_fun_d A_d) A_literal_d)
(declare-fun add_mset_d (A_literal_d A_literal_multiset_d) A_literal_multiset_d)
(declare-fun image_mset_d (A_a_literal_fun_d A_multiset_d) A_literal_multiset_d)
(assert (! (not (= da_d (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) :named a0))
(assert (! (= da_d (plus_d d_d (image_mset_d neg_d (mset_d as_d)))) :named a1))
(assert (! (= (image_mset_d neg_d (mset_d as_d)) (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)) :named a2))
(assert (! (= d_twin_d d_d) :named a3))
(assert (! (= da_d (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d)))) :named a4))
(check-sat)
;;;;(get-proof)
