; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S_d 0)
(declare-sort A_list_d 0)
(declare-sort S_option_d 0)
(declare-sort A_set_set_d 0)
(declare-sort A_s_a_fun_fun_d 0)
(declare-sort A_multiset_set_d 0)
(declare-sort A_multiset_list_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-sort A_multiset_a_set_fun_d 0)
(declare-sort A_a_multiset_prod_list_d 0)
(declare-sort A_literal_multiset_list_d 0)
(declare-sort A_literal_multiset_multiset_d 0)
(declare-sort A_a_multiset_a_multiset_fun_fun_d 0)
(declare-sort A_a_multiset_prod_a_multiset_fun_d 0)
(declare-fun d0_d () A_literal_multiset_d)
(declare-fun as0_d () A_list_d)
(declare-fun cs0_d () A_literal_multiset_list_d)
(declare-fun eta_d () S_d)
(declare-fun map_d (A_a_multiset_prod_a_multiset_fun_d A_a_multiset_prod_list_d) A_multiset_list_d)
(declare-fun mgu_d (A_set_set_d) S_option_d)
(declare-fun phi_d () S_d)
(declare-fun set_d (A_multiset_list_d) A_multiset_set_d)
(declare-fun tau_d () S_d)
(declare-fun zip_d (A_list_d A_multiset_list_d) A_a_multiset_prod_list_d)
(declare-fun aAs0_d () A_multiset_list_d)
(declare-fun mset_d (A_literal_multiset_list_d) A_literal_multiset_multiset_d)
(declare-fun plus_d (A_literal_multiset_d A_literal_multiset_d) A_literal_multiset_d)
(declare-fun some_d (S_d) S_option_d)
(declare-fun image_d (A_multiset_a_set_fun_d A_multiset_set_d) A_set_set_d)
(declare-fun sigma_d () S_d)
(declare-fun add_mset_d () A_a_multiset_a_multiset_fun_fun_d)
(declare-fun set_mset_d () A_multiset_a_set_fun_d)
(declare-fun sum_mset_d (A_literal_multiset_multiset_d) A_literal_multiset_d)
(declare-fun case_prod_d (A_a_multiset_a_multiset_fun_fun_d) A_a_multiset_prod_a_multiset_fun_d)
(declare-fun subst_atm_d () A_s_a_fun_fun_d)
(declare-fun subst_cls_d (A_s_a_fun_fun_d A_literal_multiset_d S_d) A_literal_multiset_d)
(declare-fun comp_subst_d (S_d S_d) S_d)
(assert (! (not (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs0_d)) d0_d) (comp_subst_d tau_d phi_d)) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs0_d)) d0_d) (comp_subst_d eta_d sigma_d)))) :named a0))
(assert (! (= (comp_subst_d tau_d phi_d) (comp_subst_d eta_d sigma_d)) :named a1))
(assert (! (= (some_d tau_d) (mgu_d (image_d set_mset_d (set_d (map_d (case_prod_d add_mset_d) (zip_d as0_d aAs0_d)))))) :named a2))
(check-sat)
;;;;(get-proof)
