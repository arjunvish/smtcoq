; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S_d 0)
(declare-sort Nat_d 0)
(declare-sort S_list_d 0)
(declare-sort A_multiset_d 0)
(declare-sort A_s_a_fun_fun_d 0)
(declare-sort A_a_literal_fun_d 0)
(declare-sort A_multiset_list_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-sort A_literal_multiset_list_d 0)
(declare-fun i_d () Nat_d)
(declare-fun aA0_d () A_multiset_d)
(declare-fun aAs_d () A_multiset_list_d)
(declare-fun nth_d (A_literal_multiset_list_d Nat_d) A_literal_multiset_d)
(declare-fun pos_d () A_a_literal_fun_d)
(declare-fun cAs0_d () A_literal_multiset_list_d)
(declare-fun nth_da (S_list_d Nat_d) S_d)
(declare-fun nth_db (A_multiset_list_d Nat_d) A_multiset_d)
(declare-fun eta_s0_d () S_list_d)
(declare-fun poss_AA0_d () A_literal_multiset_d)
(declare-fun subst_atm_d () A_s_a_fun_fun_d)
(declare-fun subst_cls_d (A_s_a_fun_fun_d A_literal_multiset_d S_d) A_literal_multiset_d)
(declare-fun image_mset_d (A_a_literal_fun_d A_multiset_d) A_literal_multiset_d)
(declare-fun subseteq_mset_d (A_literal_multiset_d A_literal_multiset_d) Bool)
(assert (! (not (subseteq_mset_d (image_mset_d pos_d aA0_d) (nth_d cAs0_d i_d))) :named a0))
(assert (! (and (= (subst_cls_d subst_atm_d poss_AA0_d (nth_da eta_s0_d i_d)) (image_mset_d pos_d (nth_db aAs_d i_d))) (subseteq_mset_d poss_AA0_d (nth_d cAs0_d i_d))) :named a1))
(assert (! (= (image_mset_d pos_d aA0_d) poss_AA0_d) :named a2))
(check-sat)
;;;;(get-proof)
