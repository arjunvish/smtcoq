(assume a0 (not (= e_d e_da)))
(assume a1 (= e_da (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) da_d) sigma_d)))
(assume a2 (= e_d (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_da)))
(assume a3 (= dAa_d da_d))
(assume a4 (= cs_da cs_d))
(assume a5 (= sigma_db sigma_d))
(assume a6 (= sigma_dc sigma_da))
(assume a7 (= sigma_dc sigma_db))
(step t1 (cl (not (= (not (= e_d e_da)) false)) (not (not (= e_d e_da))) false) :rule equiv_pos2)
(step t2 (cl (and (= sigma_db sigma_dc) (= sigma_da sigma_dc) (= sigma_d sigma_db) (= cs_d cs_da) (= da_d dAa_d) (= e_d (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_da)) (= e_da (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) da_d) sigma_d))) (not (= sigma_db sigma_dc)) (not (= sigma_da sigma_dc)) (not (= sigma_d sigma_db)) (not (= cs_d cs_da)) (not (= da_d dAa_d)) (not (= e_d (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_da))) (not (= e_da (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) da_d) sigma_d)))) :rule and_neg)
(step t3 (cl (= sigma_db sigma_dc)) :rule symm :premises (a7))
(step t4 (cl (= sigma_da sigma_dc)) :rule symm :premises (a6))
(step t5 (cl (= sigma_d sigma_db)) :rule symm :premises (a5))
(step t6 (cl (= cs_d cs_da)) :rule symm :premises (a4))
(step t7 (cl (= da_d dAa_d)) :rule symm :premises (a3))
(step t8 (cl (and (= sigma_db sigma_dc) (= sigma_da sigma_dc) (= sigma_d sigma_db) (= cs_d cs_da) (= da_d dAa_d) (= e_d (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_da)) (= e_da (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) da_d) sigma_d)))) :rule resolution :premises (t2 t3 t4 t5 t6 t7 a2 a1))
(step t9 (cl (= e_d (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_da))) :rule and :premises (t8))
(step t10 (cl (= subst_atm_d subst_atm_d)) :rule refl)
(step t11 (cl (= (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) (plus_d (sum_mset_d (mset_d cs_da)) dAa_d))) :rule refl)
(step t12 (cl (= sigma_da sigma_dc)) :rule and :premises (t8))
(step t13 (cl (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_da) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc))) :rule cong :premises (t10 t11 t12))
(step t14 (cl (= e_d (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc))) :rule trans :premises (t9 t13))
(step t15 (cl (= e_da (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) da_d) sigma_d))) :rule and :premises (t8))
(step t16 (cl (= cs_d cs_da)) :rule and :premises (t8))
(step t17 (cl (= (mset_d cs_d) (mset_d cs_da))) :rule cong :premises (t16))
(step t18 (cl (= (sum_mset_d (mset_d cs_d)) (sum_mset_d (mset_d cs_da)))) :rule cong :premises (t17))
(step t19 (cl (= da_d dAa_d)) :rule and :premises (t8))
(step t20 (cl (= (plus_d (sum_mset_d (mset_d cs_d)) da_d) (plus_d (sum_mset_d (mset_d cs_da)) dAa_d))) :rule cong :premises (t18 t19))
(step t21 (cl (= sigma_d sigma_db)) :rule and :premises (t8))
(step t22 (cl (= sigma_db sigma_dc)) :rule and :premises (t8))
(step t23 (cl (= sigma_d sigma_dc)) :rule trans :premises (t21 t22))
(step t24 (cl (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) da_d) sigma_d) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc))) :rule cong :premises (t10 t20 t23))
(step t25 (cl (= e_da (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc))) :rule trans :premises (t15 t24))
(step t26 (cl (= (= e_d e_da) (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc)))) :rule cong :premises (t14 t25))
(step t27 (cl (= (not (= e_d e_da)) (not (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc))))) :rule cong :premises (t26))
(step t28 (cl (= (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc)) true)) :rule all_simplify :args (eq_simplify1 (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc)))
(step t29 (cl (= (not (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc))) (not true))) :rule cong :premises (t28))
(step t30 (cl (= (not true) false)) :rule not_simplify)
(step t31 (cl (= (not (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc) (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_da)) dAa_d) sigma_dc))) false)) :rule trans :premises (t29 t30))
(step t32 (cl (= (not (= e_d e_da)) false)) :rule trans :premises (t27 t31))
(step t33 (cl false) :rule resolution :premises (t1 t32 a0))
(step t34 (cl (not false)) :rule false)
(step t35 (cl) :rule resolution :premises (t33 t34))
