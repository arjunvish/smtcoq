(assume a0 (not (= da_d (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))))
(assume a1 (= da_d (plus_d d_d (image_mset_d neg_d (mset_d as_d)))))
(assume a2 (= (image_mset_d neg_d (mset_d as_d)) (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))
(assume a3 (= d_twin_d d_d))
(assume a4 (= da_d (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d)))))
(step t1 (cl (=> (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d)))) :rule implies_neg1)
(anchor :step t2)
(assume t2.a0 (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))))
(step t2.t1 (cl (=> (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d)))) :rule implies_neg1)
(anchor :step t2.t2)
(assume t2.t2.a0 (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))))
(step t2.t2.t1 (cl (= d_twin_d d_twin_d)) :rule refl)
(step t2.t2.t2 (cl (= (image_mset_d neg_d (mset_d as_d)) (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))) :rule symm :premises (t2.t2.a0))
(step t2.t2.t3 (cl (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) :rule cong :premises (t2.t2.t1 t2.t2.t2))
(step t2.t2 (cl (not (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d)))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) :rule subproof :discharge (t2.t2.a0))
(step t2.t3 (cl (=> (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) :rule resolution :premises (t2.t1 t2.t2))
(step t2.t4 (cl (=> (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) (not (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))))) :rule implies_neg2)
(step t2.t5 (cl (=> (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) (=> (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))))) :rule resolution :premises (t2.t3 t2.t4))
(step t2.t6 (cl (=> (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))))) :rule contraction :premises (t2.t5))
(step t2.t7 (cl (not (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d)))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) :rule implies :premises (t2.t6))
(step t2.t8 (cl (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) :rule resolution :premises (t2.t7 t2.a0))
(step t2 (cl (not (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d)))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) :rule subproof :discharge (t2.a0))
(step t3 (cl (=> (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) :rule resolution :premises (t1 t2))
(step t4 (cl (=> (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) (not (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))))) :rule implies_neg2)
(step t5 (cl (=> (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) (=> (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))))) :rule resolution :premises (t3 t4))
(step t6 (cl (=> (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))))) :rule contraction :premises (t5))
(step t7 (cl (not (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d)))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) :rule implies :premises (t6))
(step t8 (cl (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))) (not (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))))) :rule reordering :premises (t7))
(step t9 (cl (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d)))) :rule symm :premises (a2))
(step t10 (cl (not (= (not (= da_d (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) (not (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))))) (not (not (= da_d (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))))) (not (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))))) :rule equiv_pos2)
(step t11 (cl (and (= d_d d_twin_d) (= da_d (plus_d d_d (image_mset_d neg_d (mset_d as_d))))) (not (= d_d d_twin_d)) (not (= da_d (plus_d d_d (image_mset_d neg_d (mset_d as_d)))))) :rule and_neg)
(step t12 (cl (= d_d d_twin_d)) :rule symm :premises (a3))
(step t13 (cl (and (= d_d d_twin_d) (= da_d (plus_d d_d (image_mset_d neg_d (mset_d as_d)))))) :rule resolution :premises (t11 t12 a1))
(step t14 (cl (= da_d (plus_d d_d (image_mset_d neg_d (mset_d as_d))))) :rule and :premises (t13))
(step t15 (cl (= d_d d_twin_d)) :rule and :premises (t13))
(step t16 (cl (= (image_mset_d neg_d (mset_d as_d)) (image_mset_d neg_d (mset_d as_d)))) :rule refl)
(step t17 (cl (= (plus_d d_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))))) :rule cong :premises (t15 t16))
(step t18 (cl (= da_d (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))))) :rule trans :premises (t14 t17))
(step t19 (cl (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))) :rule refl)
(step t20 (cl (= (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) :rule cong :premises (t15 t19))
(step t21 (cl (= (= da_d (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))))) :rule cong :premises (t18 t20))
(step t22 (cl (= (not (= da_d (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) (not (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))))) :rule cong :premises (t21))
(step t23 (cl (not (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))))) :rule resolution :premises (t10 t22 a0))
(step t24 (cl) :rule resolution :premises (t8 t9 t23))
