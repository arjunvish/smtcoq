(assume a0 (not (= (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d) (nth_d cs_d i_d))))
(assume a1 (= (size_d eta_s0_d) n_d))
(assume a2 (= (size_da cAs_d) n_d))
(assume a3 (= (size_da cs_d) n_d))
(assume a4 (= (size_da cs0_d) n_d))
(assume a5 (= (size_db aAs_d) n_d))
(assume a6 (= (size_dc as_d) n_d))
(assume a7 (not (= n_d zero_d)))
(assume a8 (= (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) cs_d))
(assume a9 (less_d i_d n_d))
(assume a10 (= (size_dc as0_d) n_d))
(assume a11 (= (size_d (renamings_apart_d (cons_d dA0_d cAs0_d))) (suc_d n_d)))
(assume a12 (= (size_db aAs0_d) n_d))
(assume a13 (= (size_db aAs0_da) n_d))
(assume a14 (= (size_dc as0_da) n_d))
(assume a15 (= (size_da cAs0_da) n_d))
(assume a16 (= (size_da cs0_da) n_d))
(assume a17 (= (size_d rho_s_d) n_d))
(assume a18 (= (size_da cAs0_d) n_d))
(assume a19 (= (size_d eta_s0_da) n_d))
(step t1 (cl (not (= (not (= (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d) (nth_d cs_d i_d))) false)) (not (not (= (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d) (nth_d cs_d i_d)))) false) :rule equiv_pos2)
(step t2 (cl (= (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d) (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d))) :rule refl)
(step t3 (cl (and (= cs_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d)) (= n_d (size_d eta_s0_d))) (not (= cs_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d))) (not (= n_d (size_d eta_s0_d)))) :rule and_neg)
(step t4 (cl (= cs_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d))) :rule symm :premises (a8))
(step t5 (cl (= n_d (size_d eta_s0_d))) :rule symm :premises (a1))
(step t6 (cl (and (= cs_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d)) (= n_d (size_d eta_s0_d)))) :rule resolution :premises (t3 t4 t5))
(step t7 (cl (= cs_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d))) :rule and :premises (t6))
(step t8 (cl (= i_d i_d)) :rule refl)
(step t9 (cl (= (nth_d cs_d i_d) (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d))) :rule cong :premises (t7 t8))
(step t10 (cl (= (= (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d) (nth_d cs_d i_d)) (= (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d) (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d)))) :rule cong :premises (t2 t9))
(step t11 (cl (= (not (= (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d) (nth_d cs_d i_d))) (not (= (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d) (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d))))) :rule cong :premises (t10))
(step t12 (cl (= (= (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d) (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d)) true)) :rule all_simplify :args (eq_simplify1 (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d)))
(step t13 (cl (= (not (= (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d) (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d))) (not true))) :rule cong :premises (t12))
(step t14 (cl (= (not true) false)) :rule not_simplify)
(step t15 (cl (= (not (= (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d) (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d))) false)) :rule trans :premises (t13 t14))
(step t16 (cl (= (not (= (nth_d (subst_cls_lists_d subst_atm_d cs0_d eta_s0_d) i_d) (nth_d cs_d i_d))) false)) :rule trans :premises (t11 t15))
(step t17 (cl false) :rule resolution :premises (t1 t16 a0))
(step t18 (cl (not false)) :rule false)
(step t19 (cl) :rule resolution :premises (t17 t18))
