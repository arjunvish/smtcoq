; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S_d 0)
(declare-sort A_list_d 0)
(declare-sort S_list_d 0)
(declare-sort A_s_a_fun_fun_d 0)
(declare-sort A_multiset_list_d 0)
(declare-sort A_a_bool_fun_fun_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-sort A_set_set_s_option_fun_d 0)
(declare-sort A_literal_multiset_list_d 0)
(declare-sort A_literal_multiset_a_literal_multiset_fun_d 0)
(declare-fun s_d () A_literal_multiset_a_literal_multiset_fun_d)
(declare-fun e0_d () A_literal_multiset_d)
(declare-fun hd_d (S_list_d) S_d)
(declare-fun tl_d (S_list_d) S_list_d)
(declare-fun as0_d () A_list_d)
(declare-fun dA0_d () A_literal_multiset_d)
(declare-fun mgu_d () A_set_set_s_option_fun_d)
(declare-fun rho_d () S_d)
(declare-fun tau_d () S_d)
(declare-fun aAs0_d () A_multiset_list_d)
(declare-fun as0_da () A_list_d)
(declare-fun cAs0_d () A_literal_multiset_list_d)
(declare-fun cons_d (A_literal_multiset_d A_literal_multiset_list_d) A_literal_multiset_list_d)
(declare-fun dA0_da () A_literal_multiset_d)
(declare-fun aAs0_da () A_multiset_list_d)
(declare-fun cAs0_da () A_literal_multiset_list_d)
(declare-fun rho_s_d () S_list_d)
(declare-fun less_atm_d () A_a_bool_fun_fun_d)
(declare-fun subst_atm_d () A_s_a_fun_fun_d)
(declare-fun subst_cls_d (A_s_a_fun_fun_d A_literal_multiset_d S_d) A_literal_multiset_d)
(declare-fun ord_resolve_d (A_s_a_fun_fun_d A_set_set_s_option_fun_d A_a_bool_fun_fun_d A_literal_multiset_a_literal_multiset_fun_d A_literal_multiset_list_d A_literal_multiset_d A_multiset_list_d A_list_d S_d A_literal_multiset_d) Bool)
(declare-fun subst_atm_list_d (A_s_a_fun_fun_d A_list_d S_d) A_list_d)
(declare-fun renamings_apart_d (A_literal_multiset_list_d) S_list_d)
(declare-fun subst_cls_lists_d (A_s_a_fun_fun_d A_literal_multiset_list_d S_list_d) A_literal_multiset_list_d)
(declare-fun subst_atm_mset_lists_d (A_s_a_fun_fun_d A_multiset_list_d S_list_d) A_multiset_list_d)
(assert (! (not (ord_resolve_d subst_atm_d mgu_d less_atm_d s_d (subst_cls_lists_d subst_atm_d cAs0_d rho_s_d) (subst_cls_d subst_atm_d dA0_d rho_d) (subst_atm_mset_lists_d subst_atm_d aAs0_d rho_s_d) (subst_atm_list_d subst_atm_d as0_d rho_d) tau_d e0_d)) :named a0))
(assert (! (= dA0_da (subst_cls_d subst_atm_d dA0_d rho_d)) :named a1))
(assert (! (= cAs0_da (subst_cls_lists_d subst_atm_d cAs0_d rho_s_d)) :named a2))
(assert (! (= as0_da (subst_atm_list_d subst_atm_d as0_d rho_d)) :named a3))
(assert (! (= aAs0_da (subst_atm_mset_lists_d subst_atm_d aAs0_d rho_s_d)) :named a4))
(assert (! (ord_resolve_d subst_atm_d mgu_d less_atm_d s_d cAs0_da dA0_da aAs0_da as0_da tau_d e0_d) :named a5))
(assert (! (= rho_s_d (tl_d (renamings_apart_d (cons_d dA0_d cAs0_d)))) :named a6))
(assert (! (= rho_d (hd_d (renamings_apart_d (cons_d dA0_d cAs0_d)))) :named a7))
(check-sat)
;;;;(get-proof)
