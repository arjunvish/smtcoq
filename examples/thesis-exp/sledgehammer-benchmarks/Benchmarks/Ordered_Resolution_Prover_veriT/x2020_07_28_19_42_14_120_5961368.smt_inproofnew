(assume a0 (not (= (wf_d (collect_d (case_prod_d r_d))) (wf_d (collect_d (case_prod_d r_d))))))
(step t2 (cl (= (= (wf_d (collect_d (case_prod_d r_d))) (wf_d (collect_d (case_prod_d r_d)))) true)) :rule equiv_simplify)
(step t3 (cl (= (not (= (wf_d (collect_d (case_prod_d r_d))) (wf_d (collect_d (case_prod_d r_d))))) (not true))) :rule cong :premises (t2))
(step t4 (cl (= (not true) false)) :rule not_simplify)
(step t5 (cl (= (not (= (wf_d (collect_d (case_prod_d r_d))) (wf_d (collect_d (case_prod_d r_d))))) false)) :rule trans :premises (t3 t4))
(step t6 (cl (not (= (not (= (wf_d (collect_d (case_prod_d r_d))) (wf_d (collect_d (case_prod_d r_d))))) false)) (not (not (= (wf_d (collect_d (case_prod_d r_d))) (wf_d (collect_d (case_prod_d r_d)))))) false) :rule equiv_pos2)
(step t7 (cl (not (not (not (= (wf_d (collect_d (case_prod_d r_d))) (wf_d (collect_d (case_prod_d r_d))))))) (= (wf_d (collect_d (case_prod_d r_d))) (wf_d (collect_d (case_prod_d r_d))))) :rule not_not)
(step t8 (cl (not (= (not (= (wf_d (collect_d (case_prod_d r_d))) (wf_d (collect_d (case_prod_d r_d))))) false)) (= (wf_d (collect_d (case_prod_d r_d))) (wf_d (collect_d (case_prod_d r_d)))) false) :rule th_resolution :premises (t7 t6))
(step t9 (cl false) :rule th_resolution :premises (a0 t5 t8))
(step t10 (cl (not false)) :rule false)
(step t11 (cl) :rule resolution :premises (t9 t10))
