(assume a0 (not (= da_d (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))))
(assume a1 (= da_d (plus_d d_d (image_mset_d neg_d (mset_d as_d)))))
(assume a2 (= (image_mset_d neg_d (mset_d as_d)) (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))
(assume a3 (= d_twin_d d_d))
(assume a4 (= da_d (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d)))))
(step t0 (cl (=> (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d)))) :rule implies_neg1)
(anchor :step t1)
(assume t1.a0 (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))))
(step t1.t0 (cl (= d_twin_d d_twin_d)) :rule refl)
(step t1.t1 (cl (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) :rule cong :premises (t1.t0 a2))
(step t1 (cl (not (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d)))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) :rule subproof :discharge (t1.a0))
(step t2 (cl (=> (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) :rule resolution :premises (t0 t1))
(step t3 (cl (=> (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) (not (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))))) :rule implies_neg2)
(step t4 (cl (=> (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) (=> (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))))) :rule resolution :premises (t2 t3))
(step t5 (cl (=> (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))))) :rule contraction :premises (t4))
(step t6 (cl (not (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d)))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) :rule implies :premises (t5))
(step t7 (cl (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))) (not (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))))) :rule reordering :premises (t6))
(step t8 (cl (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d)))) :rule symm :premises (a2))
(step t9 (cl (not (= (not (= da_d (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) (not (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))))) (not (not (= da_d (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))))) (not (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))))) :rule equiv_pos2)
(step t10 (cl (= d_d d_twin_d)) :rule symm :premises (a3))
(step t11 (cl (= (image_mset_d neg_d (mset_d as_d)) (image_mset_d neg_d (mset_d as_d)))) :rule refl)
(step t12 (cl (= (plus_d d_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))))) :rule cong :premises (t10 t11))
(step t13 (cl (= da_d (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))))) :rule trans :premises (a1 t12))
(step t14 (cl (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))) :rule refl)
(step t15 (cl (= (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) :rule cong :premises (t10 t14))
(step t16 (cl (= (= da_d (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))) (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))))) :rule cong :premises (t13 t15))
(step t17 (cl (= (not (= da_d (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) (not (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))))) :rule cong :premises (t16))
(step t18 (cl (not (= (plus_d d_twin_d (image_mset_d neg_d (mset_d as_d))) (plus_d d_twin_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))))) :rule resolution :premises (t9 t17 a0))
(step t19 (cl) :rule resolution :premises (t7 t8 t18))
