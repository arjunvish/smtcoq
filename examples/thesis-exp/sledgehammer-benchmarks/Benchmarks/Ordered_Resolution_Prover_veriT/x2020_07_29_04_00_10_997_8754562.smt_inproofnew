(assume a0 (not (= (image_mset_d neg_d (mset_d as0_d)) (fun_app_d s_d (plus_d d0_d (image_mset_d neg_d (mset_d as0_d)))))))
(assume a1 (= (plus_d d0_d (image_mset_d neg_d (mset_d as0_d))) dA0_d))
(assume a2 (=> (not (= (s_M_d subst_atm_d s_d m_d (plus_d d_d (image_mset_d neg_d (mset_d as_d)))) zero_d)) (= (image_mset_d neg_d (mset_d as0_d)) (fun_app_d s_d dA0_d))))
(assume a3 (not (= (s_M_d subst_atm_d s_d m_d (plus_d d_d (image_mset_d neg_d (mset_d as_d)))) zero_d)))
(step t5 (cl (not (not (= (s_M_d subst_atm_d s_d m_d (plus_d d_d (image_mset_d neg_d (mset_d as_d)))) zero_d))) (= (image_mset_d neg_d (mset_d as0_d)) (fun_app_d s_d dA0_d))) :rule implies :premises (a2))
(step t6 (cl (not (not (not (= (s_M_d subst_atm_d s_d m_d (plus_d d_d (image_mset_d neg_d (mset_d as_d)))) zero_d)))) (= (s_M_d subst_atm_d s_d m_d (plus_d d_d (image_mset_d neg_d (mset_d as_d)))) zero_d)) :rule not_not)
(step t7 (cl (= (s_M_d subst_atm_d s_d m_d (plus_d d_d (image_mset_d neg_d (mset_d as_d)))) zero_d) (= (image_mset_d neg_d (mset_d as0_d)) (fun_app_d s_d dA0_d))) :rule th_resolution :premises (t6 t5))
(step t8 (cl (= (image_mset_d neg_d (mset_d as0_d)) (fun_app_d s_d dA0_d))) :rule resolution :premises (t7 a3))
(step t9 (cl (not (= (image_mset_d neg_d (mset_d as0_d)) (fun_app_d s_d dA0_d))) (not (= (fun_app_d s_d (plus_d d0_d (image_mset_d neg_d (mset_d as0_d)))) (fun_app_d s_d dA0_d))) (= (image_mset_d neg_d (mset_d as0_d)) (fun_app_d s_d (plus_d d0_d (image_mset_d neg_d (mset_d as0_d)))))) :rule eq_transitive)
(step t10 (cl (not (= s_d s_d)) (not (= (plus_d d0_d (image_mset_d neg_d (mset_d as0_d))) dA0_d)) (= (fun_app_d s_d (plus_d d0_d (image_mset_d neg_d (mset_d as0_d)))) (fun_app_d s_d dA0_d))) :rule eq_congruent)
(step t11 (cl (= s_d s_d)) :rule eq_reflexive)
(step t12 (cl (not (= (plus_d d0_d (image_mset_d neg_d (mset_d as0_d))) dA0_d)) (= (fun_app_d s_d (plus_d d0_d (image_mset_d neg_d (mset_d as0_d)))) (fun_app_d s_d dA0_d))) :rule th_resolution :premises (t10 t11))
(step t13 (cl (not (= (image_mset_d neg_d (mset_d as0_d)) (fun_app_d s_d dA0_d))) (= (image_mset_d neg_d (mset_d as0_d)) (fun_app_d s_d (plus_d d0_d (image_mset_d neg_d (mset_d as0_d))))) (not (= (plus_d d0_d (image_mset_d neg_d (mset_d as0_d))) dA0_d))) :rule th_resolution :premises (t9 t12))
(step t14 (cl) :rule resolution :premises (t13 a0 a1 t8))
