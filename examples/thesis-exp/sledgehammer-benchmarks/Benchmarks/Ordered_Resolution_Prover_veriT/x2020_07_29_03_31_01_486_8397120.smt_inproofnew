(assume a0 (not (= da_d (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))))
(assume a1 (= da_d (plus_d d_d (image_mset_d neg_d (mset_d as_d)))))
(assume a2 (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))))
(step t4 (cl (not (= da_d (plus_d d_d (image_mset_d neg_d (mset_d as_d))))) (not (= (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)) (plus_d d_d (image_mset_d neg_d (mset_d as_d))))) (= da_d (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)))) :rule eq_transitive)
(step t5 (cl (not (= d_d d_d)) (not (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d)))) (= (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)) (plus_d d_d (image_mset_d neg_d (mset_d as_d))))) :rule eq_congruent)
(step t6 (cl (= d_d d_d)) :rule eq_reflexive)
(step t7 (cl (not (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d)))) (= (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da)) (plus_d d_d (image_mset_d neg_d (mset_d as_d))))) :rule th_resolution :premises (t5 t6))
(step t8 (cl (not (= da_d (plus_d d_d (image_mset_d neg_d (mset_d as_d))))) (= da_d (plus_d d_d (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da))) (not (= (add_mset_d (fun_app_d neg_d (nth_d as_d zero_d)) zero_da) (image_mset_d neg_d (mset_d as_d))))) :rule th_resolution :premises (t4 t7))
(step t9 (cl) :rule resolution :premises (t8 a0 a1 a2))
