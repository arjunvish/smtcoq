; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S_d 0)
(declare-sort A_set_d 0)
(declare-sort A_s_a_fun_fun_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-fun e_d () A_literal_multiset_d)
(declare-fun i_d () A_set_d)
(declare-fun eta_d () S_d)
(declare-fun true_cls_d (A_set_d A_literal_multiset_d) Bool)
(declare-fun subst_atm_d () A_s_a_fun_fun_d)
(declare-fun subst_cls_d (A_s_a_fun_fun_d A_literal_multiset_d S_d) A_literal_multiset_d)
(declare-fun is_ground_subst_d (A_s_a_fun_fun_d S_d) Bool)
(assert (! (not (true_cls_d i_d (subst_cls_d subst_atm_d e_d eta_d))) :named a0))
(assert (! (is_ground_subst_d subst_atm_d eta_d) :named a1))
(assert (! (=> (is_ground_subst_d subst_atm_d eta_d) (true_cls_d i_d (subst_cls_d subst_atm_d e_d eta_d))) :named a2))
(check-sat)
;;;;(get-proof)
