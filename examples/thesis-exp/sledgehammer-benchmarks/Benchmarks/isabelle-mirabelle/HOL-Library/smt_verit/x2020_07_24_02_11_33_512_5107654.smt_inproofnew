(assume a0 (not (or (not (= (suc_d (suc_d zero_d)) (numeral_d (bit0_d one_d)))) (= (nsets_d a_d (suc_d (suc_d zero_d))) (nsets_d a_d (numeral_d (bit0_d one_d)))))))
(step t2 (cl (not (not (= (suc_d (suc_d zero_d)) (numeral_d (bit0_d one_d)))))) :rule not_or :premises (a0))
(step t3 (cl (not (not (not (= (suc_d (suc_d zero_d)) (numeral_d (bit0_d one_d)))))) (= (suc_d (suc_d zero_d)) (numeral_d (bit0_d one_d)))) :rule not_not)
(step t4 (cl (= (suc_d (suc_d zero_d)) (numeral_d (bit0_d one_d)))) :rule th_resolution :premises (t3 t2))
(step t5 (cl (not (= (nsets_d a_d (suc_d (suc_d zero_d))) (nsets_d a_d (numeral_d (bit0_d one_d)))))) :rule not_or :premises (a0))
(step t6 (cl (not (= a_d a_d)) (not (= (suc_d (suc_d zero_d)) (numeral_d (bit0_d one_d)))) (= (nsets_d a_d (suc_d (suc_d zero_d))) (nsets_d a_d (numeral_d (bit0_d one_d))))) :rule eq_congruent)
(step t7 (cl (= a_d a_d)) :rule eq_reflexive)
(step t8 (cl (not (= (suc_d (suc_d zero_d)) (numeral_d (bit0_d one_d)))) (= (nsets_d a_d (suc_d (suc_d zero_d))) (nsets_d a_d (numeral_d (bit0_d one_d))))) :rule th_resolution :premises (t6 t7))
(step t9 (cl) :rule resolution :premises (t8 t4 t5))
