(assume a0 (not (or (not (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))) (= (abs_d (modulo_d (of_nat_d (suc_d ka_d)) n_d)) (abs_d (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))))))
(step t0 (cl (=> (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d)) (= (abs_d (modulo_d (of_nat_d (suc_d ka_d)) n_d)) (abs_d (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d)))) (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))) :rule implies_neg1)
(anchor :step t1)
(assume t1.a0 (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d)))
(step t1.t0 (cl (not (not (not (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))))) (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))) :rule not_not)
(step t1.t1 (cl (not (not (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))))) :rule not_or :premises (a0))
(step t1.t2 (cl (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))) :rule resolution :premises (t1.t0 t1.t1))
(step t1.t3 (cl (= (abs_d (modulo_d (of_nat_d (suc_d ka_d)) n_d)) (abs_d (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d)))) :rule cong :premises (t1.t2))
(step t1 (cl (not (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))) (= (abs_d (modulo_d (of_nat_d (suc_d ka_d)) n_d)) (abs_d (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d)))) :rule subproof :discharge (t1.a0))
(step t2 (cl (=> (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d)) (= (abs_d (modulo_d (of_nat_d (suc_d ka_d)) n_d)) (abs_d (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d)))) (= (abs_d (modulo_d (of_nat_d (suc_d ka_d)) n_d)) (abs_d (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d)))) :rule resolution :premises (t0 t1))
(step t3 (cl (=> (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d)) (= (abs_d (modulo_d (of_nat_d (suc_d ka_d)) n_d)) (abs_d (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d)))) (not (= (abs_d (modulo_d (of_nat_d (suc_d ka_d)) n_d)) (abs_d (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))))) :rule implies_neg2)
(step t4 (cl (=> (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d)) (= (abs_d (modulo_d (of_nat_d (suc_d ka_d)) n_d)) (abs_d (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d)))) (=> (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d)) (= (abs_d (modulo_d (of_nat_d (suc_d ka_d)) n_d)) (abs_d (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))))) :rule resolution :premises (t2 t3))
(step t5 (cl (=> (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d)) (= (abs_d (modulo_d (of_nat_d (suc_d ka_d)) n_d)) (abs_d (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))))) :rule contraction :premises (t4))
(step t6 (cl (not (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))) (= (abs_d (modulo_d (of_nat_d (suc_d ka_d)) n_d)) (abs_d (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d)))) :rule implies :premises (t5))
(step t7 (cl (not (= (abs_d (modulo_d (of_nat_d (suc_d ka_d)) n_d)) (abs_d (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))))) :rule not_or :premises (a0))
(step t8 (cl (not (not (not (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))))) (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))) :rule not_not)
(step t9 (cl (not (not (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))))) :rule not_or :premises (a0))
(step t10 (cl (= (modulo_d (of_nat_d (suc_d ka_d)) n_d) (modulo_d (+ (rep_d one_d) (rep_d (of_nat_da ka_d))) n_d))) :rule resolution :premises (t8 t9))
(step t11 (cl) :rule resolution :premises (t6 t7 t10))
