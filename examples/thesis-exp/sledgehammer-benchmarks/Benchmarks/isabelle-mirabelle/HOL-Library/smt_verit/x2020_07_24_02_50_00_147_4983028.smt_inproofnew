(assume a0 (not (= (= (f_d x_d) (f_d y_d)) (= x_d y_d))))
(assume a1 (= x_d (g_d (f_d x_d))))
(assume a2 (= y_d (g_d (f_d y_d))))
(step t4 (cl (= (f_d x_d) (f_d y_d)) (= x_d y_d)) :rule not_equiv1 :premises (a0))
(step t5 (cl (not (= (f_d x_d) (f_d y_d))) (not (= x_d y_d))) :rule not_equiv2 :premises (a0))
(step t6 (cl (not (= x_d y_d)) (= (f_d x_d) (f_d y_d))) :rule eq_congruent)
(step t7 (cl (= (f_d x_d) (f_d y_d))) :rule resolution :premises (t6 t4))
(step t8 (cl (not (= x_d y_d))) :rule resolution :premises (t5 t7))
(step t9 (cl (not (= x_d (g_d (f_d x_d)))) (not (= (g_d (f_d x_d)) (g_d (f_d y_d)))) (not (= y_d (g_d (f_d y_d)))) (= x_d y_d)) :rule eq_transitive)
(step t10 (cl (not (= (f_d x_d) (f_d y_d))) (= (g_d (f_d x_d)) (g_d (f_d y_d)))) :rule eq_congruent)
(step t11 (cl (not (= x_d (g_d (f_d x_d)))) (not (= y_d (g_d (f_d y_d)))) (= x_d y_d) (not (= (f_d x_d) (f_d y_d)))) :rule th_resolution :premises (t9 t10))
(step t12 (cl) :rule resolution :premises (t11 t7 t8 a1 a2))
