(assume a0 (not thesis_d))
(assume a1 (=> (<= e2_d e1_d) thesis_d))
(assume a2 (=> (<= e1_d e2_d) thesis_d))
(step t0 (cl (not (= (< (+ (* 1 (+ e1_d (* (- 1) e2_d))) (* (- 1) (+ e1_d (* (- 1) e2_d)))) (+ (* 1 0) (* (- 1) 1))) false)) (not (< (+ (* 1 (+ e1_d (* (- 1) e2_d))) (* (- 1) (+ e1_d (* (- 1) e2_d)))) (+ (* 1 0) (* (- 1) 1)))) false) :rule equiv_pos2)
(step t1 (cl (= (< (+ (* 1 (+ e1_d (* (- 1) e2_d))) (* (- 1) (+ e1_d (* (- 1) e2_d)))) (+ (* 1 0) (* (- 1) 1))) (not (>= (+ (* 1 (+ e1_d (* (- 1) e2_d))) (* (- 1) (+ e1_d (* (- 1) e2_d)))) (+ (* 1 0) (* (- 1) 1)))))) :rule all_simplify)
(step t2 (cl (= (* 1 (+ e1_d (* (- 1) e2_d))) (+ e1_d (* (- 1) e2_d)))) :rule all_simplify)
(step t3 (cl (= (* (- 1) (+ e1_d (* (- 1) e2_d))) (+ (* (- 1) e1_d) e2_d))) :rule all_simplify)
(step t4 (cl (= (+ (* 1 (+ e1_d (* (- 1) e2_d))) (* (- 1) (+ e1_d (* (- 1) e2_d)))) (+ (+ e1_d (* (- 1) e2_d)) (+ (* (- 1) e1_d) e2_d)))) :rule cong :premises (t2 t3))
(step t5 (cl (= (+ (+ e1_d (* (- 1) e2_d)) (+ (* (- 1) e1_d) e2_d)) 0)) :rule all_simplify)
(step t6 (cl (= (+ (* 1 (+ e1_d (* (- 1) e2_d))) (* (- 1) (+ e1_d (* (- 1) e2_d)))) 0)) :rule trans :premises (t4 t5))
(step t7 (cl (= (* 1 0) 0)) :rule all_simplify)
(step t8 (cl (= (* (- 1) 1) (- 1))) :rule all_simplify)
(step t9 (cl (= (+ (* 1 0) (* (- 1) 1)) (+ 0 (- 1)))) :rule cong :premises (t7 t8))
(step t10 (cl (= (+ 0 (- 1)) (- 1))) :rule all_simplify)
(step t11 (cl (= (+ (* 1 0) (* (- 1) 1)) (- 1))) :rule trans :premises (t9 t10))
(step t12 (cl (= (>= (+ (* 1 (+ e1_d (* (- 1) e2_d))) (* (- 1) (+ e1_d (* (- 1) e2_d)))) (+ (* 1 0) (* (- 1) 1))) (>= 0 (- 1)))) :rule cong :premises (t6 t11))
(step t13 (cl (= (>= 0 (- 1)) true)) :rule all_simplify)
(step t14 (cl (= (>= (+ (* 1 (+ e1_d (* (- 1) e2_d))) (* (- 1) (+ e1_d (* (- 1) e2_d)))) (+ (* 1 0) (* (- 1) 1))) true)) :rule trans :premises (t12 t13))
(step t15 (cl (= (not (>= (+ (* 1 (+ e1_d (* (- 1) e2_d))) (* (- 1) (+ e1_d (* (- 1) e2_d)))) (+ (* 1 0) (* (- 1) 1)))) (not true))) :rule cong :premises (t14))
(step t16 (cl (= (not true) false)) :rule all_simplify)
(step t17 (cl (= (not (>= (+ (* 1 (+ e1_d (* (- 1) e2_d))) (* (- 1) (+ e1_d (* (- 1) e2_d)))) (+ (* 1 0) (* (- 1) 1)))) false)) :rule trans :premises (t15 t16))
(step t18 (cl (= (< (+ (* 1 (+ e1_d (* (- 1) e2_d))) (* (- 1) (+ e1_d (* (- 1) e2_d)))) (+ (* 1 0) (* (- 1) 1))) false)) :rule trans :premises (t1 t17))
(step t19 (cl (not (< (* 1 (+ e1_d (* (- 1) e2_d))) (* 1 0))) (not (<= (* (- 1) (+ e1_d (* (- 1) e2_d))) (* (- 1) 1))) (< (+ (* 1 (+ e1_d (* (- 1) e2_d))) (* (- 1) (+ e1_d (* (- 1) e2_d)))) (+ (* 1 0) (* (- 1) 1)))) :rule la_generic :args (1 1 1))
(step t20 (cl (=> (and (> 1 0) (< (+ e1_d (* (- 1) e2_d)) 0)) (< (* 1 (+ e1_d (* (- 1) e2_d))) (* 1 0)))) :rule la_mult_pos)
(step t21 (cl (not (and (> 1 0) (< (+ e1_d (* (- 1) e2_d)) 0))) (< (* 1 (+ e1_d (* (- 1) e2_d))) (* 1 0))) :rule implies :premises (t20))
(step t22 (cl (and (> 1 0) (< (+ e1_d (* (- 1) e2_d)) 0)) (not (> 1 0)) (not (< (+ e1_d (* (- 1) e2_d)) 0))) :rule and_neg)
(step t23 (cl (= (= (> 1 0) true) (> 1 0))) :rule equiv_simplify)
(step t24 (cl (not (= (> 1 0) true)) (> 1 0)) :rule equiv1 :premises (t23))
(step t25 (cl (= (> 1 0) true)) :rule rare_rewrite :args ("evaluate"))
(step t26 (cl (> 1 0)) :rule resolution :premises (t24 t25))
(step t27 (cl (not (= (not (>= (+ e1_d (* (- 1) e2_d)) 0)) (< (+ e1_d (* (- 1) e2_d)) 0))) (not (not (>= (+ e1_d (* (- 1) e2_d)) 0))) (< (+ e1_d (* (- 1) e2_d)) 0)) :rule equiv_pos2)
(step t28 (cl (= (< (+ e1_d (* (- 1) e2_d)) 0) (not (>= (+ e1_d (* (- 1) e2_d)) 0)))) :rule all_simplify)
(step t29 (cl (= (not (>= (+ e1_d (* (- 1) e2_d)) 0)) (< (+ e1_d (* (- 1) e2_d)) 0))) :rule symm :premises (t28))
(step t30 (cl (not (= (=> (<= e2_d e1_d) thesis_d) (not (>= (+ e1_d (* (- 1) e2_d)) 0)))) (not (=> (<= e2_d e1_d) thesis_d)) (not (>= (+ e1_d (* (- 1) e2_d)) 0))) :rule equiv_pos2)
(step t31 (cl (= (<= e2_d e1_d) (>= (+ e1_d (* (- 1) e2_d)) 0))) :rule all_simplify)
(step t32 (cl (= thesis_d thesis_d)) :rule refl)
(step t33 (cl (= (=> (<= e2_d e1_d) thesis_d) (=> (>= (+ e1_d (* (- 1) e2_d)) 0) thesis_d))) :rule cong :premises (t31 t32))
(step t34 (cl (= (>= (+ e1_d (* (- 1) e2_d)) 0) (>= (+ e1_d (* (- 1) e2_d)) 0))) :rule refl)
(step t35 (cl (not (= (not thesis_d) (= thesis_d false))) (not (not thesis_d)) (= thesis_d false)) :rule equiv_pos2)
(step t36 (cl (= (= thesis_d false) (not thesis_d))) :rule all_simplify)
(step t37 (cl (= (not thesis_d) (= thesis_d false))) :rule symm :premises (t36))
(step t38 (cl (= thesis_d false)) :rule resolution :premises (t35 t37 a0))
(step t39 (cl (= (=> (>= (+ e1_d (* (- 1) e2_d)) 0) thesis_d) (=> (>= (+ e1_d (* (- 1) e2_d)) 0) false))) :rule cong :premises (t34 t38))
(step t40 (cl (= (=> (>= (+ e1_d (* (- 1) e2_d)) 0) false) (not (>= (+ e1_d (* (- 1) e2_d)) 0)))) :rule all_simplify)
(step t41 (cl (= (=> (>= (+ e1_d (* (- 1) e2_d)) 0) thesis_d) (not (>= (+ e1_d (* (- 1) e2_d)) 0)))) :rule trans :premises (t39 t40))
(step t42 (cl (= (=> (<= e2_d e1_d) thesis_d) (not (>= (+ e1_d (* (- 1) e2_d)) 0)))) :rule trans :premises (t33 t41))
(step t43 (cl (not (>= (+ e1_d (* (- 1) e2_d)) 0))) :rule resolution :premises (t30 t42 a1))
(step t44 (cl (< (+ e1_d (* (- 1) e2_d)) 0)) :rule resolution :premises (t27 t29 t43))
(step t45 (cl (and (> 1 0) (< (+ e1_d (* (- 1) e2_d)) 0))) :rule resolution :premises (t22 t26 t44))
(step t46 (cl (< (* 1 (+ e1_d (* (- 1) e2_d))) (* 1 0))) :rule resolution :premises (t21 t45))
(step t47 (cl (=> (and (< (- 1) 0) (>= (+ e1_d (* (- 1) e2_d)) 1)) (<= (* (- 1) (+ e1_d (* (- 1) e2_d))) (* (- 1) 1)))) :rule la_mult_neg)
(step t48 (cl (not (and (< (- 1) 0) (>= (+ e1_d (* (- 1) e2_d)) 1))) (<= (* (- 1) (+ e1_d (* (- 1) e2_d))) (* (- 1) 1))) :rule implies :premises (t47))
(step t49 (cl (and (< (- 1) 0) (>= (+ e1_d (* (- 1) e2_d)) 1)) (not (< (- 1) 0)) (not (>= (+ e1_d (* (- 1) e2_d)) 1))) :rule and_neg)
(step t50 (cl (= (= (< (- 1) 0) true) (< (- 1) 0))) :rule equiv_simplify)
(step t51 (cl (not (= (< (- 1) 0) true)) (< (- 1) 0)) :rule equiv1 :premises (t50))
(step t52 (cl (= (< (- 1) 0) true)) :rule rare_rewrite :args ("evaluate"))
(step t53 (cl (< (- 1) 0)) :rule resolution :premises (t51 t52))
(step t54 (cl (not (= (=> (<= e1_d e2_d) thesis_d) (>= (+ e1_d (* (- 1) e2_d)) 1))) (not (=> (<= e1_d e2_d) thesis_d)) (>= (+ e1_d (* (- 1) e2_d)) 1)) :rule equiv_pos2)
(step t55 (cl (= (<= e1_d e2_d) (not (>= (+ e1_d (* (- 1) e2_d)) 1)))) :rule all_simplify)
(step t56 (cl (= (=> (<= e1_d e2_d) thesis_d) (=> (not (>= (+ e1_d (* (- 1) e2_d)) 1)) thesis_d))) :rule cong :premises (t55 t32))
(step t57 (cl (= (not (>= (+ e1_d (* (- 1) e2_d)) 1)) (not (>= (+ e1_d (* (- 1) e2_d)) 1)))) :rule refl)
(step t58 (cl (= (=> (not (>= (+ e1_d (* (- 1) e2_d)) 1)) thesis_d) (=> (not (>= (+ e1_d (* (- 1) e2_d)) 1)) false))) :rule cong :premises (t57 t38))
(step t59 (cl (= (=> (not (>= (+ e1_d (* (- 1) e2_d)) 1)) false) (>= (+ e1_d (* (- 1) e2_d)) 1))) :rule all_simplify)
(step t60 (cl (= (=> (not (>= (+ e1_d (* (- 1) e2_d)) 1)) thesis_d) (>= (+ e1_d (* (- 1) e2_d)) 1))) :rule trans :premises (t58 t59))
(step t61 (cl (= (=> (<= e1_d e2_d) thesis_d) (>= (+ e1_d (* (- 1) e2_d)) 1))) :rule trans :premises (t56 t60))
(step t62 (cl (>= (+ e1_d (* (- 1) e2_d)) 1)) :rule resolution :premises (t54 t61 a2))
(step t63 (cl (and (< (- 1) 0) (>= (+ e1_d (* (- 1) e2_d)) 1))) :rule resolution :premises (t49 t53 t62))
(step t64 (cl (<= (* (- 1) (+ e1_d (* (- 1) e2_d))) (* (- 1) 1))) :rule resolution :premises (t48 t63))
(step t65 (cl (< (+ (* 1 (+ e1_d (* (- 1) e2_d))) (* (- 1) (+ e1_d (* (- 1) e2_d)))) (+ (* 1 0) (* (- 1) 1)))) :rule resolution :premises (t19 t46 t64))
(step t66 (cl false) :rule resolution :premises (t0 t18 t65))
(step t67 (cl (not false)) :rule false)
(step t68 (cl) :rule resolution :premises (t66 t67))
