(assume a0 (not thesis_d))
(assume a1 (=> (<= e2_d e1_d) thesis_d))
(assume a2 (=> (<= e1_d e2_d) thesis_d))
(step t0 (cl (not (= (< (+ (+ e1_d (* -1 e2_d)) (* -1 (+ e1_d (* -1 e2_d)))) (+ 0 (* -1 1))) false)) (not (< (+ (+ e1_d (* -1 e2_d)) (* -1 (+ e1_d (* -1 e2_d)))) (+ 0 (* -1 1)))) false) :rule equiv_pos2)
(step t1 (cl (= (< (+ (+ e1_d (* -1 e2_d)) (* -1 (+ e1_d (* -1 e2_d)))) (+ 0 (* -1 1))) (not (>= (+ (+ e1_d (* -1 e2_d)) (* -1 (+ e1_d (* -1 e2_d)))) (+ 0 (* -1 1)))))) :rule all_simplify)
(step t2 (cl (= (+ (+ e1_d (* -1 e2_d)) (* -1 (+ e1_d (* -1 e2_d)))) (+ e1_d (* -1 e2_d) (* -1 (+ e1_d (* -1 e2_d)))))) :rule all_simplify)
(step t3 (cl (= e1_d e1_d)) :rule refl)
(step t4 (cl (= (* -1 e2_d) (* -1 e2_d))) :rule refl)
(step t5 (cl (= (* -1 (+ e1_d (* -1 e2_d))) (+ (* -1 e1_d) e2_d))) :rule all_simplify)
(step t6 (cl (= (+ e1_d (* -1 e2_d) (* -1 (+ e1_d (* -1 e2_d)))) (+ e1_d (* -1 e2_d) (+ (* -1 e1_d) e2_d)))) :rule cong :premises (t3 t4 t5))
(step t7 (cl (= (+ e1_d (* -1 e2_d) (+ (* -1 e1_d) e2_d)) 0)) :rule all_simplify)
(step t8 (cl (= (+ e1_d (* -1 e2_d) (* -1 (+ e1_d (* -1 e2_d)))) 0)) :rule trans :premises (t6 t7))
(step t9 (cl (= (+ (+ e1_d (* -1 e2_d)) (* -1 (+ e1_d (* -1 e2_d)))) 0)) :rule trans :premises (t2 t8))
(step t10 (cl (= 0 0)) :rule refl)
(step t11 (cl (= (* -1 1) -1)) :rule all_simplify)
(step t12 (cl (= (+ 0 (* -1 1)) (+ 0 -1))) :rule cong :premises (t10 t11))
(step t13 (cl (= (+ 0 -1) -1)) :rule all_simplify)
(step t14 (cl (= (+ 0 (* -1 1)) -1)) :rule trans :premises (t12 t13))
(step t15 (cl (= (>= (+ (+ e1_d (* -1 e2_d)) (* -1 (+ e1_d (* -1 e2_d)))) (+ 0 (* -1 1))) (>= 0 -1))) :rule cong :premises (t9 t14))
(step t16 (cl (= (>= 0 -1) true)) :rule all_simplify)
(step t17 (cl (= (>= (+ (+ e1_d (* -1 e2_d)) (* -1 (+ e1_d (* -1 e2_d)))) (+ 0 (* -1 1))) true)) :rule trans :premises (t15 t16))
(step t18 (cl (= (not (>= (+ (+ e1_d (* -1 e2_d)) (* -1 (+ e1_d (* -1 e2_d)))) (+ 0 (* -1 1)))) (not true))) :rule cong :premises (t17))
(step t19 (cl (= (not true) false)) :rule all_simplify)
(step t20 (cl (= (not (>= (+ (+ e1_d (* -1 e2_d)) (* -1 (+ e1_d (* -1 e2_d)))) (+ 0 (* -1 1)))) false)) :rule trans :premises (t18 t19))
(step t21 (cl (= (< (+ (+ e1_d (* -1 e2_d)) (* -1 (+ e1_d (* -1 e2_d)))) (+ 0 (* -1 1))) false)) :rule trans :premises (t1 t20))
(step t22 (cl (not (< (+ e1_d (* -1 e2_d)) 0)) (not (<= (* -1 (+ e1_d (* -1 e2_d))) (* -1 1))) (< (+ (+ e1_d (* -1 e2_d)) (* -1 (+ e1_d (* -1 e2_d)))) (+ 0 (* -1 1)))) :rule la_generic :args (1 1 1))
(step t23 (cl (not (= (not (>= (+ e1_d (* -1 e2_d)) 0)) (< (+ e1_d (* -1 e2_d)) 0))) (not (not (>= (+ e1_d (* -1 e2_d)) 0))) (< (+ e1_d (* -1 e2_d)) 0)) :rule equiv_pos2)
(step t24 (cl (= (< (+ e1_d (* -1 e2_d)) 0) (not (>= (+ e1_d (* -1 e2_d)) 0)))) :rule all_simplify)
(step t25 (cl (= (not (>= (+ e1_d (* -1 e2_d)) 0)) (< (+ e1_d (* -1 e2_d)) 0))) :rule symm :premises (t24))
(step t26 (cl (not (= (=> (<= e2_d e1_d) thesis_d) (not (>= (+ e1_d (* -1 e2_d)) 0)))) (not (=> (<= e2_d e1_d) thesis_d)) (not (>= (+ e1_d (* -1 e2_d)) 0))) :rule equiv_pos2)
(step t27 (cl (= (<= e2_d e1_d) (>= (+ e1_d (* -1 e2_d)) 0))) :rule all_simplify)
(step t28 (cl (= thesis_d thesis_d)) :rule refl)
(step t29 (cl (= (=> (<= e2_d e1_d) thesis_d) (=> (>= (+ e1_d (* -1 e2_d)) 0) thesis_d))) :rule cong :premises (t27 t28))
(step t30 (cl (= (>= (+ e1_d (* -1 e2_d)) 0) (>= (+ e1_d (* -1 e2_d)) 0))) :rule refl)
(step t31 (cl (not (= (not thesis_d) (= thesis_d false))) (not (not thesis_d)) (= thesis_d false)) :rule equiv_pos2)
(step t32 (cl (= (= thesis_d false) (not thesis_d))) :rule all_simplify)
(step t33 (cl (= (not thesis_d) (= thesis_d false))) :rule symm :premises (t32))
(step t34 (cl (= thesis_d false)) :rule resolution :premises (t31 t33 a0))
(step t35 (cl (= (=> (>= (+ e1_d (* -1 e2_d)) 0) thesis_d) (=> (>= (+ e1_d (* -1 e2_d)) 0) false))) :rule cong :premises (t30 t34))
(step t36 (cl (= (=> (>= (+ e1_d (* -1 e2_d)) 0) false) (not (>= (+ e1_d (* -1 e2_d)) 0)))) :rule all_simplify)
(step t37 (cl (= (=> (>= (+ e1_d (* -1 e2_d)) 0) thesis_d) (not (>= (+ e1_d (* -1 e2_d)) 0)))) :rule trans :premises (t35 t36))
(step t38 (cl (= (=> (<= e2_d e1_d) thesis_d) (not (>= (+ e1_d (* -1 e2_d)) 0)))) :rule trans :premises (t29 t37))
(step t39 (cl (not (>= (+ e1_d (* -1 e2_d)) 0))) :rule resolution :premises (t26 t38 a1))
(step t40 (cl (< (+ e1_d (* -1 e2_d)) 0)) :rule resolution :premises (t23 t25 t39))
(step t41 (cl (=> (and (< -1 0) (>= (+ e1_d (* -1 e2_d)) 1)) (<= (* -1 (+ e1_d (* -1 e2_d))) (* -1 1)))) :rule la_mult_neg)
(step t42 (cl (not (and (< -1 0) (>= (+ e1_d (* -1 e2_d)) 1))) (<= (* -1 (+ e1_d (* -1 e2_d))) (* -1 1))) :rule implies :premises (t41))
(step t43 (cl (and (< -1 0) (>= (+ e1_d (* -1 e2_d)) 1)) (not (< -1 0)) (not (>= (+ e1_d (* -1 e2_d)) 1))) :rule and_neg)
(step t44 (cl (= (= (< -1 0) true) (< -1 0))) :rule equiv_simplify)
(step t45 (cl (not (= (< -1 0) true)) (< -1 0)) :rule equiv1 :premises (t44))
(step t46 (cl (= (< -1 0) true)) :rule rare_rewrite :args ("evaluate"))
(step t47 (cl (< -1 0)) :rule resolution :premises (t45 t46))
(step t48 (cl (not (= (=> (<= e1_d e2_d) thesis_d) (>= (+ e1_d (* -1 e2_d)) 1))) (not (=> (<= e1_d e2_d) thesis_d)) (>= (+ e1_d (* -1 e2_d)) 1)) :rule equiv_pos2)
(step t49 (cl (= (<= e1_d e2_d) (not (>= (+ e1_d (* -1 e2_d)) 1)))) :rule all_simplify)
(step t50 (cl (= (=> (<= e1_d e2_d) thesis_d) (=> (not (>= (+ e1_d (* -1 e2_d)) 1)) thesis_d))) :rule cong :premises (t49 t28))
(step t51 (cl (= (not (>= (+ e1_d (* -1 e2_d)) 1)) (not (>= (+ e1_d (* -1 e2_d)) 1)))) :rule refl)
(step t52 (cl (= (=> (not (>= (+ e1_d (* -1 e2_d)) 1)) thesis_d) (=> (not (>= (+ e1_d (* -1 e2_d)) 1)) false))) :rule cong :premises (t51 t34))
(step t53 (cl (= (=> (not (>= (+ e1_d (* -1 e2_d)) 1)) false) (>= (+ e1_d (* -1 e2_d)) 1))) :rule all_simplify)
(step t54 (cl (= (=> (not (>= (+ e1_d (* -1 e2_d)) 1)) thesis_d) (>= (+ e1_d (* -1 e2_d)) 1))) :rule trans :premises (t52 t53))
(step t55 (cl (= (=> (<= e1_d e2_d) thesis_d) (>= (+ e1_d (* -1 e2_d)) 1))) :rule trans :premises (t50 t54))
(step t56 (cl (>= (+ e1_d (* -1 e2_d)) 1)) :rule resolution :premises (t48 t55 a2))
(step t57 (cl (and (< -1 0) (>= (+ e1_d (* -1 e2_d)) 1))) :rule resolution :premises (t43 t47 t56))
(step t58 (cl (<= (* -1 (+ e1_d (* -1 e2_d))) (* -1 1))) :rule resolution :premises (t42 t57))
(step t59 (cl (< (+ (+ e1_d (* -1 e2_d)) (* -1 (+ e1_d (* -1 e2_d)))) (+ 0 (* -1 1)))) :rule resolution :premises (t22 t40 t58))
(step t60 (cl false) :rule resolution :premises (t0 t21 t59))
(step t61 (cl (not false)) :rule false)
(step t62 (cl) :rule resolution :premises (t60 t61))
