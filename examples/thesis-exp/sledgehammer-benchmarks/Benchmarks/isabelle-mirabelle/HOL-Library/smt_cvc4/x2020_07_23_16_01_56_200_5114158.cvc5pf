(assume a0 (not (< 0 n_d)))
(assume a1 (< 1 n_d))
(step t0 (cl (not (= (< (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2))) false)) (not (< (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2)))) false) :rule equiv_pos2)
(step t1 (cl (= (< (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2))) (not (>= (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2)))))) :rule all_simplify)
(step t2 (cl (= (* 1 n_d) n_d)) :rule all_simplify)
(step t3 (cl (= (* (- 1) n_d) (* (- 1) n_d))) :rule refl)
(step t4 (cl (= (+ (* 1 n_d) (* (- 1) n_d)) (+ n_d (* (- 1) n_d)))) :rule cong :premises (t2 t3))
(step t5 (cl (= (+ n_d (* (- 1) n_d)) 0)) :rule all_simplify)
(step t6 (cl (= (+ (* 1 n_d) (* (- 1) n_d)) 0)) :rule trans :premises (t4 t5))
(step t7 (cl (= (* 1 1) 1)) :rule all_simplify)
(step t8 (cl (= (* (- 1) 2) (- 2))) :rule all_simplify)
(step t9 (cl (= (+ (* 1 1) (* (- 1) 2)) (+ 1 (- 2)))) :rule cong :premises (t7 t8))
(step t10 (cl (= (+ 1 (- 2)) (- 1))) :rule all_simplify)
(step t11 (cl (= (+ (* 1 1) (* (- 1) 2)) (- 1))) :rule trans :premises (t9 t10))
(step t12 (cl (= (>= (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2))) (>= 0 (- 1)))) :rule cong :premises (t6 t11))
(step t13 (cl (= (>= 0 (- 1)) true)) :rule all_simplify)
(step t14 (cl (= (>= (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2))) true)) :rule trans :premises (t12 t13))
(step t15 (cl (= (not (>= (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2)))) (not true))) :rule cong :premises (t14))
(step t16 (cl (= (not true) false)) :rule all_simplify)
(step t17 (cl (= (not (>= (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2)))) false)) :rule trans :premises (t15 t16))
(step t18 (cl (= (< (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2))) false)) :rule trans :premises (t1 t17))
(step t19 (cl (not (< (* 1 n_d) (* 1 1))) (not (<= (* (- 1) n_d) (* (- 1) 2))) (< (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2)))) :rule la_generic :args (1 1 1))
(step t20 (cl (=> (and (> 1 0) (< n_d 1)) (< (* 1 n_d) (* 1 1)))) :rule la_mult_pos)
(step t21 (cl (not (and (> 1 0) (< n_d 1))) (< (* 1 n_d) (* 1 1))) :rule implies :premises (t20))
(step t22 (cl (and (> 1 0) (< n_d 1)) (not (> 1 0)) (not (< n_d 1))) :rule and_neg)
(step t23 (cl (= (= (> 1 0) true) (> 1 0))) :rule equiv_simplify)
(step t24 (cl (not (= (> 1 0) true)) (> 1 0)) :rule equiv1 :premises (t23))
(step t25 (cl (= (> 1 0) true)) :rule rare_rewrite :args ("evaluate"))
(step t26 (cl (> 1 0)) :rule resolution :premises (t24 t25))
(step t27 (cl (not (= (not (>= n_d 1)) (< n_d 1))) (not (not (>= n_d 1))) (< n_d 1)) :rule equiv_pos2)
(step t28 (cl (= (< n_d 1) (not (>= n_d 1)))) :rule all_simplify)
(step t29 (cl (= (not (>= n_d 1)) (< n_d 1))) :rule symm :premises (t28))
(step t30 (cl (not (= (not (< 0 n_d)) (not (>= n_d 1)))) (not (not (< 0 n_d))) (not (>= n_d 1))) :rule equiv_pos2)
(step t31 (cl (= (< 0 n_d) (not (>= 0 n_d)))) :rule all_simplify)
(step t32 (cl (= (>= 0 n_d) (not (>= n_d 1)))) :rule all_simplify)
(step t33 (cl (= (not (>= 0 n_d)) (not (not (>= n_d 1))))) :rule cong :premises (t32))
(step t34 (cl (= (not (not (>= n_d 1))) (>= n_d 1))) :rule all_simplify)
(step t35 (cl (= (not (>= 0 n_d)) (>= n_d 1))) :rule trans :premises (t33 t34))
(step t36 (cl (= (< 0 n_d) (>= n_d 1))) :rule trans :premises (t31 t35))
(step t37 (cl (= (not (< 0 n_d)) (not (>= n_d 1)))) :rule cong :premises (t36))
(step t38 (cl (not (>= n_d 1))) :rule resolution :premises (t30 t37 a0))
(step t39 (cl (< n_d 1)) :rule resolution :premises (t27 t29 t38))
(step t40 (cl (and (> 1 0) (< n_d 1))) :rule resolution :premises (t22 t26 t39))
(step t41 (cl (< (* 1 n_d) (* 1 1))) :rule resolution :premises (t21 t40))
(step t42 (cl (=> (and (< (- 1) 0) (>= n_d 2)) (<= (* (- 1) n_d) (* (- 1) 2)))) :rule la_mult_neg)
(step t43 (cl (not (and (< (- 1) 0) (>= n_d 2))) (<= (* (- 1) n_d) (* (- 1) 2))) :rule implies :premises (t42))
(step t44 (cl (and (< (- 1) 0) (>= n_d 2)) (not (< (- 1) 0)) (not (>= n_d 2))) :rule and_neg)
(step t45 (cl (= (= (< (- 1) 0) true) (< (- 1) 0))) :rule equiv_simplify)
(step t46 (cl (not (= (< (- 1) 0) true)) (< (- 1) 0)) :rule equiv1 :premises (t45))
(step t47 (cl (= (< (- 1) 0) true)) :rule rare_rewrite :args ("evaluate"))
(step t48 (cl (< (- 1) 0)) :rule resolution :premises (t46 t47))
(step t49 (cl (not (= (< 1 n_d) (>= n_d 2))) (not (< 1 n_d)) (>= n_d 2)) :rule equiv_pos2)
(step t50 (cl (= (< 1 n_d) (not (>= 1 n_d)))) :rule all_simplify)
(step t51 (cl (= (>= 1 n_d) (not (>= n_d 2)))) :rule all_simplify)
(step t52 (cl (= (not (>= 1 n_d)) (not (not (>= n_d 2))))) :rule cong :premises (t51))
(step t53 (cl (= (not (not (>= n_d 2))) (>= n_d 2))) :rule all_simplify)
(step t54 (cl (= (not (>= 1 n_d)) (>= n_d 2))) :rule trans :premises (t52 t53))
(step t55 (cl (= (< 1 n_d) (>= n_d 2))) :rule trans :premises (t50 t54))
(step t56 (cl (>= n_d 2)) :rule resolution :premises (t49 t55 a1))
(step t57 (cl (and (< (- 1) 0) (>= n_d 2))) :rule resolution :premises (t44 t48 t56))
(step t58 (cl (<= (* (- 1) n_d) (* (- 1) 2))) :rule resolution :premises (t43 t57))
(step t59 (cl (< (+ (* 1 n_d) (* (- 1) n_d)) (+ (* 1 1) (* (- 1) 2)))) :rule resolution :premises (t19 t41 t58))
(step t60 (cl false) :rule resolution :premises (t0 t18 t59))
(step t61 (cl (not false)) :rule false)
(step t62 (cl) :rule resolution :premises (t60 t61))
