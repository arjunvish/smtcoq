(assume a0 (not false))
(assume a1 (or (not (= (vars_d t_d) bot_d)) (not (= (vars_d s_d) bot_d))))
(assume a2 (= (vars_d t_d) bot_d))
(assume a3 (= (vars_d s_d) bot_d))
(step t0 (cl (not (= (or (not (= (vars_d t_d) bot_d)) (not (= (vars_d s_d) bot_d))) (or (not (= bot_d (vars_d t_d))) (not (= bot_d (vars_d s_d)))))) (not (or (not (= (vars_d t_d) bot_d)) (not (= (vars_d s_d) bot_d)))) (or (not (= bot_d (vars_d t_d))) (not (= bot_d (vars_d s_d))))) :rule equiv_pos2)
(step t1 (cl (= (= (vars_d t_d) bot_d) (= bot_d (vars_d t_d)))) :rule all_simplify)
(step t2 (cl (= (not (= (vars_d t_d) bot_d)) (not (= bot_d (vars_d t_d))))) :rule cong :premises (t1))
(step t3 (cl (= (= (vars_d s_d) bot_d) (= bot_d (vars_d s_d)))) :rule all_simplify)
(step t4 (cl (= (not (= (vars_d s_d) bot_d)) (not (= bot_d (vars_d s_d))))) :rule cong :premises (t3))
(step t5 (cl (= (or (not (= (vars_d t_d) bot_d)) (not (= (vars_d s_d) bot_d))) (or (not (= bot_d (vars_d t_d))) (not (= bot_d (vars_d s_d)))))) :rule cong :premises (t2 t4))
(step t6 (cl (or (not (= bot_d (vars_d t_d))) (not (= bot_d (vars_d s_d))))) :rule resolution :premises (t0 t5 a1))
(step t7 (cl (not (or (not (= bot_d (vars_d t_d))) (not (= bot_d (vars_d s_d))))) (not (= bot_d (vars_d t_d))) (not (= bot_d (vars_d s_d)))) :rule or_pos)
(step t8 (cl (= bot_d (vars_d t_d))) :rule symm :premises (a2))
(step t9 (cl (= bot_d (vars_d s_d))) :rule symm :premises (a3))
(step t10 (cl (not (or (not (= bot_d (vars_d t_d))) (not (= bot_d (vars_d s_d)))))) :rule resolution :premises (t7 t8 t9))
(step t11 (cl) :rule resolution :premises (t6 t10))
