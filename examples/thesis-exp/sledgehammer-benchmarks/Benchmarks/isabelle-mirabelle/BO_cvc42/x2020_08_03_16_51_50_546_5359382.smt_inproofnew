(assume a0 (not (not (comp_hd_d gt_sym_d ground_heads_var_d (head_d ua_d) (head_d sa_d)))))
(assume a1 (not (comp_hd_d gt_sym_d ground_heads_var_d (head_d ua_d) (head_d ta_d))))
(assume a2 (= (head_d sa_d) (head_d ta_d)))
(step t2 (cl (not (not (not (comp_hd_d gt_sym_d ground_heads_var_d (head_d ua_d) (head_d sa_d))))) (comp_hd_d gt_sym_d ground_heads_var_d (head_d ua_d) (head_d sa_d))) :rule not_not)
(step t3 (cl (comp_hd_d gt_sym_d ground_heads_var_d (head_d ua_d) (head_d sa_d))) :rule th_resolution :premises (t2 a0))
(step t6 (cl (not (= gt_sym_d gt_sym_d)) (not (= ground_heads_var_d ground_heads_var_d)) (not (= (head_d ua_d) (head_d ua_d))) (not (= (head_d sa_d) (head_d ta_d))) (not (comp_hd_d gt_sym_d ground_heads_var_d (head_d ua_d) (head_d sa_d))) (comp_hd_d gt_sym_d ground_heads_var_d (head_d ua_d) (head_d ta_d))) :rule eq_congruent_pred)
(step t7 (cl (= gt_sym_d gt_sym_d)) :rule eq_reflexive)
(step t8 (cl (not (= ground_heads_var_d ground_heads_var_d)) (not (= (head_d ua_d) (head_d ua_d))) (not (= (head_d sa_d) (head_d ta_d))) (not (comp_hd_d gt_sym_d ground_heads_var_d (head_d ua_d) (head_d sa_d))) (comp_hd_d gt_sym_d ground_heads_var_d (head_d ua_d) (head_d ta_d))) :rule th_resolution :premises (t6 t7))
(step t9 (cl (= ground_heads_var_d ground_heads_var_d)) :rule eq_reflexive)
(step t10 (cl (not (= (head_d ua_d) (head_d ua_d))) (not (= (head_d sa_d) (head_d ta_d))) (not (comp_hd_d gt_sym_d ground_heads_var_d (head_d ua_d) (head_d sa_d))) (comp_hd_d gt_sym_d ground_heads_var_d (head_d ua_d) (head_d ta_d))) :rule th_resolution :premises (t8 t9))
(step t11 (cl (= (head_d ua_d) (head_d ua_d))) :rule eq_reflexive)
(step t12 (cl (not (= (head_d sa_d) (head_d ta_d))) (not (comp_hd_d gt_sym_d ground_heads_var_d (head_d ua_d) (head_d sa_d))) (comp_hd_d gt_sym_d ground_heads_var_d (head_d ua_d) (head_d ta_d))) :rule th_resolution :premises (t10 t11))
(step t13 (cl) :rule resolution :premises (t12 t3 a1 a2))
