; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort Nat_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-sort A_literal_multiset_set_d 0)
(declare-sort A_literal_multiset_list_d 0)
(declare-sort A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_d 0)
(declare-sort A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_llist_d 0)
(declare-fun j_d () Nat_d)
(declare-fun da_d () A_literal_multiset_d)
(declare-fun bot_d () A_literal_multiset_set_d)
(declare-fun cAs_d () A_literal_multiset_list_d)
(declare-fun set_d (A_literal_multiset_list_d) A_literal_multiset_set_d)
(declare-fun sts_d () A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_llist_d)
(declare-fun sup_d (A_literal_multiset_set_d A_literal_multiset_set_d) A_literal_multiset_set_d)
(declare-fun lnth_d (A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_llist_d Nat_d) A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_d)
(declare-fun insert_d (A_literal_multiset_d A_literal_multiset_set_d) A_literal_multiset_set_d)
(declare-fun less_eq_d (A_literal_multiset_set_d A_literal_multiset_set_d) Bool)
(declare-fun q_of_state_d (A_literal_multiset_set_a_literal_multiset_set_a_literal_multiset_set_prod_prod_d) A_literal_multiset_set_d)
(assert (! (not (less_eq_d (sup_d (set_d cAs_d) (insert_d da_d bot_d)) (q_of_state_d (lnth_d sts_d j_d)))) :named a0))
(assert (! (less_eq_d (sup_d (set_d cAs_d) (insert_d da_d bot_d)) (q_of_state_d (lnth_d sts_d j_d))) :named a1))
(check-sat)
;;;;(get-proof)
