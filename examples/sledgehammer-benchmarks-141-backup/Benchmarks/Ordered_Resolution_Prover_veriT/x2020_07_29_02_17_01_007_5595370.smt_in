; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort Nat_d 0)
(declare-sort A_list_d 0)
(declare-sort A_literal_multiset_list_d 0)
(declare-fun n_d () Nat_d)
(declare-fun as_d () A_list_d)
(declare-fun cAs_d () A_literal_multiset_list_d)
(declare-fun size_d (A_literal_multiset_list_d) Nat_d)
(declare-fun size_da (A_list_d) Nat_d)
(assert (! (not (= (size_d cAs_d) (size_da as_d))) :named a0))
(assert (! (= (size_d cAs_d) n_d) :named a1))
(assert (! (= (size_da as_d) n_d) :named a2))
(check-sat)
;;;;(get-proof)
