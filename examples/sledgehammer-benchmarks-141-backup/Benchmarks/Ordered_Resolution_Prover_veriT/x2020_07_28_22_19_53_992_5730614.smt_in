; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S_d 0)
(declare-sort A_literal_d 0)
(declare-sort A_s_a_fun_fun_d 0)
(declare-sort A_inference_set_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-sort A_literal_multiset_set_d 0)
(declare-sort A_inference_a_literal_multiset_fun_d 0)
(declare-fun c_d () A_literal_multiset_d)
(declare-fun l_d () A_literal_d)
(declare-fun cc_d () A_literal_multiset_set_d)
(declare-fun mu_d () S_d)
(declare-fun bot_d () A_literal_multiset_set_d)
(declare-fun sup_d (A_literal_multiset_set_d A_literal_multiset_set_d) A_literal_multiset_set_d)
(declare-fun c_mu_d () A_literal_multiset_d)
(declare-fun plus_d (A_literal_multiset_d A_literal_multiset_d) A_literal_multiset_d)
(declare-fun zero_d () A_literal_multiset_d)
(declare-fun image_d (A_inference_a_literal_multiset_fun_d A_inference_set_d) A_literal_multiset_set_d)
(declare-fun insert_d (A_literal_multiset_d A_literal_multiset_set_d) A_literal_multiset_set_d)
(declare-fun member_d (A_literal_multiset_d A_literal_multiset_set_d) Bool)
(declare-fun add_mset_d (A_literal_d A_literal_multiset_d) A_literal_multiset_d)
(declare-fun concl_of_d () A_inference_a_literal_multiset_fun_d)
(declare-fun subst_atm_d () A_s_a_fun_fun_d)
(declare-fun subst_cls_d (A_s_a_fun_fun_d A_literal_multiset_d S_d) A_literal_multiset_d)
(declare-fun inferences_from_d (A_inference_set_d A_literal_multiset_set_d) A_inference_set_d)
(declare-fun is_ground_subst_d (A_s_a_fun_fun_d S_d) Bool)
(declare-fun grounding_of_clss_d (A_s_a_fun_fun_d A_literal_multiset_set_d) A_literal_multiset_set_d)
(declare-fun ground_sound_Gamma_d () A_inference_set_d)
(assert (! (not (member_d c_mu_d (image_d concl_of_d (inferences_from_d ground_sound_Gamma_d (grounding_of_clss_d subst_atm_d (sup_d cc_d (insert_d (plus_d c_d (add_mset_d l_d zero_d)) bot_d))))))) :named a0))
(assert (! (and (= c_mu_d (subst_cls_d subst_atm_d c_d mu_d)) (is_ground_subst_d subst_atm_d mu_d)) :named a1))
(assert (! (member_d (subst_cls_d subst_atm_d c_d mu_d) (image_d concl_of_d (inferences_from_d ground_sound_Gamma_d (grounding_of_clss_d subst_atm_d (sup_d cc_d (insert_d (plus_d c_d (add_mset_d l_d zero_d)) bot_d)))))) :named a2))
(check-sat)
;;;;(get-proof)
