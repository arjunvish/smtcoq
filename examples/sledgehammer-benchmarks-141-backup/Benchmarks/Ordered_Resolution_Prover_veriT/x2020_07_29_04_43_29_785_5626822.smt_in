; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_list_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-sort A_literal_multiset_a_literal_multiset_fun_d 0)
(declare-fun s_d () A_literal_multiset_a_literal_multiset_fun_d)
(declare-fun as_d () A_list_d)
(declare-fun da_d () A_literal_multiset_d)
(declare-fun eligible_d (A_literal_multiset_a_literal_multiset_fun_d A_list_d A_literal_multiset_d) Bool)
(assert (! (not (eligible_d s_d as_d da_d)) :named a0))
(assert (! (eligible_d s_d as_d da_d) :named a1))
(check-sat)
;;;;(get-proof)
