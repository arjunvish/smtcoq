; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_set_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-sort A_literal_multiset_set_d 0)
(declare-sort A_literal_multiset_list_d 0)
(declare-sort A_literal_multiset_multiset_d 0)
(declare-sort A_literal_multiset_a_literal_multiset_fun_d 0)
(declare-fun d_d () A_literal_multiset_d)
(declare-fun n_d () A_literal_multiset_set_d)
(declare-fun s_d () A_literal_multiset_a_literal_multiset_fun_d)
(declare-fun cs_d () A_literal_multiset_list_d)
(declare-fun mset_d (A_literal_multiset_list_d) A_literal_multiset_multiset_d)
(declare-fun plus_d (A_literal_multiset_d A_literal_multiset_d) A_literal_multiset_d)
(declare-fun interp_d (A_literal_multiset_a_literal_multiset_fun_d A_literal_multiset_set_d) A_set_d)
(declare-fun sum_mset_d (A_literal_multiset_multiset_d) A_literal_multiset_d)
(declare-fun true_cls_d (A_set_d A_literal_multiset_d) Bool)
(assert (! (not (not (true_cls_d (interp_d s_d n_d) (plus_d (sum_mset_d (mset_d cs_d)) d_d)))) :named a0))
(assert (! (not (true_cls_d (interp_d s_d n_d) (plus_d (sum_mset_d (mset_d cs_d)) d_d))) :named a1))
(check-sat)
;;;;(get-proof)
