; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort S_d 0)
(declare-sort A_s_a_fun_fun_d 0)
(declare-sort A_literal_multiset_d 0)
(declare-sort A_literal_multiset_list_d 0)
(declare-sort A_literal_multiset_multiset_d 0)
(declare-fun d_d () A_literal_multiset_d)
(declare-fun e_d () A_literal_multiset_d)
(declare-fun cs_d () A_literal_multiset_list_d)
(declare-fun mset_d (A_literal_multiset_list_d) A_literal_multiset_multiset_d)
(declare-fun plus_d (A_literal_multiset_d A_literal_multiset_d) A_literal_multiset_d)
(declare-fun sigma_d () S_d)
(declare-fun sum_mset_d (A_literal_multiset_multiset_d) A_literal_multiset_d)
(declare-fun subst_atm_d () A_s_a_fun_fun_d)
(declare-fun subst_cls_d (A_s_a_fun_fun_d A_literal_multiset_d S_d) A_literal_multiset_d)
(assert (! (not (= (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) d_d) sigma_d) e_d)) :named a0))
(assert (! (= e_d (subst_cls_d subst_atm_d (plus_d (sum_mset_d (mset_d cs_d)) d_d) sigma_d)) :named a1))
(check-sat)
;;;;(get-proof)
