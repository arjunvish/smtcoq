; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_d 0)
(declare-sort A_list_d 0)
(declare-sort A_unit_rbt_d 0)
(declare-sort A_a_a_fun_fun_d 0)
(declare-fun hd_d (A_list_d) A_d)
(declare-fun ta_d () A_unit_rbt_d)
(declare-fun tl_d (A_list_d) A_list_d)
(declare-fun min_d () A_a_a_fun_fun_d)
(declare-fun top_d () A_d)
(declare-fun fold_d (A_a_a_fun_fun_d A_list_d A_d) A_d)
(declare-fun keys_d (A_unit_rbt_d) A_list_d)
(declare-fun empty_d () A_unit_rbt_d)
(declare-fun is_rbt_d (A_unit_rbt_d) Bool)
(assert (! (not (= (fold_d min_d (keys_d ta_d) top_d) (fold_d min_d (tl_d (keys_d ta_d)) (hd_d (keys_d ta_d))))) :named a0))
(assert (! (is_rbt_d ta_d) :named a1))
(assert (! (not (= ta_d empty_d)) :named a2))
(assert (! (= ta_d empty_d) :named a3))
(check-sat)
;;;;;;(get-proof)
