; --proof-with-sharing --index-fresh-sorts --proof-define-skolems --proof-prune --proof-merge --disable-print-success --disable-banner --max-time=30
(set-option :produce-proofs true)
(set-logic AUFLIA)
(declare-sort A_d 0)
(declare-sort B_d 0)
(declare-fun a_d (A_d) B_d)
(declare-fun b_d (A_d) B_d)
(declare-fun c_d () B_d)
(declare-fun f_d (A_d) B_d)
(declare-fun g_d (A_d) B_d)
(declare-fun ca_d () B_d)
(declare-fun xa_d () A_d)
(declare-fun abs_d (B_d) B_d)
(declare-fun less_d (B_d B_d) Bool)
(declare-fun plus_d (B_d B_d) B_d)
(declare-fun zero_d () B_d)
(declare-fun times_d (B_d B_d) B_d)
(declare-fun less_eq_d (B_d B_d) Bool)
(assert (! (not (less_eq_d zero_d (f_d xa_d))) :named a0))
(assert (! (less_d zero_d c_d) :named a1))
(assert (! (less_d zero_d ca_d) :named a2))
(assert (! (less_eq_d zero_d (f_d xa_d)) :named a3))
(assert (! (less_eq_d zero_d (g_d xa_d)) :named a4))
(assert (! (less_eq_d (abs_d (a_d xa_d)) (times_d c_d (f_d xa_d))) :named a5))
(assert (! (less_eq_d (abs_d (b_d xa_d)) (times_d ca_d (g_d xa_d))) :named a6))
(assert (! (less_eq_d (abs_d (plus_d (a_d xa_d) (b_d xa_d))) (plus_d (abs_d (a_d xa_d)) (abs_d (b_d xa_d)))) :named a7))
(check-sat)
;;;;;;(get-proof)
